["Clean Code", "Robert C. Martin Series\nThe mission of this series is to improve the state of the art of software craftsmanship. \nThe books in this series are technical, pragmatic, and substantial. The authors are \nhighly experienced craftsmen and professionals dedicated to writing about what \nactually works in practice, as opposed to what might work in theory. You will read \nabout what the author has done, not what he thinks you should do. If the book is \nabout programming, there will be lots of code. If the book is about managing, there \nwill be lots of case studies from real projects. \nThese are the books that all serious practitioners will have on their bookshelves. \nThese are the books that will be remembered for making a difference and for guiding \nprofessionals to become true craftsman. \nManaging Agile Projects\nSanjiv Augustine\nAgile Estimating and Planning\nMike Cohn\nWorking Effectively with Legacy Code\nMichael C. Feathers\nAgile Java\u2122: Crafting Code with Test-Driven Development\nJeff Langr\nAgile Principles, Patterns, and Practices in C#\nRobert C. Martin and Micah Martin\nAgile Software Development: Principles, Patterns, and Practices\nRobert C. Martin \nClean Code: A Handbook of Agile Software Craftsmanship\nRobert C. Martin\nUML For Java\u2122 Programmers\nRobert C. Martin\nFit for Developing Software: Framework for Integrated Tests\nRick Mugridge and Ward Cunningham\nAgile Software Development with SCRUM\nKen Schwaber and Mike Beedle\nExtreme Software Engineering: A Hands on Approach\nDaniel H. Steinberg and Daniel W. Palmer\nFor more information, visit informit.com/martinseries", "Clean Code\nA Handbook of Agile \nSoftware Craftsmanship\nThe Object Mentors: \nRobert C. Martin\nMichael C. Feathers   Timothy R. Ottinger \nJeffrey J. Langr   Brett L. Schuchert \nJames W. Grenning   Kevin Dean Wampler \nObject Mentor Inc. \nWriting clean code is what you must do in order to call yourself a professional.\nThere is no reasonable excuse for doing anything less than your best.\nUpper Saddle River, NJ \u2022 Boston \u2022 Indianapolis \u2022 San Francisco\nNew Y ork \u2022 Toronto \u2022 Montreal \u2022 London \u2022 Munich \u2022 Paris \u2022 Madrid\nCapetown \u2022 Sydney \u2022 Tokyo \u2022 Singapore \u2022 Mexico City", "Many of the designations used by manufacturers and sellers to distinguish their products are claimed as \ntrademarks. Where those designations appear in this book, and the publisher was aware of a trademark claim,\nthe designations have been printed with initial capital letters or in all capitals.\nThe authors and publisher have taken care in the preparation of this book, but make no expressed or \nimplied warranty of any kind and assume no responsibility for errors or omissions. No liability is assumed \nfor incidental or consequential damages in connection with or arising out of the use of the information or \nprograms contained herein.\nThe publisher offers excellent discounts on this book when ordered in quantity for bulk purchases or \nspecial sales, which may include electronic versions and/or custom covers and content particular to your \nbusiness, training goals, marketing focus, and branding interests. For more information, please contact:\nU.S. Corporate and Government Sales\n(800) 382-3419\ncorpsales@pearsontechgroup.com\nFor sales outside the United States please contact:\nInternational Sales\ninternational@pearsoned.com\n  Includes bibliographical references and index.\n  ISBN 0-13-235088-2 (pbk. : alk. paper)\n  1.  Agile software development. 2.  Computer software\u2014Reliability.  I. Title.\n  QA76.76.D47M3652 2008\n  005.1\u2014dc22 2008024750\nCopyright \u00a9 2009 Pearson Education, Inc.\nAll rights reserved. Printed in the United States of America. This publication is protected by copyright, \nand permission must be obtained from the publisher prior to any prohibited reproduction, storage in a \nretrieval system, or transmission in any form or by any means, electronic, mechanical, photocopying, \nrecording, or likewise. For information regarding permissions, write to:\nPearson Education, Inc\nRights and Contracts Department\n501 Boylston Street, Suite 900\nBoston, MA 02116\nFax: (617) 671-3447\nISBN-13: 978-0-13-235088-4\nISBN-10:        0-13-235088-2\nText printed in the United States on recycled paper at Courier in Stoughton, Massachusetts.\nFirst printing July, 2008", "F or Ann Marie: The ever enduring love of my life.", "This page intentionally left blank", "vii\nContents\nForeword................................................................................................ xix\nIntroduction ..........................................................................................xxv\nOn the Cover....................................................................................... xxix\nChapter 1: Clean Code........................................................................1\nThere Will Be Code...............................................................................2\nBad Code................................................................................................3\nThe Total Cost of Owning a Mess........................................................4\nThe Grand Redesign in the Sky..........................................................5\nAttitude...............................................................................................5\nThe Primal Conundrum......................................................................6\nThe Art of Clean Code?......................................................................6\nWhat Is Clean Code?..........................................................................7\nSchools of Thought..............................................................................12\nWe Are Authors....................................................................................13\nThe Boy Scout Rule.............................................................................14\nPrequel and Principles........................................................................15\nConclusion............................................................................................15\nBibliography.........................................................................................15\nChapter 2: Meaningful Names.......................................................17\nIntroduction.........................................................................................17\nUse Intention-Revealing Names.........................................................18\nAvoid Disinformation..........................................................................19\nMake Meaningful Distinctions...........................................................20\nUse Pronounceable Names..................................................................21\nUse Searchable Names........................................................................22", "viii Contents\nAvoid Encodings..................................................................................23\nHungarian Notation ..........................................................................23\nMember Pre\ufb01xes...............................................................................24\nInterfaces and Implementations .......................................................24\nAvoid Mental Mapping.......................................................................25\nClass Names .........................................................................................25\nMethod Names.....................................................................................25\nDon\u2019t Be Cute ......................................................................................26\nPick One Word per Concept...............................................................26\nDon\u2019t Pun .............................................................................................26\nUse Solution Domain Names ..............................................................27\nUse Problem Domain Names..............................................................27\nAdd Meaningful Context....................................................................27\nDon\u2019t Add Gratuitous Context...........................................................29\nFinal Words..........................................................................................30\nChapter 3: Functions.........................................................................31\nSmall!....................................................................................................34\nBlocks and Indenting........................................................................35\nDo One Thing.......................................................................................35\nSections within Functions ................................................................36\nOne Level of Abstraction per Function.............................................36\nReading Code from Top to Bottom: The Stepdown Rule..................37\nSwitch Statements ...............................................................................37\nUse Descriptive Names........................................................................39\nFunction Arguments............................................................................40\nCommon Monadic Forms.................................................................41\nFlag Arguments ................................................................................41\nDyadic Functions..............................................................................42\nTriads................................................................................................42\nArgument Objects.............................................................................43\nArgument Lists.................................................................................43\nVerbs and Keywords.........................................................................43\nHave No Side Effects...........................................................................44\nOutput Arguments ............................................................................45\nCommand Query Separation .............................................................45", "ixContents\nPrefer Exceptions to Returning Error Codes...................................46\nExtract Try/Catch Blocks .................................................................46\nError Handling Is One Thing............................................................47\nTheError.java Dependency Magnet .............................................47\nDon\u2019t Repeat Y ourself.........................................................................48\nStructured Programming...................................................................48\nHow Do Y ou Write Functions Like This?..........................................49\nConclusion............................................................................................49\nSetupTeardownIncluder .....................................................................50\nBibliography.........................................................................................52\nChapter 4: Comments .......................................................................53\nComments Do Not Make Up for Bad Code.......................................55\nExplain Y ourself in Code....................................................................55\nGood Comments..................................................................................55\nLegal Comments...............................................................................55\nInformative Comments.....................................................................56\nExplanation of Intent........................................................................56\nClari\ufb01cation......................................................................................57\nWarning of Consequences................................................................58\nTODO Comments.............................................................................58\nAmpli\ufb01cation....................................................................................59\nJavadocs in Public APIs....................................................................59\nBad Comments ....................................................................................59\nMumbling .........................................................................................59\nRedundant Comments ......................................................................60\nMisleading Comments......................................................................63\nMandated Comments........................................................................63\nJournal Comments............................................................................63\nNoise Comments ..............................................................................64\nScary Noise ......................................................................................66\nDon\u2019t Use a Comment When Y ou Can Use a \nFunction or a Variable.......................................................................67\nPosition Markers...............................................................................67\nClosing Brace Comments.................................................................67\nAttributions and Bylines...................................................................68", "x Contents\nCommented-Out Code......................................................................68\nHTML Comments ............................................................................69\nNonlocal Information .......................................................................69\nToo Much Information .....................................................................70\nInobvious Connection.......................................................................70\nFunction Headers..............................................................................70\nJavadocs in Nonpublic Code ............................................................71\nExample............................................................................................71\nBibliography.........................................................................................74\nChapter 5: Formatting......................................................................75\nThe Purpose of Formatting ................................................................76\nV ertical Formatting.............................................................................76\nThe Newspaper Metaphor ................................................................77\nVertical Openness Between Concepts ..............................................78\nVertical Density................................................................................79\nVertical Distance ..............................................................................80\nVertical Ordering..............................................................................84\nHorizontal Formatting........................................................................85\nHorizontal Openness and Density ....................................................86\nHorizontal Alignment.......................................................................87\nIndentation........................................................................................88\nDummy Scopes.................................................................................90\nTeam Rules...........................................................................................90\nUncle Bob\u2019s Formatting Rules............................................................90\nChapter 6: Objects and Data Structures....................................93\nData Abstraction..................................................................................93\nData/Object Anti-Symmetry ..............................................................95\nThe Law of Demeter............................................................................97\nTrain Wrecks ....................................................................................98\nHybrids .............................................................................................99\nHiding Structure ...............................................................................99\nData Transfer Objects.......................................................................100\nActive Record.................................................................................101\nConclusion..........................................................................................101\nBibliography.......................................................................................101", "xiContents\nChapter 7: Error Handling ...........................................................103\nUse Exceptions Rather Than Return Codes...................................104\nWrite Y our Try-Catch-Finally Statement First .......................105\nUse Unchecked Exceptions...............................................................106\nProvide Context with Exceptions.....................................................107\nDe\ufb01ne Exception Classes in Terms of a Caller\u2019s Needs..................107\nDe\ufb01ne the Normal Flow....................................................................109\nDon\u2019t Return Null..............................................................................110\nDon\u2019t Pass Null..................................................................................111\nConclusion..........................................................................................112\nBibliography.......................................................................................112\nChapter 8: Boundaries....................................................................113\nUsing Third-Party Code....................................................................114\nExploring and Learning Boundaries...............................................116\nLearning log4j.................................................................................116\nLearning Tests Are Better Than Free...............................................118\nUsing Code That Does Not Y et Exist................................................118\nClean Boundaries ..............................................................................120\nBibliography.......................................................................................120\nChapter 9: Unit Tests.......................................................................121\nThe Three Laws of TDD...................................................................122\nKeeping Tests Clean..........................................................................123\nTests Enable the -ilities...................................................................124\nClean Tests.........................................................................................124\nDomain-Speci\ufb01c Testing Language................................................127\nA Dual Standard .............................................................................127\nOne Assert per Test...........................................................................130\nSingle Concept per Test..................................................................131\nF.I.R.S.T..............................................................................................132\nConclusion..........................................................................................133\nBibliography.......................................................................................133\nChapter 10: Classes..........................................................................135\nClass Organization............................................................................136\nEncapsulation .................................................................................136", "xii Contents\nClasses Should Be Small!..................................................................136\nThe Single Responsibility Principle...............................................138\nCohesion.........................................................................................140\nMaintaining Cohesion Results in Many Small Classes..................141\nOrganizing for Change .....................................................................147\nIsolating from Change....................................................................149\nBibliography.......................................................................................151\nChapter 11: Systems ........................................................................153\nHow Would Y ou Build a City?..........................................................154\nSeparate Constructing a System from Using It..............................154\nSeparation of Main .........................................................................155\nFactories .........................................................................................155\nDependency Injection.....................................................................157\nScaling Up ..........................................................................................157\nCross-Cutting Concerns .................................................................160\nJava Proxies........................................................................................161\nPure Java AOP Frameworks.............................................................163\nAspectJ Aspects .................................................................................166\nTest Drive the System Architecture..................................................166\nOptimize Decision Making ...............................................................167\nUse Standards Wisely, When They Add Demonstrable V alue.........168\nSystems Need Domain-Speci\ufb01c Languages.....................................168\nConclusion..........................................................................................169\nBibliography.......................................................................................169\nChapter 12: Emergence..................................................................171\nGetting Clean via Emergent Design ................................................171\nSimple Design Rule 1: Runs All the Tests........................................172\nSimple Design Rules 2\u20134: Refactoring ............................................172\nNo Duplication...................................................................................173\nExpressive...........................................................................................175\nMinimal Classes and Methods .........................................................176\nConclusion..........................................................................................176\nBibliography.......................................................................................176\nChapter 13: Concurrency ..............................................................177\nWhy Concurrency?...........................................................................178\nMyths and Misconceptions.............................................................179", "xiiiContents\nChallenges ..........................................................................................180\nConcurrency Defense Principles......................................................180\nSingle Responsibility Principle ......................................................181\nCorollary: Limit the Scope of Data................................................181\nCorollary: Use Copies of Data .......................................................181\nCorollary: Threads Should Be as Independent as Possible ............182\nKnow Y our Library...........................................................................182\nThread-Safe Collections.................................................................182\nKnow Y our Execution Models..........................................................183\nProducer-Consumer........................................................................184\nReaders-Writers..............................................................................184\nDining Philosophers .......................................................................184\nBeware Dependencies Between Synchronized Methods................185\nKeep Synchronized Sections Small..................................................185\nWriting Correct Shut-Down Code Is Hard.....................................186\nTesting Threaded Code.....................................................................186\nTreat Spurious Failures as Candidate Threading Issues .................187\nGet Y our Nonthreaded Code Working First....................................187\nMake Y our Threaded Code Pluggable ............................................187\nMake Y our Threaded Code Tunable................................................187\nRun with More Threads Than Processors.......................................188\nRun on Different Platforms ............................................................188\nInstrument Y our Code to Try and Force Failures............................188\nHand-Coded ...................................................................................189\nAutomated ......................................................................................189\nConclusion..........................................................................................190\nBibliography.......................................................................................191\nChapter 14: Successive Re\ufb01nement............................................193\nArgs Implementation ........................................................................194\nHow Did I Do This? .......................................................................200\nArgs: The Rough Draft.....................................................................201\nSo I Stopped ...................................................................................212\nOn Incrementalism .........................................................................212\nString Arguments..............................................................................214\n Conclusion.........................................................................................250", "xiv Contents\nChapter 15: JUnit Internals..........................................................251\nThe JUnit Framework.......................................................................252\nConclusion..........................................................................................265\nChapter 16: Refactoring SerialDate.........................................267\nFirst, Make It Work...........................................................................268\nThen Make It Right...........................................................................270\nConclusion..........................................................................................284\nBibliography.......................................................................................284\nChapter 17: Smells and Heuristics .............................................285\nComments ..........................................................................................286\nC1: Inappropriate Information.......................................................286\nC2: Obsolete Comment...................................................................286\nC3: Redundant Comment ...............................................................286\nC4: Poorly Written Comment..........................................................287\nC5: Commented-Out Code .............................................................287\nEnvironment......................................................................................287\nE1: Build Requires More Than One Step........................................287\nE2: Tests Require More Than One Step..........................................287\nFunctions............................................................................................288\nF1: Too Many Arguments................................................................288\nF2: Output Arguments ....................................................................288\nF3: Flag Arguments........................................................................288\nF4: Dead Function .........................................................................288\nGeneral...............................................................................................288\nG1: Multiple Languages in One Source File..................................288\nG2: Obvious Behavior Is Unimplemented......................................288\nG3: Incorrect Behavior at the Boundaries.....................................289\nG4: Overridden Safeties.................................................................289\nG5: Duplication..............................................................................289\nG6: Code at Wrong Level of Abstraction........................................290\nG7: Base Classes Depending on Their Derivatives .......................291\nG8: Too Much Information.............................................................291\nG9: Dead Code...............................................................................292\nG10: V ertical Separation................................................................292\nG11: Inconsistency .........................................................................292\nG12: Clutter....................................................................................293", "xvContents\nG13: Arti\ufb01cial Coupling.................................................................293\nG14: Feature Envy..........................................................................293\nG15: Selector Arguments................................................................294\nG16: Obscured Intent.....................................................................295\nG17: Misplaced Responsibility.......................................................295\nG18: Inappropriate Static...............................................................296\nG19: Use Explanatory V ariables....................................................296\nG20: Function Names Should Say What They Do..........................297\nG21: Understand the Algorithm.....................................................297\nG22: Make Logical Dependencies Physical...................................298\nG23: Prefer Polymorphism to If/Else or Switch/Case....................299\nG24: Follow Standard Conventions................................................299\nG25: Replace Magic Numbers with Named Constants ..................300\nG26: Be Precise..............................................................................301\nG27: Structure over Convention.....................................................301\nG28: Encapsulate Conditionals .....................................................301\nG29: Avoid Negative Conditionals.................................................302\nG30: Functions Should Do One Thing...........................................302\nG31: Hidden Temporal Couplings..................................................302\nG32: Don\u2019t Be Arbitrary.................................................................303\nG33: Encapsulate Boundary Conditions........................................304\nG34: Functions Should Descend Only \nOne Level of Abstraction................................................................304\nG35: Keep Con\ufb01gurable Data at High Levels................................306\nG36: Avoid Transitive Navigation...................................................306\nJava.....................................................................................................307\nJ1: Avoid Long Import Lists by Using Wildcards............................307\nJ2: Don\u2019t Inherit Constants............................................................307\nJ3: Constants versus Enums ...........................................................308\nNames .................................................................................................309\nN1: Choose Descriptive Names......................................................309\nN2: Choose Names at the Appropriate Level of Abstraction..........311\nN3: Use Standard Nomenclature Where Possible...........................311\nN4: Unambiguous Names...............................................................312\nN5: Use Long Names for Long Scopes...........................................312\nN6: Avoid Encodings......................................................................312\nN7: Names Should Describe Side-Effects. .....................................313", "xvi Contents\nTests....................................................................................................313\nT1: Insuf\ufb01cient Tests.......................................................................313\nT2: Use a Coverage Tool!...............................................................313\nT3: Don\u2019t Skip Trivial Tests............................................................313\nT4: An Ignored Test Is a Question about an Ambiguity..................313\nT5: Test Boundary Conditions........................................................314\nT6: Exhaustively Test Near Bugs....................................................314\nT7: Patterns of Failure Are Revealing............................................314\nT8: Test Coverage Patterns Can Be Revealing...............................314\nT9: Tests Should Be Fast.................................................................314\nConclusion..........................................................................................314\nBibliography.......................................................................................315\nAppendix A: Concurrency II.........................................................317\nClient/Server Example......................................................................317\nThe Server ......................................................................................317\nAdding Threading...........................................................................319\nServer Observations .......................................................................319\nConclusion......................................................................................321\nPossible Paths of Execution..............................................................321\nNumber of Paths.............................................................................322\nDigging Deeper ..............................................................................323\nConclusion......................................................................................326\nKnowing Y our Library......................................................................326\nExecutor Framework ......................................................................326\nNonblocking Solutions...................................................................327\nNonthread-Safe Classes..................................................................328\nDependencies Between Methods \nCan Break Concurrent Code...........................................................329\nTolerate the Failure.........................................................................330\nClient-Based Locking.....................................................................330\nServer-Based Locking ....................................................................332\nIncreasing Throughput.....................................................................333\nSingle-Thread Calculation of Throughput......................................334\nMultithread Calculation of Throughput..........................................335\nDeadlock.............................................................................................335\nMutual Exclusion ...........................................................................336\nLock & Wait ...................................................................................337", "xviiContents\nNo Preemption................................................................................337\nCircular Wait ..................................................................................337\nBreaking Mutual Exclusion............................................................337\nBreaking Lock & Wait....................................................................338\nBreaking Preemption......................................................................338\nBreaking Circular Wait...................................................................338\nTesting Multithreaded Code.............................................................339\nTool Support for Testing Thread-Based Code................................342\nConclusion..........................................................................................342\nTutorial: Full Code Examples..........................................................343\nClient/Server Nonthreaded.............................................................343\nClient/Server Using Threads ..........................................................346\nAppendix B: org.jfree.date.SerialDate......................................349\nAppendix C: Cross References of Heuristics...........................409\nEpilogue................................................................................................411\nIndex......................................................................................................413", "This page intentionally left blank", "xix\nForeword\nOne of our favorite candies here in Denmark is Ga-Jol, whose strong licorice vapors are a\nperfect complement to our damp and often chilly weather. Part of the charm of Ga-Jol to\nus Danes is the wise or witty sayings printed on the \ufb02ap of every box top. I bought a two-\npack of the delicacy this morning and found that it bore this old Danish saw:\n\u00c6rlighed i sm\u00e5 ting er ikke nogen lille ting.\n\u201cHonesty in small things is not a small thing.\u201d It was a good omen consistent with what I\nalready wanted to say here. Small things matter. This is a book about humble concerns\nwhose value is nonetheless far from small.\nGod is in the details, said the architect Ludwig mies van der Rohe. This quote recalls\ncontemporary arguments about the role of architecture in software development, and par-\nticularly in the Agile world. Bob and I occasionally \ufb01nd ourselves passionately engaged in\nthis dialogue. And yes, mies van der Rohe was attentive to utility and to the timeless forms\nof building that underlie great architecture. On the other hand, he also personally selected\nevery doorknob for every house he designed. Why? Because small things matter.\nIn our ongoing \u201cdebate\u201d on TDD, Bob and I have discovered that we agree that soft-\nware architecture has an important place in development, though we likely have different\nvisions of exactly what that means. Such quibbles are relatively unimportant, however,\nbecause we can accept for granted that responsible professionals give some time to think-\ning and planning at the outset of a project. The late-1990s notions of design driven only by\nthe tests and the code are long gone. Y et attentiveness to detail is an even more critical\nfoundation of professionalism than is any grand vision. First, it is through practice in the\nsmall that professionals gain pro\ufb01ciency and trust for practice in the large. Second, the\nsmallest bit of sloppy construction, of the door that does not close tightly or the slightly\ncrooked tile on the \ufb02oor, or even the messy desk, completely dispels the charm of the\nlarger whole. That is what clean code is about.\nStill, architecture is just one metaphor for software development, and in particular for\nthat part of software that delivers the initial product in the same sense that an architect\ndelivers a pristine building. In these days of Scrum and Agile, the focus is on quickly\nbringingproduct to market. We want the factory running at top speed to produce software.\nThese are human factories: thinking, feeling coders who are working from a product back-\nlog or user story to create product. The manufacturing metaphor looms ever strong in such\nthinking. The production aspects of Japanese auto manufacturing, of an assembly-line\nworld, inspire much of Scrum.", "xx Foreword\nY et even in the auto industry, the bulk of the work lies not in manufacturing but in\nmaintenance\u2014or its avoidance. In software, 80% or more of what we do is quaintly called\n\u201cmaintenance\u201d: the act of repair. Rather than embracing the typical Western focus on pro-\nducing good software, we should be thinking more like home repairmen in the building\nindustry, or auto mechanics in the automotive \ufb01eld. What does Japanese management have\nto say about that?\nIn about 1951, a quality approach called Total Productive Maintenance (TPM) came\non the Japanese scene. Its focus is on maintenance rather than on production. One of the\nmajor pillars of TPM is the set of so-called 5S principles. 5S is a set of disciplines\u2014and\nhere I use the term \u201cdiscipline\u201d instructively. These 5S principles are in fact at the founda-\ntions of Lean\u2014another buzzword on the Western scene, and an increasingly prominent\nbuzzword in software circles. These principles are not an option. As Uncle Bob relates in\nhis front matter, good software practice requires such discipline: focus, presence of mind,\nand thinking. It is not always just about doing, about pushing the factory equipment to pro-\nduce at the optimal velocity. The 5S philosophy comprises these concepts:\n\u2022 Seiri, or organization (think \u201csort\u201d in English). Knowing where things are\u2014using \napproaches such as suitable naming\u2014is crucial. Y ou think naming identi\ufb01ers isn\u2019t \nimportant? Read on in the following chapters.\n\u2022 Seiton, or tidiness (think \u201csystematize\u201d in English). There is an old American saying: \nA place for everything, and everything in its place. A piece of code should be where \nyou expect to \ufb01nd it\u2014and, if not, you should re-factor to get it there.\n\u2022 Seiso, or cleaning (think \u201cshine\u201d in English): Keep the workplace free of hanging \nwires, grease, scraps, and waste. What do the authors here say about littering your \ncode with comments and commented-out code lines that capture history or wishes for \nthe future? Get rid of them.\n\u2022 Seiketsu, or standardization: The group agrees about how to keep the workplace clean. \nDo you think this book says anything about having a consistent coding style and set of \npractices within the group? Where do those standards come from? Read on.\n\u2022 Shutsuke, or discipline (self-discipline). This means having the discipline to follow the \npractices and to frequently re\ufb02ect on one\u2019 s work and be willing to change.\nIf you take up the challenge\u2014yes, the challenge\u2014of reading and applying this book,\nyou\u2019ll come to understand and appreciate the last point. Here, we are \ufb01nally driving to the\nroots of responsible professionalism in a profession that should be concerned with the life\ncycle of a product. As we maintain automobiles and other machines under TPM, break-\ndown maintenance\u2014waiting for bugs to surface\u2014is the exception. Instead, we go up a\nlevel: inspect the machines every day and \ufb01x wearing parts before they break, or do the\nequivalent of the proverbial 10,000-mile oil change to forestall wear and tear. In code,\nrefactor mercilessly. Y ou can improve yet one level further, as the TPM movement inno-\nvated over 50 years ago: build machines that are more maintainable in the \ufb01rst place. Mak-\ning your code readable is as important as making it executable. The ultimate practice,\nintroduced in TPM circles around 1960, is to focus on introducing entire new machines or", "xxiForeword\nreplacing old ones. As Fred Brooks admonishes us, we should probably re-do major soft-\nware chunks from scratch every seven years or so to sweep away creeping cruft. Perhaps\nwe should update Brooks\u2019 time constant to an order of weeks, days or hours instead of\nyears. That\u2019 s where detail lies.\nThere is great power in detail, yet there is something humble and profound about this\napproach to life, as we might stereotypically expect from any approach that claims Japa-\nnese roots. But this is not only an Eastern outlook on life; English and American folk wis-\ndom are full of such admonishments. The Seiton quote from above \ufb02owed from the pen of\nan Ohio minister who literally viewed neatness \u201cas a remedy for every degree of evil.\u201d\nHow about Seiso? Cleanliness is next to godliness . As beautiful as a house is, a messy\ndesk robs it of its splendor. How about Shutsuke in these small matters? He who is faithful\nin little is faithful in much . How about being eager to re-factor at the responsible time,\nstrengthening one\u2019 s position for subsequent \u201cbig\u201d decisions, rather than putting it off? A\nstitch in time saves nine . The early bird catches the worm. Don\u2019t put off until tomorrow\nwhat you can do today. (Such was the original sense of the phrase \u201cthe last responsible\nmoment\u201d in Lean until it fell into the hands of software consultants .) How about calibrat-\ning the place of small, individual efforts in a grand whole? Mighty oaks from little acorns\ngrow. Or how about integrating simple preventive work into everyday life? An ounce of\nprevention is worth a pound of cure. An apple a day keeps the doctor away. Clean code\nhonors the deep roots of wisdom beneath our broader culture, or our culture as it once was,\nor should be, and can be with attentiveness to detail. \nEven in the grand architectural literature we \ufb01nd saws that hark back to these sup-\nposed details. Think of mies van der Rohe\u2019 s doorknobs. That\u2019 s seiri. That\u2019 s being attentive\nto every variable name. Y ou should name a variable using the same care with which you\nname a \ufb01rst-born child.\nAs every homeowner knows, such care and ongoing re\ufb01nement never come to an end.\nThe architect Christopher Alexander\u2014father of patterns and pattern languages\u2014views\nevery act of design itself as a small, local act of repair. And he views the craftsmanship of\n\ufb01ne structure to be the sole purview of the architect; the larger forms can be left to patterns\nand their application by the inhabitants. Design is ever ongoing not only as we add a new\nroom to a house, but as we are attentive to repainting, replacing worn carpets, or upgrad-\ning the kitchen sink. Most arts echo analogous sentiments. In our search for others who\nascribe God\u2019 s home as being in the details, we \ufb01nd ourselves in the good company of the\n19th century French author Gustav Flaubert. The French poet Paul Valery advises us that a\npoem is never done and bears continual rework, and to stop working on it is abandonment.\nSuch preoccupation with detail is common to all endeavors of excellence. So maybe there\nis little new here, but in reading this book you will be challenged to take up good disci-\nplines that you long ago surrendered to apathy or a desire for spontaneity and just\n\u201cresponding to change.\u201d \nUnfortunately, we usually don\u2019t view such concerns as key cornerstones of the art of\nprogramming. We abandon our code early, not because it is done, but because our value\nsystem focuses more on outward appearance than on the substance of what we deliver.", "xxii Foreword\nThis inattentiveness costs us in the end: A bad penny always shows up. Research, neither in\nindustry nor in academia, humbles itself to the lowly station of keeping code clean. Back\nin my days working in the Bell Labs Software Production Research organization (Produc-\ntion, indeed!) we had some back-of-the-envelope \ufb01ndings that suggested that consistent\nindentation style was one of the most statistically signi\ufb01cant indicators of low bug density.\nWe want it to be that architecture or programming language or some other high notion\nshould be the cause of quality; as people whose supposed professionalism owes to the\nmastery of tools and lofty design methods, we feel insulted by the value that those factory-\n\ufb02oor machines, the coders, add through the simple consistent application of an indentation\nstyle. To quote my own book of 17 years ago, such style distinguishes excellence from\nmere competence. The Japanese worldview understands the crucial value of the everyday\nworker and, more so, of the systems of development that owe to the simple, everyday\nactions of those workers. Quality is the result of a million sel\ufb02ess acts of care\u2014not just of\nany great method that descends from the heavens. That these acts are simple doesn\u2019t mean\nthat they are simplistic, and it hardly means that they are easy. They are nonetheless the\nfabric of greatness and, more so, of beauty, in any human endeavor. To ignore them is not\nyet to be fully human.\nOf course, I am still an advocate of thinking at broader scope, and particularly of the\nvalue of architectural approaches rooted in deep domain knowledge and software usability.\nThe book isn\u2019t about that\u2014or, at least, it isn\u2019t obviously about that. This book has a subtler\nmessage whose profoundness should not be underappreciated. It \ufb01ts with the current saw\nof the really code-based people like Peter Sommerlad, Kevlin Henney and Giovanni\nAsproni. \u201cThe code is the design\u201d and \u201cSimple code\u201d are their mantras. While we must\ntake care to remember that the interface is the program, and that its structures have much\nto say about our program structure, it is crucial to continuously adopt the humble stance\nthat the design lives in the code. And while rework in the manufacturing metaphor leads to\ncost, rework in design leads to value. We should view our code as the beautiful articulation\nof noble efforts of design\u2014design as a process, not a static endpoint. It\u2019 s in the code that\nthe architectural metrics of coupling and cohesion play out. If you listen to Larry Constan-\ntine describe coupling and cohesion, he speaks in terms of code\u2014not lofty abstract con-\ncepts that one might \ufb01nd in UML. Richard Gabriel advises us in his essay, \u201cAbstraction\nDescant\u201d that abstraction is evil. Code is anti-evil, and clean code is perhaps divine.\nGoing back to my little box of Ga-Jol, I think it\u2019 s important to note that the Danish\nwisdom advises us not just to pay attention to small things, but also to be honest in small\nthings. This means being honest to the code, honest to our colleagues about the state of our\ncode and, most of all, being honest with ourselves about our code. Did we Do our Best to\n\u201cleave the campground cleaner than we found it\u201d? Did we re-factor our code before check-\ning in? These are not peripheral concerns but concerns that lie squarely in the center of\nAgile values. It is a recommended practice in Scrum that re-factoring be part of the con-\ncept of \u201cDone.\u201d Neither architecture nor clean code insist on perfection, only on honesty\nand doing the best we can. To err is human; to forgive, divine. In Scrum, we make every-\nthing visible. We air our dirty laundry. We are honest about the state of our code because", "xxiiiForeword\ncode is never perfect. We become more fully human, more worthy of the divine, and closer\nto that greatness in the details.\nIn our profession, we desperately need all the help we can get. If a clean shop \ufb02oor\nreduces accidents, and well-organized shop tools increase productivity, then I\u2019m all for\nthem. As for this book, it is the best pragmatic application of Lean principles to software I\nhave ever seen in print. I expected no less from this practical little group of thinking indi-\nviduals that has been striving together for years not only to become better, but also to gift\ntheir knowledge to the industry in works such as you now \ufb01nd in your hands. It leaves the\nworld a little better than I found it before Uncle Bob sent me the manuscript.\nHaving completed this exercise in lofty insights, I am off to clean my desk.\nJames O. Coplien\nM\u00f8rdrup, Denmark", "This page intentionally left blank", "xxv\nIntroduction\nWhich door represents your code? Which door represents your team or your company?\nWhy are we in that room? Is this just a normal code review or have we found a stream of\nhorrible problems shortly after going live? Are we debugging in a panic, poring over code\nthat we thought worked? Are customers leaving in droves and managers breathing down\nReproduced with the kind permission of Thom Holwerda. \nhttp://www.osnews.com/story/19266/WTFs_m\n(c) 2008 Focus Shift", "xxvi Introduction\nour necks? How can we make sure we wind up behind the right door when the going gets\ntough? The answer is: craftsmanship.\nThere are two parts to learning craftsmanship: knowledge and work. Y ou must gain\nthe knowledge of principles, patterns, practices, and heuristics that a craftsman knows, and\nyou must also grind that knowledge into your \ufb01ngers, eyes, and gut by working hard and\npracticing.\nI can teach you the physics of riding a bicycle. Indeed, the classical mathematics is\nrelatively straightforward. Gravity, friction, angular momentum, center of mass, and so\nforth, can be demonstrated with less than a page full of equations. Given those formulae I\ncould prove to you that bicycle riding is practical and give you all the knowledge you\nneeded to make it work. And you\u2019 d still fall down the \ufb01rst time you climbed on that bike.\nCoding is no different. We could write down all the \u201cfeel good\u201d principles of clean\ncode and then trust you to do the work (in other words, let you fall down when you get on\nthe bike), but then what kind of teachers would that make us, and what kind of student\nwould that make you?\nNo. That\u2019 s not the way this book is going to work.\nLearning to write clean code is hard work. It requires more than just the knowledge of\nprinciples and patterns. Y ou must sweat over it. Y ou must practice it yourself, and watch\nyourself fail. Y ou must watch others practice it and fail. Y ou must see them stumble and\nretrace their steps. Y ou must see them agonize over decisions and see the price they pay for\nmaking those decisions the wrong way. \nBe prepared to work hard while reading this book. This is not a \u201cfeel good\u201d book that\nyou can read on an airplane and \ufb01nish before you land. This book will make you work, and\nwork hard. What kind of work will you be doing? Y ou\u2019ll be reading code\u2014lots of code.\nAnd you will be challenged to think about what\u2019 s right about that code and what\u2019 s wrong\nwith it. Y ou\u2019ll be asked to follow along as we take modules apart and put them back\ntogether again. This will take time and effort; but we think it will be worth it.\nWe have divided this book into three parts. The \ufb01rst several chapters describe the prin-\nciples, patterns, and practices of writing clean code. There is quite a bit of code in these\nchapters, and they will be challenging to read. They\u2019ll prepare you for the second section\nto come. If you put the book down after reading the \ufb01rst section, good luck to you!\nThe second part of the book is the harder work. It consists of several case studies of\never-increasing complexity. Each case study is an exercise in cleaning up some code\u2014of\ntransforming code that has some problems into code that has fewer problems. The detail in\nthis section is intense. Y ou will have to \ufb02ip back and forth between the narrative and the\ncode listings. Y ou will have to analyze and understand the code we are working with and\nwalk through our reasoning for making each change we make. Set aside some time\nbecausethis should take you days.\nThe third part of this book is the payoff. It is a single chapter containing a list of heu-\nristics and smells gathered while creating the case studies. As we walked through and\ncleaned up the code in the case studies, we documented every reason for our actions as a", "xxviiIntroduction\nheuristic or smell. We tried to understand our own reactions to the code we were reading\nand changing, and worked hard to capture why we felt what we felt and did what we did.\nThe result is a knowledge base that desribes the way we think when we write, read, and\nclean code. \nThis knowledge base is of limited value if you don\u2019t do the work of carefully reading\nthrough the case studies in the second part of this book. In those case studies we have care-\nfully annotated each change we made with forward references to the heuristics. These for-\nward references appear in square brackets like this: [H22]. This lets you see the context in\nwhich those heuristics were applied and written! It is not the heuristics themselves that are\nso valuable, it is the relationship between those heuristics and the discrete decisions we\nmade while cleaning up the code in the case studies.\nTo further help you with those relationships, we have placed a cross-referenceat the end\nof the book that shows the page number for every forward reference. Y ou can use it to look\nup each place where a certain heuristic was applied.\nIf you read the \ufb01rst and third sections and skip over the case studies, then you will\nhave read yet another \u201cfeel good\u201d book about writing good software. But if you take the\ntime to work through the case studies, following every tiny step, every minute decision\u2014if\nyou put yourself in our place, and force yourself to think along the same paths that we\nthought, then you will gain a much richer understanding of those principles, patterns, prac-\ntices, and heuristics. They won\u2019t be \u201cfeel good\u201d knowledge any more. They\u2019ll have been\nground into your gut, \ufb01ngers, and heart. They\u2019ll have become part of you in the same way\nthat a bicycle becomes an extension of your will when you have mastered how to ride it.\nAcknowledgments\nArtwork\nThank you to my two artists, Jeniffer Kohnke and Angela Brooks. Jennifer is responsible\nfor the stunning and creative pictures at the start of each chapter and also for the portraits\nof Kent Beck, Ward Cunningham, Bjarne Stroustrup, Ron Jeffries, Grady Booch, Dave\nThomas, Michael Feathers, and myself. \nAngela is responsible for the clever pictures that adorn the innards of each chapter.\nShe has done quite a few pictures for me over the years, including many of the inside pic-\ntures in Agile Software Develpment: Principles, Patterns, and Practices . She is also my\n\ufb01rstborn in whom I am well pleased.", "This page intentionally left blank", "xxix\nOn the Cover\nThe image on the cover is M104: The Sombrero Galaxy. M104 is located in Virgo and is\njust under 30 million light-years from us. At it\u2019 s core is a supermassive black hole weigh-\ning in at about a billion solar masses.\nDoes the image remind you of the explosion of the Klingon power moon Praxis? I\nvividly remember the scene in Star Trek VIthat showed an equatorial ring of debris \ufb02ying\naway from that explosion. Since that scene, the equatorial ring has been a common artifact\nin sci-\ufb01 movie explosions. It was even added to the explosion of Alderaan in later editions\nof the \ufb01rst Star W ars movie.\nWhat caused this ring to form around M104? Why does it have such a huge central\nbulge and such a bright and tiny nucleus? It looks to me as though the central black hole\nlost its cool and blew a 30,000 light-year hole in the middle of the galaxy. Woe befell any\ncivilizations that might have been in the path of that cosmic disruption.\nSupermassive black holes swallow whole stars for lunch, converting a sizeable frac-\ntion of their mass to energy. E = MC 2 is leverage enough, but when M is a stellar mass:\nLook out! How many stars fell headlong into that maw before the monster was satiated?\nCould the size of the central void be a hint? \nThe image of M104 on the cover is a\ncombination of the famous visible light pho-\ntograph from Hubble (right), and the recent\ninfrared image from the Spitzer orbiting\nobservatory (below, right). It\u2019 s the infrared\nimage that clearly shows us the ring nature\nof the galaxy. In visible light we only see the\nfront edge of the ring in silhouette. The cen-\ntral bulge obscures the rest of the ring.\nBut in the infrared, the hot particles in\nthe ring shine through the central bulge. The\ntwo images combined give us a view we\u2019ve\nnot seen before and imply that long ago it\nwas a raging inferno of activity. \nCover image: \u00a9 Spitzer Space Telescope", "This page intentionally left blank", "1\n1\nClean Code\nY ou are reading this book for two reasons. First, you are a programmer. Second, you want\nto be a better programmer. Good. We need better programmers.", "2 Chapter 1: Clean Code\nThis is a book about good programming. It is \ufb01lled with code. We are going to look at\ncode from every different direction. We\u2019ll look down at it from the top, up at it from the\nbottom, and through it from the inside out. By the time we are done, we\u2019re going to know a\nlot about code. What\u2019 s more, we\u2019ll be able to tell the difference between good code and bad\ncode. We\u2019ll know how to write good code. And we\u2019ll know how to transform bad code into\ngood code. \nThere Will Be Code\nOne might argue that a book about code is somehow behind the times\u2014that code is no\nlonger the issue; that we should be concerned about models and requirements instead.\nIndeed some have suggested that we are close to the end of code. That soon all code will\nbe generated instead of written. That programmers simply won\u2019t be needed because busi-\nness people will generate programs from speci\ufb01cations.\nNonsense! We will never be rid of code, because code represents the details of the\nrequirements. At some level those details cannot be ignored or abstracted; they have to be\nspeci\ufb01ed. And specifying requirements in such detail that a machine can execute them is\nprogramming. Such a speci\ufb01cation is code.\nI expect that the level of abstraction of our languages will continue to increase. I\nalso expect that the number of domain-speci\ufb01c languages will continue to grow. This\nwill be a good thing. But it will not eliminate code. Indeed, all the speci\ufb01cations written\nin these higher level and domain-speci\ufb01c language will be code! It will still need to\nbe rigorous, accurate, and so formal and detailed that a machine can understand and\nexecute it.\nThe folks who think that code will one day disappear are like mathematicians who\nhope one day to discover a mathematics that does not have to be formal. They are hoping\nthat one day we will discover a way to create machines that can do what we want rather\nthan what we say. These machines will have to be able to understand us so well that they\ncan translate vaguely speci\ufb01ed needs into perfectly executing programs that precisely meet\nthose needs. \nThis will never happen. Not even humans, with all their intuition and creativity,\nhave been able to create successful systems from the vague feelings of their customers.\nIndeed, if the discipline of requirements speci\ufb01cation has taught us anything, it is that\nwell-speci\ufb01ed requirements are as formal as code and can act as executable tests of that\ncode!\nRemember that code is really the language in which we ultimately express the require-\nments. We may create languages that are closer to the requirements. We may create tools\nthat help us parse and assemble those requirements into formal structures. But we will\nnever eliminate necessary precision\u2014so there will always be code.", "3Bad Code\nBad Code\nI was recently reading the preface to Kent Beck\u2019 s\nbook Implementation Patterns.1 He says, \u201c. . . this\nbook is based on a rather fragile premise: that\ngood code matters. . . .\u201d A fragile premise? I dis-\nagree! I think that premise is one of the most\nrobust, supported, and overloaded of all the pre-\nmises in our craft (and I think Kent knows it). We\nknow good code matters because we\u2019ve had to\ndeal for so long with its lack.\nI know of one company that, in the late 80s,\nwrote a killer app. It was very popular, and lots of\nprofessionals bought and used it. But then the\nrelease cycles began to stretch. Bugs were not\nrepaired from one release to the next. Load times\ngrew and crashes increased. I remember the day I\nshut the product down in frustration and never\nused it again. The company went out of business\na short time after that.\nT wo decades later I met one of the early employees of that company and asked him\nwhat had happened. The answer con\ufb01rmed my fears. They had rushed the product to\nmarket and had made a huge mess in the code. As they added more and more features, the\ncode got worse and worse until they simply could not manage it any longer. It was the bad\ncode that brought the company down.\nHave you ever been signi\ufb01cantly impeded by bad code? If you are a programmer of\nany experience then you\u2019ve felt this impediment many times. Indeed, we have a name for\nit. We call it wading. We wade through bad code. We slog through a morass of tangled\nbrambles and hidden pitfalls. We struggle to \ufb01nd our way, hoping for some hint, some\nclue, of what is going on; but all we see is more and more senseless code.\nOf course you have been impeded by bad code. So then\u2014why did you write it?\nWere you trying to go fast? Were you in a rush? Probably so. Perhaps you felt that you\ndidn\u2019t have time to do a good job; that your boss would be angry with you if you took the\ntime to clean up your code. Perhaps you were just tired of working on this program and\nwanted it to be over. Or maybe you looked at the backlog of other stuff that you had prom-\nised to get done and realized that you needed to slam this module together so you could\nmove on to the next. We\u2019ve all done it. \nWe\u2019ve all looked at the mess we\u2019ve just made and then have chosen to leave it for\nanother day. We\u2019ve all felt the relief of seeing our messy program work and deciding that a\n1. [Beck07].", "4 Chapter 1: Clean Code\nworking mess is better than nothing. We\u2019ve all said we\u2019 d go back and clean it up later. Of\ncourse, in those days we didn\u2019t know LeBlanc\u2019 s law: Later equals never.\nThe Total Cost of Owning a Mess\nIf you have been a programmer for more than two or three years, you have probably been\nsigni\ufb01cantly slowed down by someone else\u2019 s messy code. If you have been a programmer\nfor longer than two or three years, you have probably been slowed down by messy code.\nThe degree of the slowdown can be signi\ufb01cant. Over the span of a year or two, teams that\nwere moving very fast at the beginning of a project can \ufb01nd themselves moving at a snail\u2019 s\npace. Every change they make to the code breaks two or three other parts of the code. No\nchange is trivial. Every addition or modi\ufb01cation to the system requires that the tangles,\ntwists, and knots be \u201cunderstood\u201d so that more tangles, twists, and knots can be added.\nOver time the mess becomes so big and so deep and so tall, they can not clean it up. There\nis no way at all.\nAs the mess builds, the productivity of the team continues to decrease, asymptotically\napproaching zero. As productivity decreases, management does the only thing they can;\nthey add more staff to the project in hopes of increasing productivity. But that new staff is\nnot versed in the design of the system. They don\u2019t know the difference between a change\nthat matches the design intent and a change that thwarts the design intent. Furthermore,\nthey, and everyone else on the team, are under horri\ufb01c pressure to increase productivity. So\nthey all make more and more messes, driving the productivity ever further toward zero.\n(See Figure 1-1.)\nFigure 1-1\nProductivity vs. time", "5The Total Cost of Owning a Mess\nThe Grand Redesign in the Sky\nEventually the team rebels. They inform management that they cannot continue to develop\nin this odious code base. They demand a redesign. Management does not want to expend\nthe resources on a whole new redesign of the project, but they cannot deny that productiv-\nity is terrible. Eventually they bend to the demands of the developers and authorize the\ngrand redesign in the sky.\nA new tiger team is selected. Everyone wants to be on this team because it\u2019 s a green-\n\ufb01eld project. They get to start over and create something truly beautiful. But only the best\nand brightest are chosen for the tiger team. Everyone else must continue to maintain the\ncurrent system.\nNow the two teams are in a race. The tiger team must build a new system that does\neverything that the old system does. Not only that, they have to keep up with the changes\nthat are continuously being made to the old system. Management will not replace the old\nsystem until the new system can do everything that the old system does.\nThis race can go on for a very long time. I\u2019ve seen it take 10 years. And by the time it\u2019 s\ndone, the original members of the tiger team are long gone, and the current members are\ndemanding that the new system be redesigned because it\u2019 s such a mess.\nIf you have experienced even one small part of the story I just told, then you already\nknow that spending time keeping your code clean is not just cost effective; it\u2019 s a matter of\nprofessional survival.\nAttitude\nHave you ever waded through a mess so grave that it took weeks to do what should have\ntaken hours? Have you seen what should have been a one-line change, made instead in\nhundreds of different modules? These symptoms are all too common. \nWhy does this happen to code? Why does good code rot so quickly into bad code? We\nhave lots of explanations for it. We complain that the requirements changed in ways that\nthwart the original design. We bemoan the schedules that were too tight to do things right.\nWe blather about stupid managers and intolerant customers and useless marketing types\nand telephone sanitizers. But the fault, dear Dilbert, is not in our stars, but in ourselves.\nWe are unprofessional.\nThis may be a bitter pill to swallow. How could this mess be our fault? What about the\nrequirements? What about the schedule? What about the stupid managers and the useless\nmarketing types? Don\u2019t they bear some of the blame?\nNo. The managers and marketers look to us for the information they need to make\npromises and commitments; and even when they don\u2019t look to us, we should not be shy\nabout telling them what we think. The users look to us to validate the way the requirements\nwill \ufb01t into the system. The project managers look to us to help work out the schedule. We", "6 Chapter 1: Clean Code\nare deeply complicit in the planning of the project and share a great deal of the responsi-\nbility for any failures; especially if those failures have to do with bad code!\n\u201cBut wait!\u201d you say. \u201cIf I don\u2019t do what my manager says, I\u2019ll be \ufb01red.\u201d Probably not.\nMost managers want the truth, even when they don\u2019t act like it. Most managers want good\ncode, even when they are obsessing about the schedule. They may defend the schedule and\nrequirements with passion; but that\u2019 s their job. It\u2019 s your job to defend the code with equal\npassion.\nTo drive this point home, what if you were a doctor and had a patient who demanded\nthat you stop all the silly hand-washing in preparation for surgery because it was taking\ntoo much time?2 Clearly the patient is the boss; and yet the doctor should absolutely refuse\nto comply. Why? Because the doctor knows more than the patient about the risks of dis-\nease and infection. It would be unprofessional (never mind criminal) for the doctor to\ncomply with the patient.\nSo too it is unprofessional for programmers to bend to the will of managers who don\u2019t\nunderstand the risks of making messes.\nThe Primal Conundrum\nProgrammers face a conundrum of basic values. All developers with more than a few years\nexperience know that previous messes slow them down. And yet all developers feel\nthe pressure to make messes in order to meet deadlines. In short, they don\u2019t take the time\nto go fast!\nTrue professionals know that the second part of the conundrum is wrong. Y ou will not\nmake the deadline by making the mess. Indeed, the mess will slow you down instantly, and\nwill force you to miss the deadline. The only way to make the deadline\u2014the only way to\ngo fast\u2014is to keep the code as clean as possible at all times.\nThe Art of Clean Code?\nLet\u2019 s say you believe that messy code is a signi\ufb01cant impediment. Let\u2019 s say that you accept\nthat the only way to go fast is to keep your code clean. Then you must ask yourself: \u201cHow\ndo I write clean code?\u201d It\u2019 s no good trying to write clean code if you don\u2019t know what it\nmeans for code to be clean! \nThe bad news is that writing clean code is a lot like painting a picture. Most of us\nknow when a picture is painted well or badly. But being able to recognize good art from\nbad does not mean that we know how to paint. So too being able to recognize clean code\nfrom dirty code does not mean that we know how to write clean code!\n2. When hand-washing was \ufb01rst recommended to physicians by Ignaz Semmelweis in 1847, it was rejected on the basis that \ndoctors were too busy and wouldn\u2019t have time to wash their hands between patient visits.", "7The Total Cost of Owning a Mess\nWriting clean code requires the disciplined use of a myriad little techniques applied\nthrough a painstakingly acquired sense of \u201ccleanliness.\u201d This \u201ccode-sense\u201d is the key.\nSome of us are born with it. Some of us have to \ufb01ght to acquire it. Not only does it let us\nsee whether code is good or bad, but it also shows us the strategy for applying our disci-\npline to transform bad code into clean code.\nA programmer without \u201ccode-sense\u201d can look at a messy module and recognize the\nmess but will have no idea what to do about it. A programmer with \u201ccode-sense\u201d will look\nat a messy module and see options and variations. The \u201ccode-sense\u201d will help that pro-\ngrammer choose the best variation and guide him or her to plot a sequence of behavior\npreserving transformations to get from here to there.\nIn short, a programmer who writes clean code is an artist who can take a blank screen\nthrough a series of transformations until it is an elegantly coded system.\nWhat Is Clean Code?\nThere are probably as many de\ufb01nitions as there are programmers. So I asked some very\nwell-known and deeply experienced programmers what they thought. \nBjarne Stroustrup, inventor of C++ \nand author of The C++ Programming \nLanguage\nI like my code to be elegant and ef\ufb01cient. The\nlogic should be straightforward to make it hard\nfor bugs to hide, the dependencies minimal to\nease maintenance, error handling complete\naccording to an articulated strategy, and per-\nformance close to optimal so as not to tempt\npeople to make the code messy with unprinci-\npled optimizations. Clean code does one thing\nwell.\nBjarne uses the word \u201celegant.\u201d That\u2019 s\nquite a word! The dictionary in my MacBook\u00ae\nprovides the following de\ufb01nitions: pleasingly\ngraceful and stylish in appearance or manner; pleasingly ingenious and simple.Notice the\nemphasis on the word \u201cpleasing.\u201d Apparently Bjarne thinks that clean code is pleasing to\nread. Reading it should make you smile the way a well-crafted music box or well-designed\ncar would.\nBjarne also mentions ef\ufb01ciency\u2014 twice. Perhaps this should not surprise us coming\nfrom the inventor of C++; but I think there\u2019 s more to it than the sheer desire for speed.\nWasted cycles are inelegant, they are not pleasing. And now note the word that Bjarne uses", "8 Chapter 1: Clean Code\nto describe the consequence of that inelegance. He uses the word \u201ctempt.\u201d There is a deep\ntruth here. Bad code tempts the mess to grow! When others change bad code, they tend to\nmake it worse. \nPragmatic Dave Thomas and Andy Hunt said this a different way. They used the meta-\nphor of broken windows.3 A building with broken windows looks like nobody cares about\nit. So other people stop caring. They allow more windows to become broken. Eventually\nthey actively break them. They despoil the facade with graf\ufb01ti and allow garbage to col-\nlect. One broken window starts the process toward decay.\nBjarne also mentions that error handing should be complete. This goes to the disci-\npline of paying attention to details. Abbreviated error handling is just one way that pro-\ngrammers gloss over details. Memory leaks are another, race conditions still another.\nInconsistent naming yet another. The upshot is that clean code exhibits close attention to\ndetail.\nBjarne closes with the assertion that clean code does one thing well. It is no accident\nthat there are so many principles of software design that can be boiled down to this simple\nadmonition. Writer after writer has tried to communicate this thought. Bad code tries to do\ntoo much, it has muddled intent and ambiguity of purpose. Clean code is focused. Each\nfunction, each class, each module exposes a single-minded attitude that remains entirely\nundistracted, and unpolluted, by the surrounding details.\nGrady Booch, author of Object\nOriented Analysis and Design with \nApplications\nClean code is simple and direct. Clean code\nreads like well-written prose. Clean code never\nobscures the designer\u2019 s intent but rather is full\nof crisp abstractions and straightforward lines\nof control.\nGrady makes some of the same points as\nBjarne, but he takes a readability perspective. I\nespecially like his view that clean code should\nread like well-written prose. Think back on a\nreally good book that you\u2019ve read. Remember how the words disappeared to be replaced\nby images! It was like watching a movie, wasn\u2019t it? Better! Y ou saw the characters, you\nheard the sounds, you experienced the pathos and the humor.\nReading clean code will never be quite like reading Lord of the Rings. Still, the liter-\nary metaphor is not a bad one. Like a good novel, clean code should clearly expose the ten-\nsions in the problem to be solved. It should build those tensions to a climax and then give\n3. http://www.pragmaticprogrammer.com/booksellers/2004-12.html", "9The Total Cost of Owning a Mess\nthe reader that \u201cAha! Of course!\u201d as the issues and tensions are resolved in the revelation\nof an obvious solution. \nI \ufb01nd Grady\u2019 s use of the phrase \u201ccrisp abstraction\u201d to be a fascinating oxymoron!\nAfter all the word \u201ccrisp\u201d is nearly a synonym for \u201cconcrete.\u201d My MacBook\u2019 s dictionary\nholds the following de\ufb01nition of \u201ccrisp\u201d: briskly decisive and matter-of-fact, without hesi-\ntation or unnecessary detail. Despite this seeming juxtaposition of meaning, the words\ncarry a powerful message. Our code should be matter-of-fact as opposed to speculative.\nIt should contain only what is necessary. Our readers should perceive us to have been\ndecisive.\n\u201cBig\u201d Dave Thomas, founder \nof OTI, godfather of the \nEclipse strategy \nClean code can be read, and enhanced by a\ndeveloper other than its original author. It has\nunit and acceptance tests. It has meaningful\nnames. It provides one way rather than many\nways for doing one thing. It has minimal depen-\ndencies, which are explicitly de\ufb01ned, and pro-\nvides a clear and minimal API. Code should be\nliterate since depending on the language, not all\nnecessary information can be expressed clearly\nin code alone.\nBig Dave shares Grady\u2019 s desire for readabil-\nity, but with an important twist. Dave asserts that\nclean code makes it easy for other people to enhance it. This may seem obvious, but it can-\nnot be overemphasized. There is, after all, a difference between code that is easy to read\nand code that is easy to change. \nDave ties cleanliness to tests! Ten years ago this would have raised a lot of eyebrows.\nBut the discipline of Test Driven Development has made a profound impact upon our\nindustry and has become one of our most fundamental disciplines. Dave is right. Code,\nwithout tests, is not clean. No matter how elegant it is, no matter how readable and acces-\nsible, if it hath not tests, it be unclean. \nDave uses the word minimal twice. Apparently he values code that is small, rather\nthan code that is large. Indeed, this has been a common refrain throughout software litera-\nture since its inception. Smaller is better. \nDave also says that code should be literate. This is a soft reference to Knuth\u2019 s literate\nprogramming.4 The upshot is that the code should be composed in such a form as to make\nit readable by humans. \n4. [Knuth92].", "10 Chapter 1: Clean Code\nMichael Feathers, author of Working\nEffectively with Legacy Code\nI could list all of the qualities that I notice in\nclean code, but there is one overarching quality\nthat leads to all of them. Clean code always\nlooks like it was written by someone who cares.\nThere is nothing obvious that you can do to\nmake it better. All of those things were thought\nabout by the code\u2019 s author, and if you try to\nimagine improvements, you\u2019re led back to\nwhere you are, sitting in appreciation of the\ncode someone left for you\u2014code left by some-\none who cares deeply about the craft.\nOne word: care. That\u2019 s really the topic of\nthis book. Perhaps an appropriate subtitle\nwould be How to Care for Code.\nMichael hit it on the head. Clean code is\ncode that has been taken care of. Someone has taken the time to keep it simple and orderly.\nThey have paid appropriate attention to details. They have cared.\nRon Jeffries, author of Extreme Programming \nInstalled and Extreme Programming \nAdventures in C#\nRon began his career programming in Fortran at\nthe Strategic Air Command and has written code in\nalmost every language and on almost every\nmachine. It pays to consider his words carefully.\nIn recent years I begin, and nearly end, with Beck\u2019 s\nrules of simple code. In priority order, simple code:\n\u2022 Runs all the tests;\n\u2022 Contains no duplication;\n\u2022 Expresses all the design ideas that are in the \nsystem;\n\u2022 Minimizes the number of entities such as classes,\nmethods, functions, and the like.\nOf these, I focus mostly on duplication. When the same thing is done over and over,\nit\u2019 s a sign that there is an idea in our mind that is not well represented in the code. I try to\n\ufb01gure out what it is. Then I try to express that idea more clearly.\nExpressiveness to me includes meaningful names, and I am likely to change the\nnames of things several times before I settle in. With modern coding tools such as Eclipse,\nrenaming is quite inexpensive, so it doesn\u2019t trouble me to change. Expressiveness goes", "11The Total Cost of Owning a Mess\nbeyond names, however. I also look at whether an object or method is doing more than one\nthing. If it\u2019 s an object, it probably needs to be broken into two or more objects. If it\u2019 s a\nmethod, I will always use the Extract Method refactoring on it, resulting in one method\nthat says more clearly what it does, and some submethods saying how it is done.\nDuplication and expressiveness take me a very long way into what I consider clean\ncode, and improving dirty code with just these two things in mind can make a huge differ-\nence. There is, however, one other thing that I\u2019m aware of doing, which is a bit harder to\nexplain.\nAfter years of doing this work, it seems to me that all programs are made up of very\nsimilar elements. One example is \u201c\ufb01nd things in a collection. \u201d Whether we have a data-\nbase of employee records, or a hash map of keys and values, or an array of items of some\nkind, we often \ufb01nd ourselves wanting a particular item from that collection. When I \ufb01nd\nthat happening, I will often wrap the particular implementation in a more abstract method\nor class. That gives me a couple of interesting advantages.\nI can implement the functionality now with something simple, say a hash map, but\nsince now all the references to that search are covered by my little abstraction, I can\nchange the implementation any time I want. I can go forward quickly while preserving my\nability to change later.\nIn addition, the collection abstraction often calls my attention to what\u2019 s \u201creally\u201d\ngoing on, and keeps me from running down the path of implementing arbitrary collection\nbehavior when all I really need is a few fairly simple ways of \ufb01nding what I want.\nReduced duplication, high expressiveness, and early building of simple abstractions.\nThat\u2019 s what makes clean code for me.\nHere, in a few short paragraphs, Ron has summarized the contents of this book. No\nduplication, one thing, expressiveness, tiny abstractions. Everything is there. \nWard Cunningham, inventor of Wiki, \ninventor of Fit, coinventor of eXtreme \nProgramming. Motive force behind \nDesign Patterns. Smalltalk and OO \nthought leader. The godfather of all \nthose who care about code.\nYou know you are working on clean code when each\nroutine you read turns out to be pretty much what\nyou expected. You can call it beautiful code when\nthe code also makes it look like the language was\nmade for the problem.\nStatements like this are characteristic of Ward.\nY ou read it, nod your head, and then go on to the\nnext topic. It sounds so reasonable, so obvious, that it barely registers as something\nprofound. Y ou might think it was pretty much what you expected. But let\u2019 s take a closer\nlook.", "12 Chapter 1: Clean Code\n\u201c. . . pretty much what you expected.\u201d When was the last time you saw a module that\nwas pretty much what you expected? Isn\u2019t it more likely that the modules you look at will\nbe puzzling, complicated, tangled? Isn\u2019t misdirection the rule? Aren\u2019t you used to \ufb02ailing\nabout trying to grab and hold the threads of reasoning that spew forth from the whole sys-\ntem and weave their way through the module you are reading? When was the last time you\nread through some code and nodded your head the way you might have nodded your head\nat Ward\u2019 s statement?\nWard expects that when you read clean code you won\u2019t be surprised at all. Indeed, you\nwon\u2019t even expend much effort. Y ou will read it, and it will be pretty much what you\nexpected. It will be obvious, simple, and compelling. Each module will set the stage for\nthe next. Each tells you how the next will be written. Programs that are that clean are so\nprofoundly well written that you don\u2019t even notice it. The designer makes it look ridicu-\nlously simple like all exceptional designs.\nAnd what about Ward\u2019 s notion of beauty? We\u2019ve all railed against the fact that our lan-\nguages weren\u2019t designed for our problems. But Ward\u2019 s statement puts the onus back on us.\nHe says that beautiful code makes the language look like it was made for the problem! So\nit\u2019 s our responsibility to make the language look simple! Language bigots everywhere,\nbeware! It is not the language that makes programs appear simple. It is the programmer\nthat make the language appear simple!\nSchools of Thought\nWhat about me (Uncle Bob)? What do I think\nclean code is? This book will tell you, in hideous\ndetail, what I and my compatriots think about\nclean code. We will tell you what we think makes\na clean variable name, a clean function, a clean\nclass, etc. We will present these opinions as abso-\nlutes, and we will not apologize for our stridence.\nTo us, at this point in our careers, they are abso-\nlutes. They are our school of thought about clean\ncode.\nMartial artists do not all agree about the best\nmartial art, or the best technique within a martial\nart. Often master martial artists will form their\nown schools of thought and gather students to\nlearn from them. So we see Gracie Jiu Jistu ,\nfounded and taught by the Gracie family in Brazil. We see Hakkoryu Jiu Jistu , founded\nand taught by Okuyama Ryuho in Tokyo. We see Jeet Kune Do , founded and taught by\nBruce Lee in the United States.", "13We Are Authors\nStudents of these approaches immerse themselves in the teachings of the founder.\nThey dedicate themselves to learn what that particular master teaches, often to the exclu-\nsion of any other master\u2019 s teaching. Later, as the students grow in their art, they may\nbecome the student of a different master so they can broaden their knowledge and practice.\nSome eventually go on to re\ufb01ne their skills, discovering new techniques and founding their\nown schools.\nNone of these different schools is absolutely right. Y et within a particular school we\nact as though the teachings and techniques are right. After all, there is a right way to prac-\ntice Hakkoryu Jiu Jitsu, or Jeet Kune Do. But this rightness within a school does not inval-\nidate the teachings of a different school.\nConsider this book a description of the Object Mentor School of Clean Code . The\ntechniques and teachings within are the way that we practice our art. We are willing to\nclaim that if you follow these teachings, you will enjoy the bene\ufb01ts that we have enjoyed,\nand you will learn to write code that is clean and professional. But don\u2019t make the mistake\nof thinking that we are somehow \u201cright\u201d in any absolute sense. There are other schools and\nother masters that have just as much claim to professionalism as we. It would behoove you\nto learn from them as well.\nIndeed, many of the recommendations in this book are controversial. Y ou will proba-\nbly not agree with all of them. Y ou might violently disagree with some of them. That\u2019 s \ufb01ne.\nWe can\u2019t claim \ufb01nal authority. On the other hand, the recommendations in this book are\nthings that we have thought long and hard about. We have learned them through decades of\nexperience and repeated trial and error. So whether you agree or disagree, it would be a\nshame if you did not see, and respect, our point of view.\nWe Are Authors\nThe @author \ufb01eld of a Javadoc tells us who we are. We are authors. And one thing about\nauthors is that they have readers. Indeed, authors are responsible for communicating well\nwith their readers. The next time you write a line of code, remember you are an author,\nwriting for readers who will judge your effort.\nY ou might ask: How much is code really read? Doesn\u2019t most of the effort go into\nwriting it? \nHave you ever played back an edit session? In the 80s and 90s we had editors like Emacs\nthat kept track of every keystroke. Y ou could work for an hour and then play back your whole\nedit session like a high-speed movie. When I did this, the results were fascinating.\nThe vast majority of the playback was scrolling and navigating to other modules!\nBob enters the module. \nHe scrolls down to the function needing change. \nHe pauses, considering his options. \nOh, he\u2019 s scrolling up to the top of the module to check the initialization of a variable.\nNow he scrolls back down and begins to type.", "14 Chapter 1: Clean Code\nOoops, he\u2019 s erasing what he typed!\nHe types it again.\nHe erases it again!\nHe types half of something else but then erases that!\nHe scrolls down to another function that calls the function he\u2019 s changing to see how it is\ncalled.\nHe scrolls back up and types the same code he just erased.\nHe pauses.\nHe erases that code again!\nHe pops up another window and looks at a subclass. Is that function overridden?\n. . .\nY ou get the drift. Indeed, the ratio of time spent reading vs. writing is well over 10:1.\nWe are constantly reading old code as part of the effort to write new code.\nBecause this ratio is so high, we want the reading of code to be easy, even if it makes\nthe writing harder. Of course there\u2019 s no way to write code without reading it, so making it\neasy to read actually makes it easier to write.\nThere is no escape from this logic. Y ou cannot write code if you cannot read the sur-\nrounding code. The code you are trying to write today will be hard or easy to write\ndepending on how hard or easy the surrounding code is to read. So if you want to go fast,\nif you want to get done quickly, if you want your code to be easy to write, make it easy to\nread.\nThe Boy Scout Rule\nIt\u2019 s not enough to write the code well. The code has to be kept clean over time. We\u2019ve all\nseen code rot and degrade as time passes. So we must take an active role in preventing this\ndegradation.\nThe Boy Scouts of America have a simple rule that we can apply to our profession. \nLeave the campground cleaner than you found it.5\nIf we all checked-in our code a little cleaner than when we checked it out, the code\nsimply could not rot. The cleanup doesn\u2019t have to be something big. Change one variable\nname for the better, break up one function that\u2019 s a little too large, eliminate one small bit of\nduplication, clean up one composite if statement. \nCan you imagine working on a project where the code simply got better as time\npassed? Do you believe that any other option is professional? Indeed, isn\u2019t continuous\nimprovement an intrinsic part of professionalism?\n5. This was adapted from Robert Stephenson Smyth Baden-Powell\u2019 s farewell message to the Scouts: \u201cTry and leave this world a \nlittle better than you found it . . .\u201d", "15Bibliography\nPrequel and Principles\nIn many ways this book is a \u201cprequel\u201d to a book I wrote in 2002 entitled Agile Software\nDevelopment: Principles, Patterns, and Practices (PPP). The PPP book concerns itself\nwith the principles of object-oriented design, and many of the practices used by profes-\nsional developers. If you have not read PPP , then you may \ufb01nd that it continues the story\ntold by this book. If you have already read it, then you\u2019ll \ufb01nd many of the sentiments of\nthat book echoed in this one at the level of code.\nIn this book you will \ufb01nd sporadic references to various principles of design. These\ninclude the Single Responsibility Principle (SRP), the Open Closed Principle (OCP), and\nthe Dependency Inversion Principle (DIP) among others. These principles are described in\ndepth in PPP . \nConclusion\nBooks on art don\u2019t promise to make you an artist. All they can do is give you some of the\ntools, techniques, and thought processes that other artists have used. So too this book can-\nnot promise to make you a good programmer. It cannot promise to give you \u201ccode-sense.\u201d\nAll it can do is show you the thought processes of good programmers and the tricks, tech-\nniques, and tools that they use. \nJust like a book on art, this book will be full of details. There will be lots of code.\nY ou\u2019ll see good code and you\u2019ll see bad code. Y ou\u2019ll see bad code transformed into good\ncode. Y ou\u2019ll see lists of heuristics, disciplines, and techniques. Y ou\u2019ll see example after\nexample. After that, it\u2019 s up to you. \nRemember the old joke about the concert violinist who got lost on his way to a perfor-\nmance? He stopped an old man on the corner and asked him how to get to Carnegie Hall.\nThe old man looked at the violinist and the violin tucked under his arm, and said: \u201cPrac-\ntice, son. Practice!\u201d\nBibliography\n[Beck07]:  Implementation Patterns, Kent Beck, Addison-Wesley, 2007.\n[Knuth92]:  Literate Programming, Donald E. Knuth, Center for the Study of Language\nand Information, Leland Stanford Junior University, 1992.", "This page intentionally left blank", "17\n2\nMeaningful Names\nby Tim Ottinger\nIntroduction\nNames are everywhere in software. We name our variables, our functions, our arguments,\nclasses, and packages. We name our source \ufb01les and the directories that contain them. We\nname our jar \ufb01les and war \ufb01les and ear \ufb01les. We name and name and name. Because we do", "18 Chapter 2: Meaningful Names\nso much of it, we\u2019 d better do it well. What follows are some simple rules for creating\ngood names.\nUse Intention-Revealing Names\nIt is easy to say that names should reveal intent. What we want to impress upon you is that\nwe areserious about this. Choosing good names takes time but saves more than it takes.\nSo take care with your names and change them when you \ufb01nd better ones. Everyone who\nreads your code (including you) will be happier if you do.\nThe name of a variable, function, or class, should answer all the big questions. It\nshould tell you why it exists, what it does, and how it is used. If a name requires a com-\nment, then the name does not reveal its intent. \nint d; // elapsed time in days\nThe name d reveals nothing. It does not evoke a sense of elapsed time, nor of days. We\nshould choose a name that speci\ufb01es what is being measured and the unit of that measure-\nment:\nint elapsedTimeInDays;\nint daysSinceCreation;int daysSinceModification;\nint fileAgeInDays;\nChoosing names that reveal intent can make it much easier to understand and change\ncode. What is the purpose of this code?\n  public List<int[]> getThem() {\n    List<int[]> list1 = new ArrayList<int[]>();    for (int[] x : theList)\n      if (x[0] == 4) \n        list1.add(x);    return list1;  }\nWhy is it hard to tell what this code is doing? There are no complex expressions.\nSpacing and indentation are reasonable. There are only three variables and two constants\nmentioned. There aren\u2019t even any fancy classes or polymorphic methods, just a list of\narrays (or so it seems).\nThe problem isn\u2019t the simplicity of the code but the implicity of the code (to coin a\nphrase): the degree to which the context is not explicit in the code itself. The code implic-\nitly requires that we know the answers to questions such as:\n1. What kinds of things are in theList?\n2. What is the signi\ufb01cance of the zeroth subscript of an item in theList?\n3. What is the signi\ufb01cance of the value 4?\n4. How would I use the list being returned?", "19Avoid Disinformation\nThe answers to these questions are not present in the code sample, but they could have\nbeen. Say that we\u2019re working in a mine sweeper game. We \ufb01nd that the board is a list of\ncells called theList. Let\u2019 s rename that to gameBoard.\nEach cell on the board is represented by a simple array. We further \ufb01nd that the zeroth\nsubscript is the location of a status value and that a status value of 4 means \u201c\ufb02agged.\u201d Just\nby giving these concepts names we can improve the code considerably:\n  public List<int[]> getFlaggedCells() {\n    List<int[]> flaggedCells = new ArrayList<int[]>();    for (int[] cell : gameBoard)\n      if (cell[STATUS_VALUE] == FLAGGED)\n        flaggedCells.add(cell);    return flaggedCells;  }\nNotice that the simplicity of the code has not changed. It still has exactly the same number\nof operators and constants, with exactly the same number of nesting levels. But the code\nhas become much more explicit.\nWe can go further and write a simple class for cells instead of using an array of ints.\nIt can include an intention-revealing function (call it isFlagged) to hide the magic num-\nbers. It results in a new version of the function:\n  public List<Cell> getFlaggedCells() {\n    List<Cell> flaggedCells = new ArrayList<Cell>();    for (Cell cell : gameBoard)\n      if (cell.isFlagged())\n        flaggedCells.add(cell);    return flaggedCells;  }\nWith these simple name changes, it\u2019 s not dif\ufb01cult to understand what\u2019 s going on. This is\nthe power of choosing good names.\nAvoid Disinformation\nProgrammers must avoid leaving false clues that obscure the meaning of code. We should\navoid words whose entrenched meanings vary from our intended meaning. For example,\nhp, aix, and sco would be poor variable names because they are the names of Unix plat-\nforms or variants. Even if you are coding a hypotenuse and hp looks like a good abbrevia-\ntion, it could be disinformative.\nDo not refer to a grouping of accounts as an accountList unless it\u2019 s actually a List.\nThe word list means something speci\ufb01c to programmers. If the container holding the\naccounts is not actually a List, it may lead to false conclusions. 1 So accountGroup or\nbunchOfAccounts or just plain accounts would be better.\n1. As we\u2019ll see later on, even if the container is a List, it\u2019 s probably better not to encode the container type into the name.", "20 Chapter 2: Meaningful Names\nBeware of using names which vary in small ways. How long does it take to spot the\nsubtle difference between a XYZControllerForEfficientHandlingOfStrings in one module\nand, somewhere a little more distant, XYZControllerForEfficientStorageOfStrings? The\nwords have frightfully similar shapes.\nSpelling similar concepts similarly is information. Using inconsistent spellings is dis-\ninformation. With modern Java environments we enjoy automatic code completion. We\nwrite a few characters of a name and press some hotkey combination (if that) and are\nrewarded with a list of possible completions for that name. It is very helpful if names for\nvery similar things sort together alphabetically and if the differences are very obvious,\nbecause the developer is likely to pick an object by name without seeing your copious\ncomments or even the list of methods supplied by that class.\nA truly awful example of disinformative names would be the use of lower-case L or\nuppercase O as variable names, especially in combination. The problem, of course, is that\nthey look almost entirely like the constants one and zero, respectively.\nint a = l;\nif ( O == l )  a = O1;\nelse\n  l = 01;\nThe reader may think this a contrivance, but we have examined code where such\nthings were abundant. In one case the author of the code suggested using a different font\nso that the differences were more obvious, a solution that would have to be passed down to\nall future developers as oral tradition or in a written document. The problem is conquered\nwith \ufb01nality and without creating new work products by a simple renaming.\nMake Meaningful \nDistinctions\nProgrammers create problems for them-\nselves when they write code solely to sat-\nisfy a compiler or interpreter. For example,\nbecause you can\u2019t use the same name to refer\nto two different things in the same scope,\nyou might be tempted to change one name\nin an arbitrary way. Sometimes this is done by misspelling one, leading to the surprising\nsituation where correcting spelling errors leads to an inability to compile.2\nIt is not suf\ufb01cient to add number series or noise words, even though the compiler is\nsatis\ufb01ed. If names must be different, then they should also mean something different.\n2. Consider, for example, the truly hideous practice of creating a variable named klass just because the name class was used \nfor something else.", "21Use Pronounceable Names\nNumber-series naming (a1, a2, .. aN) is the opposite of intentional naming. Such\nnames are not disinformative\u2014they are noninformative; they provide no clue to the\nauthor\u2019 s intention. Consider:\n  public static void copyChars(char a1[], char a2[]) {\n    for (int i = 0; i < a1.length; i++) {      a2[i] = a1[i]; \n    }\n  }\nThis function reads much better when source and destination are used for the argument\nnames.\nNoise words are another meaningless distinction. Imagine that you have a Product\nclass. If you have another called ProductInfoor ProductData, you have made the names dif-\nferent without making them mean anything different. Info and Data are indistinct noise\nwords like a, an, and the.\nNote that there is nothing wrong with using pre\ufb01x conventions like a and the so long\nas they make a meaningful distinction. For example you might use a for all local variables\nand the for all function arguments.3 The problem comes in when you decide to call a vari-\nable theZork because you already have another variable named zork.\nNoise words are redundant. The word variable should never appear in a variable\nname. The word table should never appear in a table name. How is NameString better than\nName? Would a Name ever be a \ufb02oating point number? If so, it breaks an earlier rule about\ndisinformation. Imagine \ufb01nding one class named Customer and another named\nCustomerObject. What should you understand as the distinction? Which one will represent\nthe best path to a customer\u2019 s payment history?\nThere is an application we know of where this is illustrated. we\u2019ve changed the names\nto protect the guilty, but here\u2019 s the exact form of the error:\ngetActiveAccount();\ngetActiveAccounts();getActiveAccountInfo();\nHow are the programmers in this project supposed to know which of these functions to call?\nIn the absence of speci\ufb01c conventions, the variable moneyAmount is indistinguishable\nfrom money, customerInfo is indistinguishable from customer, accountData is indistinguish-\nable from account, and theMessage is indistinguishable from message. Distinguish names in\nsuch a way that the reader knows what the differences offer.\nUse Pronounceable Names\nHumans are good at words. A signi\ufb01cant part of our brains is dedicated to the concept of\nwords. And words are, by de\ufb01nition, pronounceable. It would be a shame not to take\n3. Uncle Bob used to do this in C++ but has given up the practice because modern IDEs make it unnecessary.", "22 Chapter 2: Meaningful Names\nadvantage of that huge portion of our brains that has evolved to deal with spoken lan-\nguage. So make your names pronounceable.\nIf you can\u2019t pronounce it, you can\u2019t discuss it without sounding like an idiot. \u201cWell,\nover here on the bee cee arr three cee enn tee we have a pee ess zee kyew int, see?\u201d This\nmatters because programming is a social activity.\nA company I know has genymdhms (generation date, year, month, day, hour, minute,\nand second) so they walked around saying \u201cgen why emm dee aich emm ess\u201d. I have an\nannoying habit of pronouncing everything as written, so I started saying \u201cgen-yah-mudda-\nhims.\u201d It later was being called this by a host of designers and analysts, and we still\nsounded silly. But we were in on the joke, so it was fun. Fun or not, we were tolerating\npoor naming. New developers had to have the variables explained to them, and then they\nspoke about it in silly made-up words instead of using proper English terms. Compare\nclass DtaRcrd102 {\nprivate Date genymdhms; private Date modymdhms;\nprivate final String pszqint = \"102\";\n/* ... */\n};\nto\nclass Customer {\nprivate Date generationTimestamp; private Date modificationTimestamp;;\nprivate final String recordId = \"102\";\n/* ... */\n};\nIntelligent conversation is now possible: \u201cHey, Mikey, take a look at this record! The gen-\neration timestamp is set to tomorrow\u2019 s date! How can that be?\u201d\nUse Searchable Names\nSingle-letter names and numeric constants have a particular problem in that they are not\neasy to locate across a body of text.\nOne might easily grep for MAX_CLASSES_PER_STUDENT, but the number 7 could be more\ntroublesome. Searches may turn up the digit as part of \ufb01le names, other constant de\ufb01ni-\ntions, and in various expressions where the value is used with different intent. It is even\nworse when a constant is a long number and someone might have transposed digits,\nthereby creating a bug while simultaneously evading the programmer\u2019 s search.\nLikewise, the name e is a poor choice for any variable for which a programmer might\nneed to search. It is the most common letter in the English language and likely to show up\nin every passage of text in every program. In this regard, longer names trump shorter\nnames, and any searchable name trumps a constant in code.\nMy personal preference is that single-letter names can ONL Y be used as local vari-\nables inside short methods. The length of a name should correspond to the size of its scope", "23Avoid Encodings\n[N5]. If a variable or constant might be seen or used in multiple places in a body of code,\nit is imperative to give it a search-friendly name. Once again compare\nfor (int j=0; j<34; j++) {\ns += (t[j]*4)/5;\n}\nto\nint realDaysPerIdealDay = 4;const int WORK_DAYS_PER_WEEK = 5;int sum = 0;\nfor (int j=0; j < NUMBER_OF_TASKS; j++) {\nint realTaskDays = taskEstimate[j] * realDaysPerIdealDay;int realTaskWeeks = (realdays / WORK_DAYS_PER_WEEK);sum += realTaskWeeks;\n}\nNote that sum, above, is not a particularly useful name but at least is searchable. The\nintentionally named code makes for a longer function, but consider how much easier it\nwill be to \ufb01nd WORK_DAYS_PER_WEEK than to \ufb01nd all the places where 5 was used and \ufb01lter\nthe list down to just the instances with the intended meaning.\nAvoid Encodings\nWe have enough encodings to deal with without adding more to our burden. Encoding\ntype or scope information into names simply adds an extra burden of deciphering. It\nhardly seems reasonable to require each new employee to learn yet another encoding \u201clan-\nguage\u201d in addition to learning the (usually considerable) body of code that they\u2019ll be work-\ning in. It is an unnecessary mental burden when trying to solve a problem. Encoded names\nare seldom pronounceable and are easy to mis-type.\nHungarian Notation\nIn days of old, when we worked in name-length-challenged languages, we violated this\nrule out of necessity, and with regret. Fortran forced encodings by making the \ufb01rst letter a\ncode for the type. Early versions of BASIC allowed only a letter plus one digit. Hungarian\nNotation (HN) took this to a whole new level.\nHN was considered to be pretty important back in the Windows C API, when every-\nthing was an integer handle or a long pointer or a void pointer, or one of several implemen-\ntations of \u201cstring\u201d (with different uses and attributes). The compiler did not check types in\nthose days, so the programmers needed a crutch to help them remember the types. \nIn modern languages we have much richer type systems, and the compilers remember\nand enforce the types. What\u2019 s more, there is a trend toward smaller classes and shorter\nfunctions so that people can usually see the point of declaration of each variable they\u2019re\nusing.", "24 Chapter 2: Meaningful Names\nJava programmers don\u2019t need type encoding. Objects are strongly typed, and editing\nenvironments have advanced such that they detect a type error long before you can run a\ncompile! So nowadays HN and other forms of type encoding are simply impediments.\nThey make it harder to change the name or type of a variable, function, or class. They\nmake it harder to read the code. And they create the possibility that the encoding system\nwill mislead the reader.\nPhoneNumber phoneString; \n// name not changed when type changed!\nMember Pre\ufb01xes\nY ou also don\u2019t need to pre\ufb01x member variables with m_ anymore. Y our classes and func-\ntions should be small enough that you don\u2019t need them. And you should be using an edit-\ning environment that highlights or colorizes members to make them distinct.\npublic class Part { \nprivate String m_dsc; // The textual descriptionvoid setName(String name) {\nm_dsc = name;\n}\n}_________________________________________________\npublic class Part { \nString description;void setDescription(String description) { \nthis.description = description;\n}\n}\nBesides, people quickly learn to ignore the pre\ufb01x (or suf\ufb01x) to see the meaningful\npart of the name. The more we read the code, the less we see the pre\ufb01xes. Eventually the\npre\ufb01xes become unseen clutter and a marker of older code.\nInterfaces and Implementations\nThese are sometimes a special case for encodings. For example, say you are building an\nABSTRACT FACTORY for the creation of shapes. This factory will be an interface and will\nbe implemented by a concrete class. What should you name them? IShapeFactory and\nShapeFactory? I prefer to leave interfaces unadorned. The preceding I, so common in\ntoday\u2019 s legacy wads, is a distraction at best and too much information at worst. I don\u2019t\nwant my users knowing that I\u2019m handing them an interface. I just want them to know that\nit\u2019 s a ShapeFactory. So if I must encode either the interface or the implementation, I choose\nthe implementation. Calling it ShapeFactoryImp, or even the hideous CShapeFactory, is pref-\nerable to encoding the interface.", "25Method Names\nAvoid Mental Mapping\nReaders shouldn\u2019t have to mentally translate your names into other names they already\nknow. This problem generally arises from a choice to use neither problem domain terms\nnor solution domain terms.\nThis is a problem with single-letter variable names. Certainly a loop counter may be\nnamed i or j or k (though never l!) if its scope is very small and no other names can con-\n\ufb02ict with it. This is because those single-letter names for loop counters are traditional.\nHowever, in most other contexts a single-letter name is a poor choice; it\u2019 s just a place\nholder that the reader must mentally map to the actual concept. There can be no worse rea-\nson for using the name c than because a and b were already taken.\nIn general programmers are pretty smart people. Smart people sometimes like to show\noff their smarts by demonstrating their mental juggling abilities. After all, if you can reli-\nably remember that r is the lower-cased version of the url with the host and scheme\nremoved, then you must clearly be very smart.\nOne difference between a smart programmer and a professional programmer is that\nthe professional understands that clarity is king . Professionals use their powers for good\nand write code that others can understand. \nClass Names\nClasses and objects should have noun or noun phrase names like Customer, WikiPage,\nAccount, and AddressParser. Avoid words like Manager, Processor, Data, or Info in the name\nof a class. A class name should not be a verb.\nMethod Names\nMethods should have verb or verb phrase names like postPayment, deletePage, or save.\nAccessors, mutators, and predicates should be named for their value and pre\ufb01xed with get,\nset, and is according to the javabean standard.4\nstring name = employee.getName();\ncustomer.setName(\"mike\");if (paycheck.isPosted())...\nWhen constructors are overloaded, use static factory methods with names that\ndescribe the arguments. For example,\nComplex fulcrumPoint = Complex.FromRealNumber(23.0);\nis generally better than\nComplex fulcrumPoint = new Complex(23.0);\nConsider enforcing their use by making the corresponding constructors private.\n4. http://java.sun.com/products/javabeans/docs/spec.html", "26 Chapter 2: Meaningful Names\nDon\u2019t Be Cute\nIf names are too clever, they will be\nmemorable only to people who share the\nauthor\u2019 s sense of humor, and only as long\nas these people remember the joke. Will\nthey know what the function named\nHolyHandGrenade is supposed to do? Sure,\nit\u2019 s cute, but maybe in this case\nDeleteItems might be a better name.\nChoose clarity over entertainment value.\nCuteness in code often appears in the form of colloquialisms or slang. For example,\ndon\u2019t use the name whack() to mean kill(). Don\u2019t tell little culture-dependent jokes like\neatMyShorts() to mean abort().\nSay what you mean. Mean what you say.\nPick One Word per Concept\nPick one word for one abstract concept and stick with it. For instance, it\u2019 s confusing to\nhave fetch, retrieve, and get as equivalent methods of different classes. How do you\nremember which method name goes with which class? Sadly, you often have to remember\nwhich company, group, or individual wrote the library or class in order to remember which\nterm was used. Otherwise, you spend an awful lot of time browsing through headers and\nprevious code samples.\nModern editing environments like Eclipse and IntelliJ-provide context-sensitive clues,\nsuch as the list of methods you can call on a given object. But note that the list doesn\u2019t usu-\nally give you the comments you wrote around your function names and parameter lists.\nY ou are lucky if it gives the parameter names from function declarations. The function\nnames have to stand alone, and they have to be consistent in order for you to pick the cor-\nrect method without any additional exploration.\nLikewise, it\u2019 s confusing to have a controller and a manager and a driver in the same\ncode base. What is the essential difference between a DeviceManager and a Protocol-\nController? Why are both not controllers or both not managers? Are they both Drivers\nreally? The name leads you to expect two objects that have very different type as well as\nhaving different classes.\nA consistent lexicon is a great boon to the programmers who must use your code. \nDon\u2019t Pun\nAvoid using the same word for two purposes. Using the same term for two different ideas\nis essentially a pun.", "27Add Meaningful Context\nIf you follow the \u201cone word per concept\u201d rule, you could end up with many classes\nthat have, for example, an add method. As long as the parameter lists and return values of\nthe various add methods are semantically equivalent, all is well.\nHowever one might decide to use the word add for \u201cconsistency\u201d when he or she is not\nin fact adding in the same sense. Let\u2019 s say we have many classes where add will create a\nnew value by adding or concatenating two existing values. Now let\u2019 s say we are writing a\nnew class that has a method that puts its single parameter into a collection. Should we call\nthis method add? It might seem consistent because we have so many other add methods,\nbut in this case, the semantics are different, so we should use a name like insert or append\ninstead. To call the new method add would be a pun.\nOur goal, as authors, is to make our code as easy as possible to understand. We want\nour code to be a quick skim, not an intense study. We want to use the popular paperback\nmodel whereby the author is responsible for making himself clear and not the academic\nmodel where it is the scholar\u2019 s job to dig the meaning out of the paper.\nUse Solution Domain Names\nRemember that the people who read your code will be programmers. So go ahead and use\ncomputer science (CS) terms, algorithm names, pattern names, math terms, and so forth. It\nis not wise to draw every name from the problem domain because we don\u2019t want our\ncoworkers to have to run back and forth to the customer asking what every name means\nwhen they already know the concept by a different name.\nThe name AccountVisitor means a great deal to a programmer who is familiar with\nthe VISITOR pattern. What programmer would not know what a JobQueue was? There are\nlots of very technical things that programmers have to do. Choosing technical names for\nthose things is usually the most appropriate course.\nUse Problem Domain Names\nWhen there is no \u201cprogrammer-eese\u201d for what you\u2019re doing, use the name from the prob-\nlem domain. At least the programmer who maintains your code can ask a domain expert\nwhat it means.\nSeparating solution and problem domain concepts is part of the job of a good pro-\ngrammer and designer. The code that has more to do with problem domain concepts\nshould have names drawn from the problem domain.\nAdd Meaningful Context\nThere are a few names which are meaningful in and of themselves\u2014most are not. Instead,\nyou need to place names in context for your reader by enclosing them in well-named\nclasses, functions, or namespaces. When all else fails, then pre\ufb01xing the name may be nec-\nessary as a last resort.", "28 Chapter 2: Meaningful Names\nImagine that you have variables named firstName, lastName, street, houseNumber, city,\nstate, and zipcode. Taken together it\u2019 s pretty clear that they form an address. But what if\nyou just saw the state variable being used alone in a method? Would you automatically\ninfer that it was part of an address?\nY ou can add context by using pre\ufb01xes: addrFirstName, addrLastName, addrState, and so\non. At least readers will understand that these variables are part of a larger structure. Of\ncourse, a better solution is to create a class named Address. Then, even the compiler knows\nthat the variables belong to a bigger concept.\nConsider the method in Listing 2-1. Do the variables need a more meaningful con-\ntext? The function name provides only part of the context; the algorithm provides the rest.\nOnce you read through the function, you see that the three variables, number, verb, and\npluralModifier, are part of the \u201cguess statistics\u201d message. Unfortunately, the context must\nbe inferred. When you \ufb01rst look at the method, the meanings of the variables are opaque.\nThe function is a bit too long and the variables are used throughout. To split the func-\ntion into smaller pieces we need to create a GuessStatisticsMessage class and make the\nthree variables \ufb01elds of this class. This provides a clear context for the three variables. They\narede\ufb01nitively part of the GuessStatisticsMessage. The improvement of context also allows\nthe algorithm to be made much cleaner by breaking it into man y smaller functions. (See\nListing 2-2.) \nListing 2-1 \nVariables with unclear context.\nprivate void printGuessStatistics(char candidate, int count) {\n    String number;    String verb;\n    String pluralModifier;\n    if (count == 0) {      number = \"no\";      verb = \"are\";      pluralModifier = \"s\";\n    } else if (count == 1) {\n      number = \"1\";      verb = \"is\";      pluralModifier = \"\";\n    } else {\n      number = Integer.toString(count);      verb = \"are\";      pluralModifier = \"s\";    }\n    String guessMessage = String.format(\n      \"There %s %s %s%s\", verb, number, candidate, pluralModifier    );    print(guessMessage);  }", "29Don\u2019t Add Gratuitous Context\nDon\u2019t Add Gratuitous Context\nIn an imaginary application called \u201cGas Station Deluxe,\u201d it is a bad idea to pre\ufb01x every\nclass with GSD. Frankly, you are working against your tools. Y ou type G and press the com-\npletion key and are rewarded with a mile-long list of every class in the system. Is that\nwise? Why make it hard for the IDE to help you? \nLikewise, say you invented a MailingAddress class in GSD\u2019 s accounting module, and\nyou named it GSDAccountAddress. Later, you need a mailing address for your customer con-\ntact application. Do you use GSDAccountAddress? Does it sound like the right name? Ten of\n17 characters are redundant or irrelevant.\nListing 2-2 \nVariables have a context.\npublic class GuessStatisticsMessage {\n  private String number;  private String verb;\n  private String pluralModifier;\n  public String make(char candidate, int count) {\n    createPluralDependentMessageParts(count);    return String.format(\n      \"There %s %s %s%s\", \n       verb, number, candidate, pluralModifier );  }\n  private void createPluralDependentMessageParts(int count) {\n    if (count == 0) {\n      thereAreNoLetters();    } else if (count == 1) {      thereIsOneLetter();    } else {\n      thereAreManyLetters(count);\n    }  }\n  private void thereAreManyLetters(int count) {\n    number = Integer.toString(count);\n    verb = \"are\";    pluralModifier = \"s\";  }\n  private void thereIsOneLetter() {\n    number = \"1\";    verb = \"is\";    pluralModifier = \"\";\n  }\n  private void thereAreNoLetters() {\n    number = \"no\";    verb = \"are\";\n    pluralModifier = \"s\";\n  }}", "30 Chapter 2: Meaningful Names\nShorter names are generally better than longer ones, so long as they are clear. Add no\nmore context to a name than is necessary.\nThe names accountAddress and customerAddress are \ufb01ne names for instances of the\nclass Address but could be poor names for classes. Address is a \ufb01ne name for a class. If I\nneed to differentiate between MAC addresses, port addresses, and Web addresses, I might\nconsiderPostalAddress, MAC, and URI. The resulting names are more precise, which is the\npoint of all naming.\nFinal Words\nThe hardest thing about choosing good names is that it requires good descriptive skills and\na shared cultural background. This is a teaching issue rather than a technical, business, or\nmanagement issue. As a result many people in this \ufb01eld don\u2019t learn to do it very well.\nPeople are also afraid of renaming things for fear that some other developers will\nobject. We do not share that fear and \ufb01nd that we are actually grateful when names change\n(for the better). Most of the time we don\u2019t really memorize the names of classes and meth-\nods. We use the modern tools to deal with details like that so we can focus on whether the\ncode reads like paragraphs and sentences, or at least like tables and data structure (a sen-\ntence isn\u2019t always the best way to display data). Y ou will probably end up surprising some-\none when you rename, just like you might with any other code improvement. Don\u2019t let it\nstop you in your tracks.\nFollow some of these rules and see whether you don\u2019t improve the readability of your\ncode. If you are maintaining someone else\u2019 s code, use refactoring tools to help resolve these\nproblems. It will pay off in the short term and continue to pay in the long run.", "31\n3\nFunctions\nIn the early days of programming we composed our systems of routines and subroutines.\nThen, in the era of Fortran and PL/1 we composed our systems of programs, subprograms,\nand functions. Nowadays only the function survives from those early days. Functions are\nthe \ufb01rst line of organization in any program. Writing them well is the topic of this chapter.", "32 Chapter 3: Functions\nConsider the code in Listing 3-1. It\u2019 s hard to \ufb01nd a long function in FitNesse, 1 but\nafter a bit of searching I came across this one. Not only is it long, but it\u2019 s got duplicated\ncode, lots of odd strings, and many strange and inobvious data types and APIs. See how\nmuch sense you can make of it in the next three minutes. \n1. An open-source testing tool. www.\ufb01tnese.org\nListing 3-1 \nHtmlUtil.java (FitNesse 20070619)\n  public static String testableHtml(\n    PageData pageData,    boolean includeSuiteSetup\n  ) throws Exception {\n    WikiPage wikiPage = pageData.getWikiPage();    StringBuffer buffer = new StringBuffer();    if (pageData.hasAttribute(\"Test\")) {      if (includeSuiteSetup) {\n        WikiPage suiteSetup =\n          PageCrawlerImpl.getInheritedPage(                  SuiteResponder.SUITE_SETUP_NAME, wikiPage          );        if (suiteSetup != null) {          WikiPagePath pagePath =            suiteSetup.getPageCrawler().getFullPath(suiteSetup);          String pagePathName = PathParser.render(pagePath);          buffer.append(\"!include -setup .\")                .append(pagePathName)\n                .append(\"\\n\");\n        }      }      WikiPage setup = \n        PageCrawlerImpl.getInheritedPage(\"SetUp\", wikiPage);\n      if (setup != null) {        WikiPagePath setupPath =          wikiPage.getPageCrawler().getFullPath(setup);        String setupPathName = PathParser.render(setupPath);\n        buffer.append(\"!include -setup .\")\n              .append(setupPathName)              .append(\"\\n\");      }    }\n    buffer.append(pageData.getContent());\n    if (pageData.hasAttribute(\"Test\")) {      WikiPage teardown =         PageCrawlerImpl.getInheritedPage(\"TearDown\", wikiPage);\n      if (teardown != null) {\n        WikiPagePath tearDownPath =          wikiPage.getPageCrawler().getFullPath(teardown);        String tearDownPathName = PathParser.render(tearDownPath);        buffer.append(\"\\n\")              .append(\"!include -teardown .\")\n              .append(tearDownPathName)\n              .append(\"\\n\");      }", "33Functions\nDo you understand the function after three minutes of study? Probably not. There\u2019 s\ntoo much going on in there at too many different levels of abstraction. There are strange\nstrings and odd function calls mixed in with doubly nested if statements controlled by\n\ufb02ags.\nHowever, with just a few simple method extractions, some renaming, and a little\nrestructuring, I was able to capture the intent of the function in the nine lines of Listing 3-2.\nSee whether you can understand that in the next 3 minutes.\n      if (includeSuiteSetup) {\n        WikiPage suiteTeardown =          PageCrawlerImpl.getInheritedPage(\n                  SuiteResponder.SUITE_TEARDOWN_NAME,\n                  wikiPage          );        if (suiteTeardown != null) {          WikiPagePath pagePath =            suiteTeardown.getPageCrawler().getFullPath (suiteTeardown);\n          String pagePathName = PathParser.render(pagePath);\n          buffer.append(\"!include -teardown .\")                .append(pagePathName)                .append(\"\\n\");        }\n      }\n    }    pageData.setContent(buffer.toString());    return pageData.getHtml();  }\nListing 3-2 \nHtmlUtil.java (refactored)\n  public static String renderPageWithSetupsAndTeardowns(\n    PageData pageData, boolean isSuite  ) throws Exception {\n    boolean isTestPage = pageData.hasAttribute(\"Test\");\n    if (isTestPage) {      WikiPage testPage = pageData.getWikiPage();      StringBuffer newPageContent = new StringBuffer();      includeSetupPages(testPage, newPageContent, isSuite);\n      newPageContent.append(pageData.getContent());\n      includeTeardownPages(testPage, newPageContent, isSuite);      pageData.setContent(newPageContent.toString());    }\n    return pageData.getHtml();\n  }\nListing 3-1 (continued)\nHtmlUtil.java (FitNesse 20070619)", "34 Chapter 3: Functions\nUnless you are a student of FitNesse, you probably don\u2019t understand all the details.\nStill, you probably understand that this function performs the inclusion of some setup and\nteardown pages into a test page and then renders that page into HTML. If you are familiar\nwith JUnit,2 you probably realize that this function belongs to some kind of Web-based\ntesting framework. And, of course, that is correct. Divining that information from Listing 3-2\nis pretty easy, but it\u2019 s pretty well obscured by Listing 3-1. \nSo what is it that makes a function like Listing 3-2 easy to read and understand? How\ncan we make a function communicate its intent? What attributes can we give our functions\nthat will allow a casual reader to intuit the kind of program they live inside?\nSmall!\nThe \ufb01rst rule of functions is that they should be small. The second rule of functions is that\nthey should be smaller than that. This is not an assertion that I can justify. I can\u2019t provide\nany references to research that shows that very small functions are better. What I can tell\nyou is that for nearly four decades I have written functions of all different sizes. I\u2019ve writ-\nten several nasty 3,000-line abominations. I\u2019ve written scads of functions in the 100 to 300\nline range. And I\u2019ve written functions that were 20 to 30 lines long. What this experience\nhas taught me, through long trial and error, is that functions should be very small.\nIn the eighties we used to say that a function should be no bigger than a screen-full.\nOf course we said that at a time when VT100 screens were 24 lines by 80 columns, and\nour editors used 4 lines for administrative purposes. Nowadays with a cranked-down font\nand a nice big monitor, you can \ufb01t 150 characters on a line and a 100 lines or more on a\nscreen. Lines should not be 150 characters long. Functions should not be 100 lines long.\nFunctions should hardly ever be 20 lines long. \nHow short should a function be? In 1999 I went to visit Kent Beck at his home in Ore-\ngon. We sat down and did some programming together. At one point he showed me a cute\nlittle Java/Swing program that he called Sparkle. It produced a visual effect on the screen\nvery similar to the magic wand of the fairy godmother in the movie Cinderella. As you\nmoved the mouse, the sparkles would drip from the cursor with a satisfying scintillation,\nfalling to the bottom of the window through a simulated gravitational \ufb01eld. When Kent\nshowed me the code, I was struck by how small all the functions were. I was used to func-\ntions in Swing programs that took up miles of vertical space. Every function in this pro-\ngram was just two, or three, or four lines long. Each was transparently obvious. Each told\na story. And each led you to the next in a compelling order. That\u2019 show short your functions\nshould be!3\n2. An open-source unit-testing tool for Java. www.junit.org\n3. I asked Kent whether he still had a copy, but he was unable to \ufb01nd one. I searched all my old computers too, but to no avail.\nAll that is left now is my memory of that program.", "35Do One Thing\nHow short should your functions be? They should usually be shorter than Listing 3-2!\nIndeed, Listing 3-2 should really be shortened to Listing 3-3.\nBlocks and Indenting\nThis implies that the blocks within if statements, else statements, while statements, and\nso on should be one line long. Probably that line should be a function call. Not only does\nthis keep the enclosing function small, but it also adds documentary value because the\nfunction called within the block can have a nicely descriptive name.\nThis also implies that functions should not be large enough to hold nested structures.\nTherefore, the indent level of a function should not be greater than one or two. This, of\ncourse, makes the functions easier to read and understand.\nDo One Thing\nIt should be very clear that Listing 3-1 is doing lots\nmore than one thing. It\u2019 s creating buffers, fetching\npages, searching for inherited pages, rendering paths,\nappending arcane strings, and generating HTML,\namong other things. Listing 3-1 is very busy doing\nlots of different things. On the other hand, Listing 3-3\nis doing one simple thing. It\u2019 s including setups and\nteardowns into test pages. \nThe following advice has appeared in one form\nor another for 30 years or more.\nFUNCTIONS SHOULD DO ONE THING . THEY SHOULD DO IT WELL .\nTHEY SHOULD DO IT ONLY .\nThe problem with this statement is that it is hard to know what \u201cone thing\u201d is. Does\nListing 3-3 do one thing? It\u2019 s easy to make the case that it\u2019 s doing three things: \n1. Determining whether the page is a test page. \n2. If so, including setups and teardowns. \n3. Rendering the page in HTML.\nListing 3-3 \nHtmlUtil.java (re-refactored)\n  public static String renderPageWithSetupsAndTeardowns(\n    PageData pageData, boolean isSuite) throws Exception {    if (isTestPage(pageData))\n      includeSetupAndTeardownPages(pageData, isSuite);\n    return pageData.getHtml();  }", "36 Chapter 3: Functions\nSo which is it? Is the function doing one thing or three things? Notice that the three\nsteps of the function are one level of abstraction below the stated name of the function. We\ncan describe the function by describing it as a brief TO4 paragraph:\nTO RenderPageWithSetupsAndTeardowns, we check to see whether the page is a test page\nand if so, we include the setups and teardowns. In either case we render the page in\nHTML.\nIf a function does only those steps that are one level below the stated name of the\nfunction, then the function is doing one thing. After all, the reason we write functions is to\ndecompose a larger concept (in other words, the name of the function) into a set of steps at\nthe next level of abstraction.\nIt should be very clear that Listing 3-1 contains steps at many different levels of\nabstraction. So it is clearly doing more than one thing. Even Listing 3-2 has two levels of\nabstraction, as proved by our ability to shrink it down. But it would be very hard to mean-\ningfully shrink Listing 3-3. We could extract the if statement into a function named\nincludeSetupsAndTeardownsIfTestPage, but that simply restates the code without changing\nthe level of abstraction.\nSo, another way to know that a function is doing more than \u201cone thing\u201d is if you can\nextract another function from it with a name that is not merely a restatement of its imple-\nmentation [G34].\nSections within Functions\nLook at Listing 4-7 on page 71. Notice that the generatePrimes function is divided into\nsections such as declarations, initializations, and sieve. This is an obvious symptom of\ndoing more than one thing. Functions that do one thing cannot be reasonably divided into\nsections.\nOne Level of Abstraction per Function\nIn order to make sure our functions are doing \u201cone thing,\u201d we need to make sure that the\nstatements within our function are all at the same level of abstraction. It is easy to see how\nListing 3-1 violates this rule. There are concepts in there that are at a very high level of\nabstraction, such as getHtml(); others that are at an intermediate level of abstraction, such\nas: String pagePathName = PathParser.render(pagePath); and still others that are remark-\nably low level, such as: .append(\"\\n\").\nMixing levels of abstraction within a function is always confusing. Readers may not\nbe able to tell whether a particular expression is an essential concept or a detail. Worse,\n4. The LOGO language used the keyword \u201cTO\u201d in the same way that Ruby and Python use \u201cdef.\u201d So every function began with \nthe word \u201cTO.\u201d This had an interesting effect on the way functions were designed.", "37Switch Statements\nlike broken windows, once details are mixed with essential concepts, more and more\ndetails tend to accrete within the function.\nReading Code from Top to Bottom: The Stepdown Rule\nWe want the code to read like a top-down narrative. 5 We want every function to be fol-\nlowed by those at the next level of abstraction so that we can read the program, descending\none level of abstraction at a time as we read down the list of functions. I call this The Step-\ndown Rule.\nTo say this differently, we want to be able to read the program as though it were a set\nof TO paragraphs, each of which is describing the current level of abstraction and refer-\nencing subsequent TO paragraphs at the next level down. \nTo include the setups and teardowns, we include setups, then we include the test page con-\ntent, and then we include the teardowns.\nTo include the setups, we include the suite setup if this is a suite, then we include the\nregular setup.\nTo include the suite setup, we search the parent hierarchy for the \u201cSuiteSetUp\u201d page\nand add an include statement with the path of that page.\nTo search the parent. . .\nIt turns out to be very dif\ufb01cult for programmers to learn to follow this rule and write\nfunctions that stay at a single level of abstraction. But learning this trick is also very\nimportant. It is the key to keeping functions short and making sure they do \u201cone thing.\u201d\nMaking the code read like a top-down set of TO paragraphs is an effective technique for\nkeeping the abstraction level consistent.\nTake a look at Listing 3-7 at the end of this chapter. It shows the whole\ntestableHtml function refactored according to the principles described here. Notice\nhow each function introduces the next, and each function remains at a consistent level\nof abstraction.\nSwitch Statements\nIt\u2019 s hard to make a small switch statement.6 Even a switch statement with only two cases is\nlarger than I\u2019 d like a single block or function to be. It\u2019 s also hard to make a switch state-\nment that does one thing. By their nature, switch statements always do N things. Unfortu-\nnately we can\u2019t always avoid switch statements, but we can make sure that each switch\nstatement is buried in a low-level class and is never repeated. We do this, of course, with\npolymorphism.\n5. [KP78], p. 37.\n6. And, of course, I include if/else chains in this.", "38 Chapter 3: Functions\nConsider Listing 3-4. It shows just one of the operations that might depend on the\ntype of employee. \nThere are several problems with this function. First, it\u2019 s large, and when new\nemployee types are added, it will grow. Second, it very clearly does more than one thing.\nThird, it violates the Single Responsibility Principle7 (SRP) because there is more than one\nreason for it to change. Fourth, it violates the Open Closed Principle 8 (OCP) because it\nmust change whenever new types are added. But possibly the worst problem with this\nfunction is that there are an unlimited number of other functions that will have the same\nstructure. For example we could have\nisPayday(Employee e, Date date), \nor\ndeliverPay(Employee e, Money pay), \nor a host of others. All of which would have the same deleterious structure.\nThe solution to this problem (see Listing 3-5) is to bury the switch statement in the\nbasement of an ABSTRACT FACTORY,9 and never let anyone see it. The factory will use the\nswitch statement to create appropriate instances of the derivatives of Employee, and the var-\nious functions, such as calculatePay, isPayday, and deliverPay, will be dispatched poly-\nmorphically through the Employee interface.\nMy general rule for switch statements is that they can be tolerated if they appear\nonly once, are used to create polymorphic objects, and are hidden behind an inheritance\nListing 3-4 \nPayroll.java\npublic Money calculatePay(Employee e) \nthrows InvalidEmployeeType {    switch (e.type) {\n      case COMMISSIONED:\n        return calculateCommissionedPay(e);      case HOURLY:        return calculateHourlyPay(e);      case SALARIED:        return calculateSalariedPay(e);\n      default:\n        throw new InvalidEmployeeType(e.type);    }  }\n7. a. http://en.wikipedia.org/wiki/Single_responsibility_principle \nb. http://www.objectmentor.com/resources/articles/srp.pdf\n8. a. http://en.wikipedia.org/wiki/Open/closed_principle\nb. http://www.objectmentor.com/resources/articles/ocp.pdf\n9. [GOF].", "39Use Descriptive Names\nrelationship so that the rest of the system can\u2019t see them [G23]. Of course every circum-\nstance is unique, and there are times when I violate one or more parts of that rule.\nUse Descriptive Names\nIn Listing 3-7 I changed the name of our example function from testableHtml to\nSetupTeardownIncluder.render . This is a far better name because it better describes what\nthe function does. I also gave each of the private methods an equally descriptive name\nsuch as isTestable or includeSetupAndTeardownPages . It is hard to overestimate the value\nof good names. Remember Ward\u2019 s principle: \u201c You know you are working on clean code\nwhen each routine turns out to be pretty much what you expected. \u201d Half the battle to\nachieving that principle is choosing good names for small functions that do one thing.\nThe smaller and more focused a function is, the easier it is to choose a descriptive\nname.\nDon\u2019t be afraid to make a name long. A long descriptive name is better than a short\nenigmatic name. A long descriptive name is better than a long descriptive comment. Use\na naming convention that allows multiple words to be easily read in the function names,\nand then make use of those multiple words to give the function a name that says what\nit does.\nListing 3-5 \nEmployee and Factory\npublic abstract class Employee {\n  public abstract boolean isPayday();  public abstract Money calculatePay();\n  public abstract void deliverPay(Money pay);\n}-----------------public interface EmployeeFactory {  public Employee makeEmployee(EmployeeRecord r) throws InvalidEmployeeType;}\n-----------------\npublic class EmployeeFactoryImpl implements EmployeeFactory {  public Employee makeEmployee(EmployeeRecord r) throws InvalidEmployeeType {    switch (r.type) {      case COMMISSIONED:\n        return new CommissionedEmployee(r) ;\n      case HOURLY:        return new HourlyEmployee(r);      case SALARIED:        return new SalariedEmploye(r);\n      default:\n        throw new InvalidEmployeeType(r.type);    }  }\n}", "40 Chapter 3: Functions\nDon\u2019t be afraid to spend time choosing a name. Indeed, you should try several differ-\nent names and read the code with each in place. Modern IDEs like Eclipse or IntelliJ make\nit trivial to change names. Use one of those IDEs and experiment with different names\nuntil you \ufb01nd one that is as descriptive as you can make it. \nChoosing descriptive names will clarify the design of the module in your mind and\nhelp you to improve it. It is not at all uncommon that hunting for a good name results in a\nfavorable restructuring of the code. \nBe consistent in your names. Use the same phrases, nouns, and verbs in the function\nnames you choose for your modules. Consider, for example, the names includeSetup-\nAndTeardownPages, includeSetupPages, includeSuiteSetupPage, and includeSetupPage. The\nsimilar phraseology in those names allows the sequence to tell a story. Indeed, if I\nshowed you just the sequence above, you\u2019 d ask yourself: \u201cWhat happened to\nincludeTeardownPages, includeSuiteTeardownPage, and includeTeardownPage?\u201d How\u2019 s that\nfor being \u201c. . . pretty much what you expected .\u201d\nFunction Arguments\nThe ideal number of arguments for a function is\nzero (niladic). Next comes one (monadic), followed\nclosely by two (dyadic). Three arguments (triadic)\nshould be avoided where possible. More than three\n(polyadic) requires very special justi\ufb01cation\u2014and\nthen shouldn\u2019t be used anyway.\nArguments are hard. They take a lot of con-\nceptual power. That\u2019 s why I got rid of almost all of\nthem from the example. Consider, for instance, the\nStringBuffer in the example. We could have\npassed it around as an argument rather than mak-\ning it an instance variable, but then our readers\nwould have had to interpret it each time they saw\nit. When you are reading the story told by the\nmodule,includeSetupPage() is easier to understand than includeSetupPageInto(newPage-\nContent). The argument is at a different level of abstraction than the function name and\nforces you to know a detail (in other words, StringBuffer) that isn\u2019t particularly important\nat that point. \nArguments are even harder from a testing point of view. Imagine the dif\ufb01culty of\nwriting all the test cases to ensure that all the various combinations of arguments work\nproperly. If there are no arguments, this is trivial. If there\u2019 s one argument, it\u2019 s not too hard.\nWith two arguments the problem gets a bit more challenging. With more than two argu-\nments, testing every combination of appropriate values can be daunting.", "41Function Arguments\nOutput arguments are harder to understand than input arguments. When we read a\nfunction, we are used to the idea of information going in to the function through arguments\nand out through the return value. We don\u2019t usually expect information to be going out\nthrough the arguments. So output arguments often cause us to do a double-take. \nOne input argument is the next best thing to no arguments. SetupTeardown-\nIncluder.render(pageData)is pretty easy to understand. Clearly we are going to render the\ndata in the pageData object. \nCommon Monadic Forms\nThere are two very common reasons to pass a single argument into a function. Y ou may be\nasking a question about that argument, as in boolean fileExists(\u201cMyFile\u201d). Or you may be\noperating on that argument, transforming it into something else and returning it . For\nexample, InputStream fileOpen(\u201cMyFile\u201d) transforms a \ufb01le name String into an\nInputStream return value. These two uses are what readers expect when they see a func-\ntion. Y ou should choose names that make the distinction clear, and always use the two\nforms in a consistent context. (See Command Query Separation below.) \nA somewhat less common, but still very useful form for a single argument function,\nis an event. In this form there is an input argument but no output argument. The overall\nprogram is meant to interpret the function call as an event and use the argument to alter the\nstate of the system, for example, void passwordAttemptFailedNtimes(int attempts) . Use\nthis form with care. It should be very clear to the reader that this is an event. Choose\nnames and contexts carefully.\nTry to avoid any monadic functions that don\u2019t follow these forms, for example, void\nincludeSetupPageInto(StringBuffer pageText). Using an output argument instead of a\nreturn value for a transformation is confusing. If a function is going to transform its input\nargument, the transformation should appear as the return value. Indeed, StringBuffer\ntransform(StringBuffer in) is better than void transform-(StringBuffer out), even if the\nimplementation in the \ufb01rst case simply returns the input argument. At least it still follows\nthe form of a transformation. \nFlag Arguments\nFlag arguments are ugly. Passing a boolean into a function is a truly terrible practice. It\nimmediately complicates the signature of the method, loudly proclaiming that this function\ndoes more than one thing. It does one thing if the \ufb02ag is true and another if the \ufb02ag is false!\nIn Listing 3-7 we had no choice because the callers were already passing that \ufb02ag\nin, and I wanted to limit the scope of refactoring to the function and below. Still, the\nmethod call render(true) is just plain confusing to a poor reader. Mousing over the call\nand seeing render(boolean isSuite) helps a little, but not that much. We should have\nsplit the function into two: renderForSuite() and renderForSingleTest().", "42 Chapter 3: Functions\nDyadic Functions\nA function with two arguments is harder to understand than a monadic function. For exam-\nple, writeField(name) is easier to understand than writeField(output-Stream, name).10\nThough the meaning of both is clear, the \ufb01rst glides past the eye, easily depositing its\nmeaning. The second requires a short pause until we learn to ignore the \ufb01rst parameter.\nAndthat, of course, eventually results in problems because we should never ignore any\npart of code. The parts we ignore are where the bugs will hide.\nThere are times, of course, where two arguments are appropriate. For example,\nPoint p = new Point(0,0); is perfectly reasonable. Cartesian points naturally take two\narguments. Indeed, we\u2019 d be very surprised to see new Point(0). However, the two argu-\nments in this case are ordered components of a single value! Whereas output-Stream and\nname have neither a natural cohesion, nor a natural ordering. \nEven obvious dyadic functions like assertEquals(expected, actual) are problematic.\nHow many times have you put the actual where the expected should be? The two argu-\nments have no natural ordering. The expected, actual ordering is a convention that\nrequires practice to learn.\nDyads aren\u2019t evil, and you will certainly have to write them. However, you should be\naware that they come at a cost and should take advantage of what mechanims may be\navailable to you to convert them into monads. For example, you might make the\nwriteField method a member of outputStream so that you can say outputStream.\nwriteField(name). Or you might make the outputStream a member variable of the current\nclass so that you don\u2019t have to pass it. Or you might extract a new class like FieldWriter\nthat takes the outputStream in its constructor and has a write method.\nTriads\nFunctions that take three arguments are signi\ufb01cantly harder to understand than dyads. The\nissues of ordering, pausing, and ignoring are more than doubled. I suggest you think very\ncarefully before creating a triad.\nFor example, consider the common overload of assertEquals that takes three argu-\nments: assertEquals(message, expected, actual). How many times have you read the\nmessage and thought it was the expected? I have stumbled and paused over that particular\ntriad many times. In fact, every time I see it, I do a double-take and then learn to ignore the\nmessage.\nOn the other hand, here is a triad that is not quite so insidious: assertEquals(1.0,\namount, .001). Although this still requires a double-take, it\u2019 s one that\u2019 s worth taking. It\u2019 s\nalways good to be reminded that equality of \ufb02oating point values is a relative thing.\n10. I just \ufb01nished refactoring a module that used the dyadic form. I was able to make the outputStream a \ufb01eld of the class and \nconvert all the writeField calls to the monadic form. The result was much cleaner.", "43Function Arguments\nArgument Objects\nWhen a function seems to need more than two or three arguments, it is likely that some of\nthose arguments ought to be wrapped into a class of their own. Consider, for example, the\ndifference between the two following declarations:\nCircle makeCircle(double x, double y, double radius);\nCircle makeCircle(Point center, double radius);\nReducing the number of arguments by creating objects out of them may seem like\ncheating, but it\u2019 s not. When groups of variables are passed together, the way x and\ny are in the example above, they are likely part of a concept that deserves a name of its\nown.\nArgument Lists\nSometimes we want to pass a variable number of arguments into a function. Consider, for\nexample, the String.format method:\nString.format(\"%s worked %.2f hours.\", name, hours);\nIf the variable arguments are all treated identically, as they are in the example above, then\nthey are equivalent to a single argument of type List. By that reasoning, String.format is\nactually dyadic. Indeed, the declaration of String.format as shown below is clearly\ndyadic.\npublic String format(String format, Object... args)\nSo all the same rules apply. Functions that take variable arguments can be monads,\ndyads, or even triads. But it would be a mistake to give them more arguments than\nthat.\nvoid monad(Integer... args);\nvoid dyad(String name, Integer... args);void triad(String name, int count, Integer... args);\nV erbs and Keywords\nChoosing good names for a function can go a long way toward explaining the intent of\nthe function and the order and intent of the arguments. In the case of a monad, the\nfunction and argument should form a very nice verb/noun pair. For example,\nwrite(name) is very evocative. Whatever this \u201cname\u201d thing is, it is being \u201cwritten.\u201d An\neven better name might be writeField(name), which tells us that the \u201cname\u201d thing is a\n\u201c\ufb01eld.\u201d\nThis last is an example of the keyword form of a function name. Using this form we\nencode the names of the arguments into the function name. For example, assertEquals\nmight be better written as assertExpectedEqualsActual(expected, actual). This strongly\nmitigates the problem of having to remember the ordering of the arguments.", "44 Chapter 3: Functions\nHave No Side Effects\nSide effects are lies. Y our function promises to do one thing, but it also does other hidden\nthings. Sometimes it will make unexpected changes to the variables of its own class.\nSometimes it will make them to the parameters passed into the function or to system glo-\nbals. In either case they are devious and damaging mistruths that often result in strange\ntemporal couplings and order dependencies. \nConsider, for example, the seemingly innocuous function in Listing 3-6. This function\nuses a standard algorithm to match a userName to a password. It returns true if they match\nand false if anything goes wrong. But it also has a side effect. Can you spot it?\nThe side effect is the call to Session.initialize(), of course. The checkPassword func-\ntion, by its name, says that it checks the password. The name does not imply that it initial-\nizes the session. So a caller who believes what the name of the function says runs the risk\nof erasing the existing session data when he or she decides to check the validity of the\nuser.\nThis side effect creates a temporal coupling. That is, checkPassword can only be\ncalled at certain times (in other words, when it is safe to initialize the session). If it is\ncalled out of order, session data may be inadvertently lost. Temporal couplings are con-\nfusing, especially when hidden as a side effect. If you must have a temporal coupling,\nyou should make it clear in the name of the function. In this case we might rename the\nfunctioncheckPasswordAndInitializeSession, though that certainly violates \u201cDo one\nthing.\u201d\nListing 3-6\nUserValidator.java\npublic class UserValidator {\n  private Cryptographer cryptographer;\n  public boolean checkPassword(String userName, String password) {\n    User user = UserGateway.findByName(userName);\n    if (user != User.NULL) {\n      String codedPhrase = user.getPhraseEncodedByPassword();\n      String phrase = cryptographer.decrypt(codedPhrase, password);\n      if (\"Valid Password\".equals(phrase)) {\n        Session.initialize();\n        return true;\n      }\n    }\n    return false;\n  }\n}", "45Command Query Separation\nOutput Arguments\nArguments are most naturally interpreted as inputs to a function. If you have been pro-\ngramming for more than a few years, I\u2019m sure you\u2019ve done a double-take on an argument\nthat was actually an output rather than an input. For example:\nappendFooter(s);\nDoes this function append s as the footer to something? Or does it append some footer\nto s? Is s an input or an output? It doesn\u2019t take long to look at the function signature\nand see:\npublic void appendFooter(StringBuffer report)\nThis clari\ufb01es the issue, but only at the expense of checking the declaration of the function.\nAnything that forces you to check the function signature is equivalent to a double-take. It\u2019 s\na cognitive break and should be avoided.\nIn the days before object oriented programming it was sometimes necessary to have\noutput arguments. However, much of the need for output arguments disappears in OO lan-\nguages because this is intended to act as an output argument. In other words, it would be\nbetter for appendFooter to be invoked as\nreport.appendFooter();\nIn general output arguments should be avoided. If your function must change the state\nof something, have it change the state of its owning object. \nCommand Query Separation\nFunctions should either do something or answer something, but not both. Either your\nfunction should change the state of an object, or it should return some information about\nthat object. Doing both often leads to confusion. Consider, for example, the following\nfunction:\npublic boolean set(String attribute, String value);\nThis function sets the value of a named attribute and returns true if it is successful and\nfalse if no such attribute exists. This leads to odd statements like this:\nif (set(\"username\", \"unclebob\"))...\nImagine this from the point of view of the reader. What does it mean? Is it asking whether\nthe \u201cusername\u201d attribute was previously set to \u201c unclebob\u201d? Or is it asking whether the\n\u201cusername\u201d attribute was successfully set to \u201cunclebob\u201d? It\u2019 s hard to infer the meaning from\nthe call because it\u2019 s not clear whether the word \u201cset\u201d is a verb or an adjective. \nThe author intended set to be a verb, but in the context of the if statement it feels like\nan adjective. So the statement reads as \u201cIf the username attribute was previously set to\nunclebob\u201d and not \u201cset the username attribute to unclebob and if that worked then. . . .\u201d We", "46 Chapter 3: Functions\ncould try to resolve this by renaming the set function to setAndCheckIfExists, but that\ndoesn\u2019t much help the readability of the if statement. The real solution is to separate the\ncommand from the query so that the ambiguity cannot occur.\nif (attributeExists(\"username\")) {\nsetAttribute(\"username\", \"unclebob\");...\n}\nPrefer Exceptions to Returning Error Codes\nReturning error codes from command functions is a subtle violation of command query\nseparation. It promotes commands being used as expressions in the predicates of if state-\nments.\nif (deletePage(page) == E_OK)\nThis does not suffer from verb/adjective confusion but does lead to deeply nested struc-\ntures. When you return an error code, you create the problem that the caller must deal with\nthe error immediately.\nif (deletePage(page) == E_OK) {\nif (registry.deleteReference(page.name) == E_OK) {\nif (configKeys.deleteKey(page.name.makeKey()) == E_OK){\nlogger.log(\"page deleted\");\n} else {\nlogger.log(\"configKey not deleted\");\n}\n} else {\nlogger.log(\"deleteReference from registry failed\");\n}\n} else {\nlogger.log(\"delete failed\");\nreturn E_ERROR;\n}\nOn the other hand, if you use exceptions instead of returned error codes, then the error\nprocessing code can be separated from the happy path code and can be simpli\ufb01ed:\ntry {\ndeletePage(page);registry.deleteReference(page.name);\nconfigKeys.deleteKey(page.name.makeKey());\n}catch (Exception e) {\nlogger.log(e.getMessage());\n}\nExtract Try/Catch Blocks\nTry/catch blocks are ugly in their own right. They confuse the structure of the code and\nmix error processing with normal processing. So it is better to extract the bodies of the try\nand catch blocks out into functions of their own.", "47Prefer Exceptions to Returning Error Codes\n  public void delete(Page page) {\n    try {      deletePageAndAllReferences(page);\n    }\n    catch (Exception e) {      logError(e);    }  }\n  private void deletePageAndAllReferences(Page page) throws Exception {\n    deletePage(page);    registry.deleteReference(page.name);    configKeys.deleteKey(page.name.makeKey());  }\n  private void logError(Exception e) {\n    logger.log(e.getMessage());  }\nIn the above, the delete function is all about error processing. It is easy to understand\nand then ignore. The deletePageAndAllReferences function is all about the processes of\nfully deleting a page. Error handling can be ignored. This provides a nice separation that\nmakes the code easier to understand and modify.\nError Handling Is One Thing\nFunctions should do one thing. Error handing is one thing. Thus, a function that handles\nerrors should do nothing else. This implies (as in the example above) that if the keyword\ntry exists in a function, it should be the very \ufb01rst word in the function and that there\nshould be nothing after the catch/finally blocks.\nThe Error.java Dependency Magnet\nReturning error codes usually implies that there is some class or enum in which all the\nerror codes are de\ufb01ned.\npublic enum Error {\nOK,INVALID,\nNO_SUCH,\nLOCKED,OUT_OF_RESOURCES,WAITING_FOR_EVENT;\n}\nClasses like this are a dependency magnet; many other classes must import and use\nthem. Thus, when the Error enum changes, all those other classes need to be recompiled\nand redeployed.11 This puts a negative pressure on the Error class. Programmers don\u2019t want\n11. Those who felt that they could get away without recompiling and redeploying have been found\u2014and dealt with.", "48 Chapter 3: Functions\nto add new errors because then they have to rebuild and redeploy everything. So they reuse\nold error codes instead of adding new ones.\nWhen you use exceptions rather than error codes, then new exceptions are derivativesof\nthe exception class. They can be added without forcing any recompilation or redeployment.12\nDon\u2019t Repeat Y ourself13\nLook back at Listing 3-1 carefully and you\nwill notice that there is an algorithm that\ngets repeated four times, once for each of\ntheSetUp, SuiteSetUp, TearDown, and\nSuiteTearDown cases. It\u2019 s not easy to spot\nthis duplication because the four instances\nare intermixed with other code and aren\u2019t\nuniformly duplicated. Still, the duplication\nis a problem because it bloats the code and\nwill require four-fold modi\ufb01cation should the algorithm ever have to change. It is also a\nfour-fold opportunity for an error of omission.\nThis duplication was remedied by the include method in Listing 3-7. Read through\nthat code again and notice how the readability of the whole module is enhanced by the\nreduction of that duplication.\nDuplication may be the root of all evil in software. Many principles and practices have\nbeen created for the purpose of controlling or eliminating it. Consider, for example, that\nall of Codd\u2019 s database normal forms serve to eliminate duplication in data. Consider also\nhow object-oriented programming serves to concentrate code into base classes that would\notherwise be redundant. Structured programming, Aspect Oriented Programming, Compo-\nnent Oriented Programming, are all, in part, strategies for eliminating duplication. It\nwould appear that since the invention of the subroutine, innovations in software develop-\nment have been an ongoing attempt to eliminate duplication from our source code. \nStructured Programming\nSome programmers follow Edsger Dijkstra\u2019 s rules of structured programming. 14 Dijkstra\nsaid that every function, and every block within a function, should have one entry and one\nexit. Following these rules means that there should only be one return statement in a func-\ntion, no break or continue statements in a loop, and never, ever, any goto statements. \n12. This is an example of the Open Closed Principle (OCP) [PPP02].\n13. The DR Y principle. [PRAG].\n14. [SP72].", "49Conclusion\nWhile we are sympathetic to the goals and disciplines of structured programming,\nthose rules serve little bene\ufb01t when functions are very small. It is only in larger functions\nthat such rules provide signi\ufb01cant bene\ufb01t. \nSo if you keep your functions small, then the occasional multiple return, break, or\ncontinue statement does no harm and can sometimes even be more expressive than the sin-\ngle-entry, single-exit rule. On the other hand, goto only makes sense in large functions, so\nit should be avoided.\nHow Do Y ou Write Functions Like This?\nWriting software is like any other kind of writing. When you write a paper or an article,\nyou get your thoughts down \ufb01rst, then you massage it until it reads well. The \ufb01rst draft\nmight be clumsy and disorganized, so you wordsmith it and restructure it and re\ufb01ne it until\nit reads the way you want it to read.\nWhen I write functions, they come out long and complicated. They have lots of\nindenting and nested loops. They have long argument lists. The names are arbitrary, and\nthere is duplicated code. But I also have a suite of unit tests that cover every one of those\nclumsy lines of code. \nSo then I massage and re\ufb01ne that code, splitting out functions, changing names, elim-\ninating duplication. I shrink the methods and reorder them. Sometimes I break out whole\nclasses, all the while keeping the tests passing. \nIn the end, I wind up with functions that follow the rules I\u2019ve laid down in this chapter.\nI don\u2019t write them that way to start. I don\u2019t think anyone could.\nConclusion\nEvery system is built from a domain-speci\ufb01c language designed by the programmers to\ndescribe that system. Functions are the verbs of that language, and classes are the nouns.\nThis is not some throwback to the hideous old notion that the nouns and verbs in a require-\nments document are the \ufb01rst guess of the classes and functions of a system. Rather, this is\na much older truth. The art of programming is, and has always been, the art of language\ndesign.\nMaster programmers think of systems as stories to be told rather than programs to\nbe written. They use the facilities of their chosen programming language to construct a\nmuch richer and more expressive language that can be used to tell that story. Part of that\ndomain-speci\ufb01c language is the hierarchy of functions that describe all the actions that\ntake place within that system. In an artful act of recursion those actions are written to\nuse the very domain-speci\ufb01c language they de\ufb01ne to tell their own small part of the\nstory. \nThis chapter has been about the mechanics of writing functions well. If you follow\nthe rules herein, your functions will be short, well named, and nicely organized. But", "50 Chapter 3: Functions\nnever forget that your real goal is to tell the story of the system, and that the functions\nyou write need to \ufb01t cleanly together into a clear and precise language to help you with\nthat telling.\nSetupTeardownIncluder\nListing 3-7 \nSetupTeardownIncluder.java\npackage fitnesse.html;\nimport fitnesse.responders.run.SuiteResponder;\nimport fitnesse.wiki.*;\npublic class SetupTeardownIncluder {\n  private PageData pageData;  private boolean isSuite;\n  private WikiPage testPage;\n  private StringBuffer newPageContent;  private PageCrawler pageCrawler;\n  public static String render(PageData pageData) throws Exception {\n    return render(pageData, false);  }\n  public static String render(PageData pageData, boolean isSuite)\n    throws Exception {    return new SetupTeardownIncluder(pageData).render(isSuite);  }\n  private SetupTeardownIncluder(PageData pageData) {\n    this.pageData = pageData;    testPage = pageData.getWikiPage();    pageCrawler = testPage.getPageCrawler();    newPageContent = new StringBuffer();\n  }\n  private String render(boolean isSuite) throws Exception {\n    this.isSuite = isSuite;\n    if (isTestPage())\n      includeSetupAndTeardownPages();    return pageData.getHtml();  }\n  private boolean isTestPage() throws Exception {\n    return pageData.hasAttribute(\"Test\");  }\n  private void includeSetupAndTeardownPages() throws Exception {\n    includeSetupPages();\n    includePageContent();    includeTeardownPages();    updatePageContent();  }", "51SetupTeardownIncluder\n  private void includeSetupPages() throws Exception {\n    if (isSuite)      includeSuiteSetupPage();\n    includeSetupPage();\n  }\n  private void includeSuiteSetupPage() throws Exception {\n    include(SuiteResponder.SUITE_SETUP_NAME, \"-setup\");\n  }\n  private void includeSetupPage() throws Exception {\n    include(\"SetUp\", \"-setup\");  }\n  private void includePageContent() throws Exception {\n    newPageContent.append(pageData.getContent());  }\n  private void includeTeardownPages() throws Exception {\n    includeTeardownPage();    if (isSuite)      includeSuiteTeardownPage();  }\n  private void includeTeardownPage() throws Exception {\n    include(\"TearDown\", \"-teardown\");  }\n  private void includeSuiteTeardownPage() throws Exception {\n    include(SuiteResponder.SUITE_TEARDOWN_NAME, \"-teardown\");  }\n  private void updatePageContent() throws Exception {\n    pageData.setContent(newPageContent.toString());\n  }\n  private void include(String pageName, String arg) throws Exception {\n    WikiPage inheritedPage = findInheritedPage(pageName);\n    if (inheritedPage != null) {\n      String pagePathName = getPathNameForPage(inheritedPage);      buildIncludeDirective(pagePathName, arg);    }\n  }\n  private WikiPage findInheritedPage(String pageName) throws Exception {\n    return PageCrawlerImpl.getInheritedPage(pageName, testPage);  }\n  private String getPathNameForPage(WikiPage page) throws Exception {\n    WikiPagePath pagePath = pageCrawler.getFullPath(page);    return PathParser.render(pagePath);  }\n  private void buildIncludeDirective(String pagePathName, String arg) {\n    newPageContent      .append(\"\\n!include \")\nListing 3-7 (continued)\nSetupTeardownIncluder.java", "52 Chapter 3: Functions\nBibliography\n[KP78]:  Kernighan and Plaugher, The Elements of Programming Style, 2d. ed., McGraw-\nHill, 1978.\n[PPP02]:  Robert C. Martin, Agile Software Development: Principles, Patterns, and Prac-\ntices, Prentice Hall, 2002.\n[GOF]:  Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al.,\nAddison-Wesley, 1996.\n[PRAG]:  The Pragmatic Programmer , Andrew Hunt, Dave Thomas, Addison-Wesley,\n2000.\n[SP72]:  Structured Programming, O.-J. Dahl, E. W . Dijkstra, C. A. R. Hoare, Academic\nPress, London, 1972.\n      .append(arg)\n      .append(\" .\")      .append(pagePathName)\n      .append(\"\\n\");\n  }}\nListing 3-7 (continued)\nSetupTeardownIncluder.java", "53\n4\nComments\n\u201cDon\u2019t comment bad code\u2014rewrite it. \u201d\n\u2014Brian W . Kernighan and P . J. Plaugher1\nNothing can be quite so helpful as a well-placed comment. Nothing can clutter up a mod-\nule more than frivolous dogmatic comments. Nothing can be quite so damaging as an old\ncrufty comment that propagates lies and misinformation.\nComments are not like Schindler\u2019 s List. They are not \u201cpure good.\u201d Indeed, comments\nare, at best, a necessary evil. If our programming languages were expressive enough, or if\n1. [KP78], p. 144.", "54 Chapter 4: Comments\nwe had the talent to subtly wield those languages to express our intent, we would not need\ncomments very much\u2014perhaps not at all. \nThe proper use of comments is to compensate for our failure to express ourself in\ncode. Note that I used the word failure. I meant it. Comments are always failures. We must\nhave them because we cannot always \ufb01gure out how to express ourselves without them,\nbut their use is not a cause for celebration. \nSo when you \ufb01nd yourself in a position where you need to write a comment, think it\nthrough and see whether there isn\u2019t some way to turn the tables and express yourself in\ncode. Every time you express yourself in code, you should pat yourself on the back. Every\ntime you write a comment, you should grimace and feel the failure of your ability of\nexpression.\nWhy am I so down on comments? Because they lie. Not always, and not intentionally,\nbut too often. The older a comment is, and the farther away it is from the code it describes,\nthe more likely it is to be just plain wrong. The reason is simple. Programmers can\u2019t realis-\ntically maintain them. \nCode changes and evolves. Chunks of it move from here to there. Those chunks bifur-\ncate and reproduce and come together again to form chimeras. Unfortunately the com-\nments don\u2019t always follow them\u2014can\u2019t always follow them. And all too often the\ncomments get separated from the code they describe and become orphaned blurbs of ever-\ndecreasing accuracy. For example, look what has happened to this comment and the line it\nwas intended to describe:\nMockRequest request;\nprivate final String HTTP_DATE_REGEXP = \n    \"[SMTWF][a-z]{2}\\\\,\\\\s[0-9]{2}\\\\s[JFMASOND][a-z]{2}\\\\s\"+\n    \"[0-9]{4}\\\\s[0-9]{2}\\\\:[0-9]{2}\\\\:[0-9]{2}\\\\sGMT\";\nprivate Response response;private FitNesseContext context;private FileResponder responder;private Locale saveLocale;\n// Example: \"Tue, 02 Apr 2003 22:18:49 GMT\"\nOther instance variables that were probably added later were interposed between the\nHTTP_DATE_REGEXP constant and it\u2019 s explanatory comment. \nIt is possible to make the point that programmers should be disciplined enough to\nkeep the comments in a high state of repair, relevance, and accuracy. I agree, they should.\nBut I would rather that energy go toward making the code so clear and expressive that it\ndoes not need the comments in the \ufb01rst place. \nInaccurate comments are far worse than no comments at all. They delude and mislead.\nThey set expectations that will never be ful\ufb01lled. They lay down old rules that need not, or\nshould not, be followed any longer.\nTruth can only be found in one place: the code. Only the code can truly tell you what\nit does. It is the only source of truly accurate information. Therefore, though comments are\nsometimes necessary, we will expend signi\ufb01cant energy to minimize them.", "55Good Comments\nComments Do Not Make Up for Bad Code\nOne of the more common motivations for writing comments is bad code. We write a mod-\nule and we know it is confusing and disorganized. We know it\u2019 s a mess. So we say to our-\nselves, \u201cOoh, I\u2019 d better comment that!\u201d No! Y ou\u2019 d better clean it! \nClear and expressive code with few comments is far superior to cluttered and complex\ncode with lots of comments. Rather than spend your time writing the comments that\nexplain the mess you\u2019ve made, spend it cleaning that mess.\nExplain Y ourself in Code\nThere are certainly times when code makes a poor vehicle for explanation. Unfortunately,\nmany programmers have taken this to mean that code is seldom, if ever, a good means for\nexplanation. This is patently false. Which would you rather see? This:\n// Check to see if the employee is eligible for full benefits\nif ((employee.flags & HOURLY_FLAG) &&     (employee.age > 65)) \nOr this?\nif (employee.isEligibleForFullBenefits())\nIt takes only a few seconds of thought to explain most of your intent in code. In many\ncases it\u2019 s simply a matter of creating a function that says the same thing as the comment\nyou want to write.\nGood Comments\nSome comments are necessary or bene\ufb01cial. We\u2019ll look at a few that I consider worthy of\nthe bits they consume. Keep in mind, however, that the only truly good comment is the\ncomment you found a way not to write.\nLegal Comments\nSometimes our corporate coding standards force us to write certain comments for legal\nreasons. For example, copyright and authorship statements are necessary and reasonable\nthings to put into a comment at the start of each source \ufb01le.\nHere, for example, is the standard comment header that we put at the beginning of\nevery source \ufb01le in FitNesse. I am happy to say that our IDE hides this comment from act-\ning as clutter by automatically collapsing it.\n// Copyright (C) 2003,2004,2005 by Object Mentor, Inc. All rights reserved.\n// Released under the terms of the GNU General Public License version 2 or later.", "56 Chapter 4: Comments\nComments like this should not be contracts or legal tomes. Where possible, refer to a stan-\ndard license or other external document rather than putting all the terms and conditions\ninto the comment.\nInformative Comments\nIt is sometimes useful to provide basic information with a comment. For example, con-\nsider this comment that explains the return value of an abstract method:\n// Returns an instance of the Responder being tested.\nprotected abstract Responder responderInstance();\nA comment like this can sometimes be useful, but it is better to use the name of the func-\ntion to convey the information where possible. For example, in this case the comment\ncould be made redundant by renaming the function: responderBeingTested.\nHere\u2019 s a case that\u2019 s a bit better:\n// format matched kk:mm:ss EEE, MMM dd, yyyy\nPattern timeMatcher = Pattern.compile(\n       \"\\\\d*:\\\\d*:\\\\d* \\\\w*, \\\\w* \\\\d*, \\\\d*\");\nIn this case the comment lets us know that the regular expression is intended to match a\ntime and date that were formatted with the SimpleDateFormat.format function using the\nspeci\ufb01ed format string. Still, it might have been better, and clearer, if this code had been\nmoved to a special class that converted the formats of dates and times. Then the comment\nwould likely have been super\ufb02uous.\nExplanation of Intent\nSometimes a comment goes beyond just useful information about the implementation and\nprovides the intent behind a decision. In the following case we see an interesting decision\ndocumented by a comment. When comparing two objects, the author decided that he\nwanted to sort objects of his class higher than objects of any other.\npublic int compareTo(Object o)\n{\nif(o instanceof WikiPagePath)\n{\nWikiPagePath p = (WikiPagePath) o;String compressedName = StringUtil.join(names, \"\");String compressedArgumentName = StringUtil.join(p.names, \"\");return compressedName.compareTo(compressedArgumentName);\n}\nreturn 1; // we are greater because we are the right type.\n}\nHere\u2019 s an even better example. Y ou might not agree with the programmer\u2019 s solution to\nthe problem, but at least you know what he was trying to do.\npublic void testConcurrentAddWidgets() throws Exception {\nWidgetBuilder widgetBuilder = \nnew WidgetBuilder(new Class[]{BoldWidget.class});", "57Good Comments\nString text = \"'''bold text'''\";\nParentWidget parent = \nnew BoldWidget(new MockWidgetRoot(), \"'''bold text'''\");\nAtomicBoolean failFlag = new AtomicBoolean();\nfailFlag.set(false);\n//This is our best attempt to get a race condition \n//by creating large number of threads.for (int i = 0; i < 25000; i++) {\nWidgetBuilderThread widgetBuilderThread = \nnew WidgetBuilderThread(widgetBuilder, text, parent, failFlag);\nThread thread = new Thread(widgetBuilderThread);\nthread.start();\n}assertEquals(false, failFlag.get());\n}\nClari\ufb01cation\nSometimes it is just helpful to translate the meaning of some obscure argument or return\nvalue into something that\u2019 s readable. In general it is better to \ufb01nd a way to make that argu-\nment or return value clear in its own right; but when its part of the standard library, or in\ncode that you cannot alter, then a helpful clarifying comment can be useful.\npublic void testCompareTo() throws Exception\n{\nWikiPagePath a = PathParser.parse(\"PageA\");\nWikiPagePath ab = PathParser.parse(\"PageA.PageB\");\nWikiPagePath b = PathParser.parse(\"PageB\");WikiPagePath aa = PathParser.parse(\"PageA.PageA\");WikiPagePath bb = PathParser.parse(\"PageB.PageB\");WikiPagePath ba = PathParser.parse(\"PageB.PageA\");\nassertTrue(a.compareTo(a) == 0);    // a == a\nassertTrue(a.compareTo(b) != 0);    // a != bassertTrue(ab.compareTo(ab) == 0);  // ab == ab\nassertTrue(a.compareTo(b) == -1);   // a < b\nassertTrue(aa.compareTo(ab) == -1); // aa < abassertTrue(ba.compareTo(bb) == -1); // ba < bbassertTrue(b.compareTo(a) == 1);    // b > aassertTrue(ab.compareTo(aa) == 1);  // ab > aa\nassertTrue(bb.compareTo(ba) == 1);  // bb > ba\n}\nThere is a substantial risk, of course, that a clarifying comment is incorrect. Go\nthrough the previous example and see how dif\ufb01cult it is to verify that they are correct. This\nexplains both why the clari\ufb01cation is necessary and why it\u2019 s risky. So before writing com-\nments like this, take care that there is no better way, and then take even more care that they\nare accurate.", "58 Chapter 4: Comments\nWarning of Consequences\nSometimes it is useful to warn other pro-\ngrammers about certain consequences. For\nexample, here is a comment that explains\nwhy a particular test case is turned off:\n// Don't run unless you \n// have some time to kill.public void _testWithReallyBigFile(){\nwriteLinesToFile(10000000);\nresponse.setBody(testFile);\nresponse.readyToSend(this);String responseString = output.toString();assertSubString(\"Content-Length: 1000000000\", responseString);\nassertTrue(bytesSent > 1000000000);\n}\nNowadays, of course, we\u2019 d turn off the test case by using the @Ignore attribute with an\nappropriate explanatory string. @Ignore(\"Takes too long to run\") . But back in the days\nbefore JUnit 4, putting an underscore in front of the method name was a common conven-\ntion. The comment, while \ufb02ippant, makes the point pretty well. \nHere\u2019 s another, more poignant example: \npublic static SimpleDateFormat makeStandardHttpDateFormat()\n{\n//SimpleDateFormat is not thread safe, //so we need to create each instance independently.SimpleDateFormat df = new SimpleDateFormat(\"EEE, dd MMM  yyyy HH:mm:ss z\");df.setTimeZone(TimeZone.getTimeZone(\"GMT\"));return df;\n}\nY ou might complain that there are better ways to solve this problem. I might agree with\nyou. But the comment, as given here, is perfectly reasonable. It will prevent some overly\neager programmer from using a static initializer in the name of ef\ufb01ciency. \nTODO Comments\nIt is sometimes reasonable to leave \u201cTo do\u201d notes in the form of //TODO comments. In the\nfollowing case, the TODO comment explains why the function has a degenerate implementa-\ntion and what that function\u2019 s future should be. \n//TODO-MdM these are not needed\n// We expect this to go away when we do the checkout modelprotected VersionInfo makeVersion() throws Exception{\nreturn null;\n}", "59Bad Comments\nTODOs are jobs that the programmer thinks should be done, but for some reason\ncan\u2019t do at the moment. It might be a reminder to delete a deprecated feature or a\nplea for someone else to look at a problem. It might be a request for someone else to\nthink of a better name or a reminder to make a change that is dependent on a\nplanned event. Whatever else a TODO might be, it is not an excuse to leave bad code in\nthe system.\nNowadays, most good IDEs provide special gestures and features to locate all the\nTODO comments, so it\u2019 s not likely that they will get lost. Still, you don\u2019t want your code\nto be littered with TODOs. So scan through them regularly and eliminate the ones you\ncan.\nAmpli\ufb01cation\nA comment may be used to amplify the importance of something that may otherwise seem\ninconsequential.\nString listItemContent = match.group(3).trim();\n// the trim is real important.  It removes the starting // spaces that could cause the item to be recognized// as another list.new ListItemWidget(this, listItemContent, this.level + 1);return buildList(text.substring(match.end()));\nJavadocs in Public APIs\nThere is nothing quite so helpful and satisfying as a well-described public API. The java-\ndocs for the standard Java library are a case in point. It would be dif\ufb01cult, at best, to write\nJava programs without them. \nIf you are writing a public API, then you should certainly write good javadocs for it.\nBut keep in mind the rest of the advice in this chapter. Javadocs can be just as misleading,\nnonlocal, and dishonest as any other kind of comment.\nBad Comments\nMost comments fall into this category. Usually they are crutches or excuses for poor code\nor justi\ufb01cations for insuf\ufb01cient decisions, amounting to little more than the programmer\ntalking to himself.\nMumbling\nPlopping in a comment just because you feel you should or because the process requires it,\nis a hack. If you decide to write a comment, then spend the time necessary to make sure it\nis the best comment you can write.", "60 Chapter 4: Comments\nHere, for example, is a case I found in FitNesse, where a comment might indeed have\nbeen useful. But the author was in a hurry or just not paying much attention. His mum-\nbling left behind an enigma:\npublic void loadProperties()\n{\ntry\n{\n      String propertiesPath = propertiesLocation + \"/\" + PROPERTIES_FILE;      FileInputStream propertiesStream = new FileInputStream(propertiesPath);      loadedProperties.load(propertiesStream);\n}catch(IOException e)\n{\n// No properties files means all defaults are loaded\n}\n}\nWhat does that comment in the catch block mean? Clearly it meant something to the\nauthor, but the meaning does not come through all that well. Apparently, if we get an\nIOException, it means that there was no properties \ufb01le; and in that case all the defaults are\nloaded. But who loads all the defaults? Were they loaded before the call to\nloadProperties.load? Or did loadProperties.load catch the exception, load the defaults,\nand then pass the exception on for us to ignore? Or did loadProperties.load load all the\ndefaults before attempting to load the \ufb01le? Was the author trying to comfort himself about\nthe fact that he was leaving the catch block empty? Or\u2014and this is the scary possibility\u2014\nwas the author trying to tell himself to come back here later and write the code that would\nload the defaults?\nOur only recourse is to examine the code in other parts of the system to \ufb01nd out what\u2019 s\ngoing on. Any comment that forces you to look in another module for the meaning of that\ncomment has failed to communicate to you and is not worth the bits it consumes. \nRedundant Comments\nListing 4-1 shows a simple function with a header comment that is completely redundant.\nThe comment probably takes longer to read than the code itself.\nListing 4-1 \nwaitForClose\n// Utility method that returns when this.closed is true. Throws an exception\n// if the timeout is reached.public synchronized void waitForClose(final long timeoutMillis) \n  throws Exception\n{\nif(!closed)\n{\nwait(timeoutMillis);\nif(!closed)\nthrow new Exception(\"MockResponseSender could not be closed\");\n}\n}", "61Bad Comments\nWhat purpose does this comment serve? It\u2019 s certainly not more informative than the\ncode. It does not justify the code, or provide intent or rationale. It is not easier to read than\nthe code. Indeed, it is less precise than the code and entices the reader to accept that lack of\nprecision in lieu of true understanding. It is rather like a gladhanding used-car salesman\nassuring you that you don\u2019t need to look under the hood.\nNow consider the legion of useless and redundant javadocs in Listing 4-2 taken from\nTomcat. These comments serve only to clutter and obscure the code. They serve no docu-\nmentary purpose at all. To make matters worse, I only showed you the \ufb01rst few. There are\nmany more in this module.\nListing 4-2 \nContainerBase.java (Tomcat)\npublic abstract class ContainerBase\n  implements Container, Lifecycle, Pipeline,   MBeanRegistration, Serializable {\n  /**\n   * The processor delay for this component.   */  protected int backgroundProcessorDelay = -1;\n  /**\n   * The lifecycle event support for this component.\n   */\n  protected LifecycleSupport lifecycle =     new LifecycleSupport(this);\n  /**\n   * The container event listeners for this Container.   */  protected ArrayList listeners = new ArrayList();\n  /**\n   * The Loader implementation with which this Container is   * associated.\n   */\n  protected Loader loader = null;\n  /**\n   * The Logger implementation with which this Container is    \n   * associated.\n   */\n  protected Log logger = null;\n  /**\n   * Associated logger name.   */  protected String logName = null;", "62 Chapter 4: Comments\n  /**\n   * The Manager implementation with which this Container is    * associated.\n   */\n  protected Manager manager = null;\n  /**\n   * The cluster with which this Container is associated.\n   */  protected Cluster cluster = null;\n  /**\n   * The human-readable name of this Container.   */  protected String name = null;\n  /**\n   * The parent Container to which this Container is a child.   */\n  protected Container parent = null;\n  /**\n   * The parent class loader to be configured when we install a \n   * Loader.   */  protected ClassLoader parentClassLoader = null;\n  /**\n   * The Pipeline object with which this Container is    * associated.\n   */\n  protected Pipeline pipeline = new StandardPipeline(this);\n  /**\n   * The Realm with which this Container is associated.\n   */  protected Realm realm = null;\n  /**\n   * The resources DirContext object with which this Container    * is associated.\n   */\n  protected DirContext resources = null;\nListing 4-2 (continued)\nContainerBase.java (Tomcat)", "63Bad Comments\nMisleading Comments\nSometimes, with all the best intentions, a programmer makes a statement in his comments\nthat isn\u2019t precise enough to be accurate. Consider for another moment the badly redundant\nbut also subtly misleading comment we saw in Listing 4-1.\nDid you discover how the comment was misleading? The method does not return\nwhen this.closed becomes true. It returns if this.closed is true; otherwise, it waits for a\nblind time-out and then throws an exception if this.closed is still not true.\nThis subtle bit of misinformation, couched in a comment that is harder to read than\nthe body of the code, could cause another programmer to blithely call this function in the\nexpectation that it will return as soon as this.closed becomes true. That poor programmer\nwould then \ufb01nd himself in a debugging session trying to \ufb01gure out why his code executed\nso slowly.\nMandated Comments\nIt is just plain silly to have a rule that says that every function must have a javadoc, or\nevery variable must have a comment. Comments like this just clutter up the code, propa-\ngate lies, and lend to general confusion and disorganization. \nFor example, required javadocs for every function lead to abominations such as List-\ning 4-3. This clutter adds nothing and serves only to obfuscate the code and create the\npotential for lies and misdirection.\nJournal Comments\nSometimes people add a comment to the start of a module every time they edit it. These\ncomments accumulate as a kind of journal, or log, of every change that has ever been\nmade. I have seen some modules with dozens of pages of these run-on journal entries. \nListing 4-3 \n  /**\n   *    * @param title The title of the CD\n   * @param author The author of the CD\n   * @param tracks The number of tracks on the CD   * @param durationInMinutes The duration of the CD in minutes   */  public void addCD(String title, String author, \n                     int tracks, int durationInMinutes) {\n    CD cd = new CD();    cd.title = title;    cd.author = author;\n    cd.tracks = tracks;\n    cd.duration = duration;    cdList.add(cd);  }", "64 Chapter 4: Comments\nLong ago there was a good reason to create and maintain these log entries at the start\nof every module. We didn\u2019t have source code control systems that did it for us. Nowadays,\nhowever, these long journals are just more clutter to obfuscate the module. They should be\ncompletely removed.\nNoise Comments\nSometimes you see comments that are nothing but noise. They restate the obvious and\nprovide no new information.\n/**\n * Default constructor. */\nprotected AnnualDateRule() {\n}\nNo, really? Or how about this:\n/** The day of the month. */\n    private int dayOfMonth;\nAnd then there\u2019 s this paragon of redundancy:\n/** * Returns the day of the month. *\n * @return the day of the month.\n */public int getDayOfMonth() {  return dayOfMonth;}\n * Changes (from 11-Oct-2001)\n * -------------------------- * 11-Oct-2001 : Re-organised the class and moved it to new package  *               com.jrefinery.date (DG); * 05-Nov-2001 : Added a getDescription() method, and eliminated NotableDate \n *               class (DG);\n * 12-Nov-2001 : IBD requires setDescription() method, now that NotableDate  *               class is gone (DG);  Changed getPreviousDayOfWeek(),  *               getFollowingDayOfWeek() and getNearestDayOfWeek() to correct  *               bugs (DG); * 05-Dec-2001 : Fixed bug in SpreadsheetDate class (DG);\n * 29-May-2002 : Moved the month constants into a separate interface \n *               (MonthConstants) (DG); * 27-Aug-2002 : Fixed bug in addMonths() method, thanks to N???levka Petr (DG);\n * 03-Oct-2002 : Fixed errors reported by Checkstyle (DG); * 13-Mar-2003 : Implemented Serializable (DG);\n * 29-May-2003 : Fixed bug in addMonths method (DG);\n * 04-Sep-2003 : Implemented Comparable.  Updated the isInRange javadocs (DG); * 05-Jan-2005 : Fixed bug in addYears() method (1096282) (DG);", "65Bad Comments\nThese comments are so noisy that we learn to ignore them. As we read through code, our\neyes simply skip over them. Eventually the comments begin to lie as the code around them\nchanges.\nThe \ufb01rst comment in Listing 4-4 seems appropriate. 2 It explains why the catch block\nis being ignored. But the second comment is pure noise. Apparently the programmer was\njust so frustrated with writing try/catch blocks in this function that he needed to vent.\nRather than venting in a worthless and noisy comment, the programmer should have\nrecognized that his frustration could be resolved by improving the structure of his code.\nHe should have redirected his energy to extracting that last try/catch block into a separate\nfunction, as shown in Listing 4-5.\n2. The current trend for IDEs to check spelling in comments will be a balm for those of us who read a lot of code.\nListing 4-4 \nstartSending\nprivate void startSending()\n{\ntry\n{\ndoSending();\n}catch(SocketException e){\n// normal. someone stopped the request.\n}catch(Exception e){\ntry\n{\nresponse.add(ErrorResponder.makeExceptionString(e));response.closeAll();\n}\ncatch(Exception e1)\n{\n//Give me a break!\n}\n}\n}\nListing 4-5 \nstartSending (refactored)\nprivate void startSending()\n{\ntry\n{\ndoSending();\n}", "66 Chapter 4: Comments\nReplace the temptation to create noise with the determination to clean your code. Y ou\u2019ll\n\ufb01nd it makes you a better and happier programmer.\nScary Noise\nJavadocs can also be noisy. What purpose do the following Javadocs (from a well-known\nopen-source library) serve? Answer: nothing. They are just redundant noisy comments\nwritten out of some misplaced desire to provide documentation.\n/** The name. */\nprivate String name;\n/** The version. */\nprivate String version;\n/** The licenceName. */\nprivate String licenceName;\n/** The version. */\nprivate String info;\nRead these comments again more carefully. Do you see the cut-paste error? If authors\naren\u2019t paying attention when comments are written (or pasted), why should readers be\nexpected to pro\ufb01t from them?\ncatch(SocketException e)\n{\n// normal. someone stopped the request.\n}\ncatch(Exception e){\naddExceptionAndCloseResponse(e);\n}\n}\nprivate void addExceptionAndCloseResponse(Exception e)\n{\ntry{\nresponse.add(ErrorResponder.makeExceptionString(e));\nresponse.closeAll();\n}catch(Exception e1)\n{\n}\n}\nListing 4-5 (continued)\nstartSending (refactored)", "67Bad Comments\nDon\u2019t Use a Comment When Y ou Can Use a Function or a V ariable\nConsider the following stretch of code:\n// does the module from the global list <mod> depend on the\n// subsystem we are part of?if (smodule.getDependSubsystems().contains(subSysMod.getSubSystem()))\nThis could be rephrased without the comment as\nArrayList moduleDependees = smodule.getDependSubsystems();String ourSubSystem = subSysMod.getSubSystem();if (moduleDependees.contains(ourSubSystem))\nThe author of the original code may have written the comment \ufb01rst (unlikely) and then\nwritten the code to ful\ufb01ll the comment. However, the author should then have refactored\nthe code, as I did, so that the comment could be removed.\nPosition Markers\nSometimes programmers like to mark a particular position in a source \ufb01le. For example, I\nrecently found this in a program I was looking through:\n// Actions //////////////////////////////////\nThere are rare times when it makes sense to gather certain functions together beneath a\nbanner like this. But in general they are clutter that should be eliminated\u2014especially the\nnoisy train of slashes at the end.\nThink of it this way. A banner is startling and obvious if you don\u2019t see banners very\noften. So use them very sparingly, and only when the bene\ufb01t is signi\ufb01cant. If you overuse\nbanners, they\u2019ll fall into the background noise and be ignored.\nClosing Brace Comments\nSometimes programmers will put special comments on closing braces, as in Listing 4-6.\nAlthough this might make sense for long functions with deeply nested structures, it serves\nonly to clutter the kind of small and encapsulated functions that we prefer. So if you \ufb01nd\nyourself wanting to mark your closing braces, try to shorten your functions instead.\nListing 4-6 \nwc.java\npublic class wc {\n  public static void main(String[] args) {\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    String line;    int lineCount = 0;    int charCount = 0;    int wordCount = 0;\n    try {", "68 Chapter 4: Comments\nAttributions and Bylines\n/* Added by Rick */\nSource code control systems are very good at remembering who added what, when.\nThere is no need to pollute the code with little bylines. Y ou might think that such com-\nments would be useful in order to help others know who to talk to about the code. But the\nreality is that they tend to stay around for years and years, getting less and less accurate\nand relevant.\nAgain, the source code control system is a better place for this kind of information.\nCommented-Out Code\nFew practices are as odious as commenting-out code. Don\u2019t do this!\nInputStreamResponse response = new InputStreamResponse();\nresponse.setBody(formatter.getResultStream(), formatter.getByteCount());\n// InputStream resultsStream = formatter.getResultStream();\n// StreamReader reader = new StreamReader(resultsStream);\n// response.setContent(reader.read(formatter.getByteCount()));\nOthers who see that commented-out code won\u2019t have the courage to delete it. They\u2019ll think\nit is there for a reason and is too important to delete. So commented-out code gathers like\ndregs at the bottom of a bad bottle of wine.\nConsider this from apache commons:\nthis.bytePos = writeBytes(pngIdBytes, 0);\n//hdrPos = bytePos;writeHeader();\nwriteResolution();\n//dataPos = bytePos;if (writeImageData()) {\nwriteEnd();this.pngBytes = resizeByteArray(this.pngBytes, this.maxPos);\n}\n      while ((line = in.readLine()) != null) {\n        lineCount++;        charCount += line.length();        String words[] = line.split(\"\\\\W\");        wordCount += words.length;\n      } //while\n      System.out.println(\"wordCount = \" + wordCount);      System.out.println(\"lineCount = \" + lineCount);      System.out.println(\"charCount = \" + charCount);    } // try\n    catch (IOException e) {\n      System.err.println(\"Error:\" + e.getMessage());    } //catch  } //main}\nListing 4-6 (continued)\nwc.java", "69Bad Comments\nelse {\nthis.pngBytes = null;\n}\nreturn this.pngBytes;\nWhy are those two lines of code commented? Are they important? Were they left as\nreminders for some imminent change? Or are they just cruft that someone commented-out\nyears ago and has simply not bothered to clean up.\nThere was a time, back in the sixties, when commenting-out code might have been\nuseful. But we\u2019ve had good source code control systems for a very long time now. Those\nsystems will remember the code for us. We don\u2019t have to comment it out any more. Just\ndelete the code. We won\u2019t lose it. Promise.\nHTML Comments\nHTML in source code comments is an abomination, as you can tell by reading the code\nbelow. It makes the comments hard to read in the one place where they should be easy to\nread\u2014the editor/IDE. If comments are going to be extracted by some tool (like Javadoc) to\nappear in a Web page, then it should be the responsibility of that tool, and not the program-\nmer, to adorn the comments with appropriate HTML.\n/**\n * Task to run fit tests.  * This task runs fitnesse tests and publishes the results.\n * <p/>\n * <pre> * Usage: * &lt;taskdef name=&quot;execute-fitnesse-tests&quot;  *     classname=&quot;fitnesse.ant.ExecuteFitnesseTestsTask&quot; \n *     classpathref=&quot;classpath&quot; /&gt;\n * OR * &lt;taskdef classpathref=&quot;classpath&quot;  *             resource=&quot;tasks.properties&quot; /&gt;\n * <p/>\n * &lt;execute-fitnesse-tests  *     suitepage=&quot;FitNesse.SuiteAcceptanceTests&quot;  *     fitnesseport=&quot;8082&quot;  *     resultsdir=&quot;${results.dir}&quot; \n *     resultshtmlpage=&quot;fit-results.html&quot; \n *     classpathref=&quot;classpath&quot; /&gt; * </pre> */\nNonlocal Information\nIf you must write a comment, then make sure it describes the code it appears near. Don\u2019t\noffer systemwide information in the context of a local comment. Consider, for example,\nthe javadoc comment below. Aside from the fact that it is horribly redundant, it also offers\ninformation about the default port. And yet the function has absolutely no control over\nwhat that default is. The comment is not describing the function, but some other, far dis-\ntant part of the system. Of course there is no guarantee that this comment will be changed\nwhen the code containing the default is changed.", "70 Chapter 4: Comments\n/**\n * Port on which fitnesse would run. Defaults to <b>8082</b>. *\n * @param fitnessePort\n */public void setFitnessePort(int fitnessePort){\nthis.fitnessePort = fitnessePort;\n}\nToo Much Information\nDon\u2019t put interesting historical discussions or irrelevant descriptions of details into your\ncomments. The comment below was extracted from a module designed to test that a func-\ntion could encode and decode base64. Other than the RFC number, someone reading this\ncode has no need for the arcane information contained in the comment. \n/*\n RFC 2045 - Multipurpose Internet Mail Extensions (MIME)  Part One: Format of Internet Message Bodies\n section 6.8.  Base64 Content-Transfer-Encoding\n The encoding process represents 24-bit groups of input bits as output  strings of 4 encoded characters. Proceeding from left to right, a  24-bit input group is formed by concatenating 3 8-bit input groups.  These 24 bits are then treated as 4 concatenated 6-bit groups, each \n of which is translated into a single digit in the base64 alphabet. \n When encoding a bit stream via the base64 encoding, the bit stream  must be presumed to be ordered with the most-significant-bit first.  That is, the first bit in the stream will be the high-order bit in \n the first 8-bit byte, and the eighth bit will be the low-order bit in \n the first 8-bit byte, and so on.\n */\nInobvious Connection\nThe connection between a comment and the code it describes should be obvious. If you are\ngoing to the trouble to write a comment, then at least you\u2019 d like the reader to be able to\nlook at the comment and the code and understand what the comment is talking about. \nConsider, for example, this comment drawn from apache commons:\n         /*\n          * start with an array that is big enough to hold all the pixels          * (plus filter bytes), and an extra 200 bytes for header info\n          */\n         this.pngBytes = new byte[((this.width + 1) * this.height * 3) + 200];\nWhat is a \ufb01lter byte? Does it relate to the +1? Or to the *3? Both? Is a pixel a byte? Why\n200? The purpose of a comment is to explain code that does not explain itself. It is a pity\nwhen a comment needs its own explanation. \nFunction Headers\nShort functions don\u2019t need much description. A well-chosen name for a small function that\ndoes one thing is usually better than a comment header.", "71Bad Comments\nJavadocs in Nonpublic Code\nAs useful as javadocs are for public APIs, they are anathema to code that is not intended\nfor public consumption. Generating javadoc pages for the classes and functions inside a\nsystem is not generally useful, and the extra formality of the javadoc comments amounts\nto little more than cruft and distraction. \nExample\nI wrote the module in Listing 4-7 for the \ufb01rst XP Immersion. It was intended to be an\nexample of bad coding and commenting style. Kent Beck then refactored this code into a\nmuch more pleasant form in front of several dozen enthusiastic students. Later I adapted\nthe example for my book Agile Software Development, Principles, Patterns, and Practices\nand the \ufb01rst of my Craftsman articles published in Software Development magazine. \nWhat I \ufb01nd fascinating about this module is that there was a time when many of us\nwould have considered it \u201cwell documented.\u201d Now we see it as a small mess. See how\nmany different comment problems you can \ufb01nd.\nListing 4-7 \nGeneratePrimes.java\n/**\n * This class Generates prime numbers up to a user specified * maximum.  The algorithm used is the Sieve of Eratosthenes.\n * <p>\n * Eratosthenes of Cyrene, b. c. 276 BC, Cyrene, Libya -- * d. c. 194, Alexandria.  The first man to calculate the * circumference of the Earth.  Also known for working on * calendars with leap years and ran the library at Alexandria.\n * <p>\n * The algorithm is quite simple.  Given an array of integers * starting at 2.  Cross out all multiples of 2.  Find the next * uncrossed integer, and cross out all of its multiples.\n * Repeat untilyou have passed the square root of the maximum\n * value. * * @author Alphonse * @version 13 Feb 2002 atp\n */\nimport java.util.*;\npublic class GeneratePrimes\n{\n  /**\n   * @param maxValue is the generation limit.   */  public static int[] generatePrimes(int maxValue)  {\n    if (maxValue >= 2) // the only valid case\n    {      // declarations      int s = maxValue + 1; // size of array      boolean[] f = new boolean[s];\n      int i;", "72 Chapter 4: Comments\nIn Listing 4-8 you can see a refactored version of the same module. Note that the use\nof comments is signi\ufb01cantly restrained. There are just two comments in the whole module.\nBoth comments are explanatory in nature. \n      // initialize array to true.\n      for (i = 0; i < s; i++)        f[i] = true;\n      // get rid of known non-primes\n      f[0] = f[1] = false;\n      // sieve\n      int j;\n      for (i = 2; i < Math.sqrt(s) + 1; i++)      {        if (f[i]) // if i is uncrossed, cross its multiples.        {\n          for (j = 2 * i; j < s; j += i)\n            f[j] = false; // multiple is not prime        }      }\n      // how many primes are there?\n      int count = 0;\n      for (i = 0; i < s; i++)\n      {\n        if (f[i])          count++; // bump count.      }\n      int[] primes = new int[count];\n      // move the primes into the result\n      for (i = 0, j = 0; i < s; i++)      {\n        if (f[i])             // if prime\n          primes[j++] = i;      }\n      return primes;  // return the primes\n    }\n    else // maxValue < 2      return new int[0]; // return null array if bad input.  }\n}\nListing 4-8 \nPrimeGenerator.java (refactored)\n/**\n * This class Generates prime numbers up to a user specified * maximum.  The algorithm used is the Sieve of Eratosthenes.\n * Given an array of integers starting at 2:\n * Find the first uncrossed integer, and cross out all its\nListing 4-7 (continued)\nGeneratePrimes.java", "73Bad Comments\n * multiples.  Repeat until there are no more multiples\n * in the array. */\npublic class PrimeGenerator\n{  private static boolean[] crossedOut;  private static int[] result;\n  public static int[] generatePrimes(int maxValue)\n  {    if (maxValue < 2)      return new int[0];\n    else\n    {      uncrossIntegersUpTo(maxValue);      crossOutMultiples();      putUncrossedIntegersIntoResult();\n      return result;\n    }  }\n  private static void uncrossIntegersUpTo(int maxValue)\n  {    crossedOut = new boolean[maxValue + 1];\n    for (int i = 2; i < crossedOut.length; i++)\n      crossedOut[i] = false;  }\n  private static void crossOutMultiples()\n  {\n    int limit = determineIterationLimit();    for (int i = 2; i <= limit; i++)      if (notCrossed(i))        crossOutMultiplesOf(i);\n  }\n  private static int determineIterationLimit()\n  {    // Every multiple in the array has a prime factor that\n    // is less than or equal to the root of the array size,\n    // so we don't have to cross out multiples of numbers    // larger than that root.    double iterationLimit = Math.sqrt(crossedOut.length);    return (int) iterationLimit;\n  }\n  private static void crossOutMultiplesOf(int i)\n  {    for (int multiple = 2*i;\n         multiple < crossedOut.length;\n         multiple += i)      crossedOut[multiple] = true;  }\nListing 4-8 (continued)\nPrimeGenerator.java (refactored)", "74 Chapter 4: Comments\nIt is easy to argue that the \ufb01rst comment is redundant because it reads very much like\nthe generatePrimes function itself. Still, I think the comment serves to ease the reader into\nthe algorithm, so I\u2019m inclined to leave it.\nThe second argument is almost certainly necessary. It explains the rationale behind\nthe use of the square root as the loop limit. I could \ufb01nd no simple variable name, nor any\ndifferent coding structure that made this point clear. On the other hand, the use of the\nsquare root might be a conceit. Am I really saving that much time by limiting the iteration\nto the square root? Could the calculation of the square root take more time than I\u2019m saving? \nIt\u2019 s worth thinking about. Using the square root as the iteration limit satis\ufb01es the old C\nand assembly language hacker in me, but I\u2019m not convinced it\u2019 s worth the time and effort\nthat everyone else will expend to understand it.\nBibliography\n[KP78]:  Kernighan and Plaugher, The Elements of Programming Style, 2d. ed., McGraw-\nHill, 1978.\n  private static boolean notCrossed(int i)\n  {    return crossedOut[i] == false;\n  }\n  private static void putUncrossedIntegersIntoResult()\n  {    result = new int[numberOfUncrossedIntegers()];\n    for (int j = 0, i = 2; i < crossedOut.length; i++)\n      if (notCrossed(i))        result[j++] = i;  }\n  private static int numberOfUncrossedIntegers()\n  {\n    int count = 0;    for (int i = 2; i < crossedOut.length; i++)      if (notCrossed(i))\n        count++;\n    return count;\n  }\n}\nListing 4-8 (continued)\nPrimeGenerator.java (refactored)", "75\n5\nFormatting\nWhen people look under the hood, we want them to be impressed with the neatness, con-\nsistency, and attention to detail that they perceive. We want them to be struck by the\norderliness. We want their eyebrows to rise as they scroll through the modules. We want\nthem to perceive that professionals have been at work. If instead they see a scrambled\nmass of code that looks like it was written by a bevy of drunken sailors, then they are\nlikely to conclude that the same inattention to detail pervades every other aspect of the\nproject.", "76 Chapter 5: Formatting\nY ou should take care that your code is nicely formatted. Y ou should choose a set of\nsimple rules that govern the format of your code, and then you should consistently apply\nthose rules. If you are working on a team, then the team should agree to a single set of\nformatting rules and all members should comply. It helps to have an automated tool that\ncan apply those formatting rules for you.\nThe Purpose of Formatting\nFirst of all, let\u2019 s be clear. Code formatting is important. It is too important to ignore and\nit is too important to treat religiously. Code formatting is about communication, and\ncommunication is the professional developer\u2019 s \ufb01rst order of business. \nPerhaps you thought that \u201cgetting it working\u201d was the \ufb01rst order of business for a\nprofessional developer. I hope by now, however, that this book has disabused you of that\nidea. The functionality that you create today has a good chance of changing in the next\nrelease, but the readability of your code will have a profound effect on all the changes\nthat will ever be made. The coding style and readability set precedents that continue to\naffect maintainability and extensibility long after the original code has been changed\nbeyond recognition. Y our style and discipline survives, even though your code does not.\nSo what are the formatting issues that help us to communicate best?\nV ertical Formatting\nLet\u2019 s start with vertical size. How big should a source \ufb01le be? In Java, \ufb01le size is closely\nrelated to class size. We\u2019ll talk about class size when we talk about classes. For the\nmoment let\u2019 s just consider \ufb01le size.\nHow big are most Java source \ufb01les? It turns out that there is a huge range of sizes and\nsome remarkable differences in style. Figure 5-1 shows some of those differences. \nSeven different projects are depicted. Junit, FitNesse, testNG, Time and Money,\nJDepend, Ant, and Tomcat. The lines through the boxes show the minimum and maxi-\nmum \ufb01le lengths in each project. The box shows approximately one-third (one standard\ndeviation1) of the \ufb01les. The middle of the box is the mean. So the average \ufb01le size in the\nFitNesse project is about 65 lines, and about one-third of the \ufb01les are between 40 and\n100+ lines. The largest \ufb01le in FitNesse is about 400 lines and the smallest is 6 lines.\nNote that this is a log scale, so the small difference in vertical position implies a very\nlarge difference in absolute size.\n1. The box shows sigma/2 above and below the mean. Y es, I know that the \ufb01le length distribution is not normal, and so the stan-\ndard deviation is not mathematically precise. But we\u2019re not trying for precision here. We\u2019re just trying to get a feel.", "77V ertical Formatting\nJunit, FitNesse, and Time and Money are composed of relatively small \ufb01les. None\nare over 500 lines and most of those \ufb01les are less than 200 lines. Tomcat and Ant, on the\nother hand, have some \ufb01les that are several thousand lines long and close to half are over\n200 lines. \nWhat does that mean to us? It appears to be possible to build signi\ufb01cant systems\n(FitNesse is close to 50,000 lines) out of \ufb01les that are typically 200 lines long, with an\nupper limit of 500. Although this should not be a hard and fast rule, it should be considered\nvery desirable. Small \ufb01les are usually easier to understand than large \ufb01les are.\nThe Newspaper Metaphor\nThink of a well-written newspaper article. Y ou read it vertically. At the top you expect a\nheadline that will tell you what the story is about and allows you to decide whether it is\nsomething you want to read. The \ufb01rst paragraph gives you a synopsis of the whole story,\nhiding all the details while giving you the broad-brush concepts. As you continue down-\nward, the details increase until you have all the dates, names, quotes, claims, and other\nminutia.\nWe would like a source \ufb01le to be like a newspaper article. The name should be simple\nbut explanatory. The name, by itself, should be suf\ufb01cient to tell us whether we are in the\nright module or not. The topmost parts of the source \ufb01le should provide the high-level\nFigure 5-1\nFile length distributions LOG scale (box height = sigma)", "78 Chapter 5: Formatting\nconcepts and algorithms. Detail should increase as we move downward, until at the end\nwe \ufb01nd the lowest level functions and details in the source \ufb01le.\nA newspaper is composed of many articles; most are very small. Some are a bit larger.\nVery few contain as much text as a page can hold. This makes the newspaper usable. If the\nnewspaper were just one long story containing a disorganized agglomeration of facts,\ndates, and names, then we simply would not read it.\nV ertical Openness Between Concepts\nNearly all code is read left to right and top to bottom. Each line represents an expression or\na clause, and each group of lines represents a complete thought. Those thoughts should be\nseparated from each other with blank lines. \nConsider, for example, Listing 5-1. There are blank lines that separate the package\ndeclaration, the import(s), and each of the functions. This extremely simple rule has a pro-\nfound effect on the visual layout of the code. Each blank line is a visual cue that identi\ufb01es\na new and separate concept. As you scan down the listing, your eye is drawn to the \ufb01rst\nline that follows a blank line.\nTaking those blank lines out, as in Listing 5-2, has a remarkably obscuring effect on the\nreadability of the code.\nListing 5-1 \nBoldWidget.java\npackage fitnesse.wikitext.widgets;\nimport java.util.regex.*;\npublic class BoldWidget extends ParentWidget {\n  public static final String REGEXP = \"'''.+?'''\";  private static final Pattern pattern = Pattern.compile(\"'''(.+?)'''\",    Pattern.MULTILINE + Pattern.DOTALL\n  );\n  public BoldWidget(ParentWidget parent, String text) throws Exception {\n    super(parent);    Matcher match = pattern.matcher(text);\n    match.find();\n    addChildWidgets(match.group(1));  }\n  public String render() throws Exception {\n    StringBuffer html = new StringBuffer(\"<b>\");    html.append(childHtml()).append(\"</b>\");    return html.toString();  }\n}", "79V ertical Formatting\nThis effect is even more pronounced when you unfocus your eyes. In the \ufb01rst example\nthe different groupings of lines pop out at you, whereas the second example looks like a\nmuddle. The difference between these two listings is a bit of vertical openness.\nV ertical Density\nIf openness separates concepts, then vertical density implies close association. So lines\nof code that are tightly related should appear vertically dense. Notice how the useless\ncomments in Listing 5-3 break the close association of the two instance variables.  \nListing 5-4 is much easier to read. It \ufb01ts in an \u201ceye-full,\u201d or at least it does for me. I\ncan look at it and see that this is a class with two variables and a method, without having to\nmove my head or eyes much. The previous listing forces me to use much more eye and\nhead motion to achieve the same level of comprehension. \nListing 5-2 \nBoldWidget.java\npackage fitnesse.wikitext.widgets;\nimport java.util.regex.*;public class BoldWidget extends ParentWidget {\n  public static final String REGEXP = \"'''.+?'''\";\n  private static final Pattern pattern = Pattern.compile(\"'''(.+?)'''\",    Pattern.MULTILINE + Pattern.DOTALL);  public BoldWidget(ParentWidget parent, String text) throws Exception {    super(parent);    Matcher match = pattern.matcher(text);\n    match.find();\n    addChildWidgets(match.group(1));}  public String render() throws Exception {    StringBuffer html = new StringBuffer(\"<b>\");    html.append(childHtml()).append(\"</b>\");\n    return html.toString();\n  }}\nListing 5-3 \npublic class ReporterConfig {\n  /**\n   * The class name of the reporter listener\n   */  private String m_className;\n  /**\n   * The properties of the reporter listener\n   */  private List<Property> m_properties = new ArrayList<Property>();\n  public void addProperty(Property property) {\n    m_properties.add(property);\n  }", "80 Chapter 5: Formatting\nV ertical Distance\nHave you ever chased your tail through a class, hopping from one function to the next,\nscrolling up and down the source \ufb01le, trying to divine how the functions relate and\noperate, only to get lost in a rat\u2019 s nest of confusion? Have you ever hunted up the chain of\ninheritance for the de\ufb01nition of a variable or function? This is frustrating because you are\ntrying to understand what the system does, but you are spending your time and mental\nenergy on trying to locate and remember where the pieces are.\nConcepts that are closely related should be kept vertically close to each other [G10].\nClearly this rule doesn\u2019t work for concepts that belong in separate \ufb01les. But then closely\nrelated concepts should not be separated into different \ufb01les unless you have a very good\nreason. Indeed, this is one of the reasons that protected variables should be avoided. \nFor those concepts that are so closely related that they belong in the same source \ufb01le,\ntheir vertical separation should be a measure of how important each is to the understand-\nability of the other. We want to avoid forcing our readers to hop around through our source\n\ufb01les and classes.\nVariable Declarations. Variables should be declared as close to their usage as possi-\nble. Because our functions are very short, local variables should appear a the top of each\nfunction, as in this longish function from Junit4.3.1. \nprivate static void readPreferences() {\nInputStream is= null;try {\nis= new FileInputStream(getPreferencesFile());setPreferences(new Properties(getPreferences()));\ngetPreferences().load(is);\n} catch (IOException e) {\ntry {\nif (is != null)\nis.close();\n} catch (IOException e1) {\n}\n}\n}\nControl variables for loops should usually be declared within the loop statement, as in this\ncute little function from the same source.\nListing 5-4 \npublic class ReporterConfig {\n  private String m_className;\n  private List<Property> m_properties = new ArrayList<Property>();\n  public void addProperty(Property property) {\n    m_properties.add(property);  }", "81V ertical Formatting\npublic int countTestCases() {\nint count= 0;for (Test each : tests)\ncount += each.countTestCases();\nreturn count;\n}\nIn rare cases a variable might be declared at the top of a block or just before a loop in a\nlong-ish function. Y ou can see such a variable in this snippet from the midst of a very long\nfunction in TestNG.\n...\nfor (XmlTest test : m_suite.getTests()) {\nTestRunner tr = m_runnerFactory.newTestRunner(this, test);\n      tr.addListener(m_textReporter);      m_testRunners.add(tr);\n      invoker = tr.getInvoker();\n      for (ITestNGMethod m : tr.getBeforeSuiteMethods()) {\n        beforeSuiteMethods.put(m.getMethod(), m);      }\n      for (ITestNGMethod m : tr.getAfterSuiteMethods()) {\n        afterSuiteMethods.put(m.getMethod(), m);      }    }\n...\nInstance variables,  on the other hand, should be declared at the top of the class. This\nshould not increase the vertical distance of these variables, because in a well-designed\nclass, they are used by many, if not all, of the methods of the class.\nThere have been many debates over where instance variables should go. In C++ we\ncommonly practiced the so-called scissors rule, which put all the instance variables at the\nbottom. The common convention in Java, however, is to put them all at the top of the class.\nI see no reason to follow any other convention. The important thing is for the instance vari-\nables to be declared in one well-known place. Everybody should know where to go to see\nthe declarations. \nConsider, for example, the strange case of the TestSuite class in JUnit 4.3.1. I have\ngreatly attenuated this class to make the point. If you look about halfway down the listing,\nyou will see two instance variables declared there. It would be hard to hide them in a better\nplace. Someone reading this code would have to stumble across the declarations by acci-\ndent (as I did). \npublic class TestSuite implements Test {\nstatic public Test createTest(Class<? extends TestCase> theClass, \n                                String name) {\n     ...\n}", "82 Chapter 5: Formatting\npublic static Constructor<? extends TestCase> \n  getTestConstructor(Class<? extends TestCase> theClass)   throws NoSuchMethodException {\n...\n}\npublic static Test warning(final String message) {\n...\n}\nprivate static String exceptionToString(Throwable t) {\n...\n}\nprivate String fName;\nprivate Vector<Test> fTests= new Vector<Test>(10);\npublic TestSuite() {\n}\n public TestSuite(final Class<? extends TestCase> theClass) {\n     ...\n}\npublic TestSuite(Class<? extends TestCase>  theClass, String name) {\n...\n}\n  ... ... ... ... ...\n}\nDependent Functions. If one function calls another, they should be vertically close,\nand the caller should be above the callee, if at all possible. This gives the program a natural\n\ufb02ow. If the convention is followed reliably, readers will be able to trust that function de\ufb01ni-\ntions will follow shortly after their use. Consider, for example, the snippet from FitNesse\nin Listing 5-5. Notice how the topmost function calls those below it and how they in turn\ncall those below them. This makes it easy to \ufb01nd the called functions and greatly enhances\nthe readability of the whole module.\nListing 5-5 \nWikiPageResponder.java\npublic class WikiPageResponder implements SecureResponder {\n  protected WikiPage page;  protected PageData pageData;\n  protected String pageTitle;\n  protected Request request;  protected PageCrawler crawler;\n  public Response makeResponse(FitNesseContext context, Request request)\n    throws Exception {\n    String pageName = getPageNameOrDefault(request, \"FrontPage\");", "83V ertical Formatting\nAs an aside, this snippet provides a nice example of keeping constants at the appropri-\nate level [G35]. The \"FrontPage\" constant could have been buried in the\ngetPageNameOrDefault function, but that would have hidden a well-known and expected\nconstant in an inappropriately low-level function. It was better to pass that constant down\nfrom the place where it makes sense to know it to the place that actually uses it.\n    loadPage(pageName, context);\n    if (page == null)      return notFoundResponse(context, request);\n    else\n      return makePageResponse(context);  }\n  private String getPageNameOrDefault(Request request, String defaultPageName)\n  {\n    String pageName = request.getResource();    if (StringUtil.isBlank(pageName))      pageName = defaultPageName;\n    return pageName;\n  }\n  protected void loadPage(String resource, FitNesseContext context)\n    throws Exception {\n    WikiPagePath path = PathParser.parse(resource);\n    crawler = context.root.getPageCrawler();    crawler.setDeadEndStrategy(new VirtualEnabledPageCrawler());    page = crawler.getPage(context.root, path);    if (page != null)\n      pageData = page.getData();\n  }\n  private Response notFoundResponse(FitNesseContext context, Request request)\n    throws Exception {\n    return new NotFoundResponder().makeResponse(context, request);\n  }\n  private SimpleResponse makePageResponse(FitNesseContext context)\n    throws Exception {\n    pageTitle = PathParser.render(crawler.getFullPath(page));\n    String html = makeHtml(context);\n    SimpleResponse response = new SimpleResponse();\n    response.setMaxAge(0);\n    response.setContent(html);\n    return response;  }...\nListing 5-5 (continued)\nWikiPageResponder.java", "84 Chapter 5: Formatting\nConceptual Af\ufb01nity. Certain bits of code want\nto be near other bits. They have a certain\nconceptual af\ufb01nity. The stronger that af\ufb01nity, the\nless vertical distance there should be between\nthem.\nAs we have seen, this af\ufb01nity might be based\non a direct dependence, such as one function call-\ning another, or a function using a variable. But\nthere are other possible causes of af\ufb01nity. Af\ufb01nity\nmight be caused because a group of functions per-\nform a similar operation. Consider this snippet of\ncode from Junit 4.3.1:\npublic class Assert {\nstatic public void assertTrue(String message, boolean condition) {\nif (!condition)\nfail(message);\n}\nstatic public void assertTrue(boolean condition) {\nassertTrue(null, condition);\n}\nstatic public void assertFalse(String message, boolean condition) {\nassertTrue(message, !condition);\n}\nstatic public void assertFalse(boolean condition) {\nassertFalse(null, condition);\n}\n...\nThese functions have a strong conceptual af\ufb01nity because they share a common naming\nscheme and perform variations of the same basic task. The fact that they call each other is\nsecondary. Even if they didn\u2019t, they would still want to be close together. \nV ertical Ordering\nIn general we want function call dependencies to point in the downward direction. That is,\na function that is called should be below a function that does the calling.2 This creates a\nnice \ufb02ow down the source code module from high level to low level. \nAs in newspaper articles, we expect the most important concepts to come \ufb01rst, and\nwe expect them to be expressed with the least amount of polluting detail. We expect the\nlow-level details to come last. This allows us to skim source \ufb01les, getting the gist from the\n2. This is the exact opposite of languages like Pascal, C, and C++ that enforce functions to be de\ufb01ned, or at least declared, \nbefore they are used.", "85Horizontal Formatting\n\ufb01rst few functions, without having to immerse ourselves in the details. Listing 5-5 is\norganized this way. Perhaps even better examples are Listing 15-5 on page 263, and List-\ning 3-7 on page 50.\nHorizontal Formatting\nHow wide should a line be? To answer that, let\u2019 s look at how wide lines are in typical pro-\ngrams. Again, we examine the seven different projects. Figure 5-2 shows the distribution\nof line lengths of all seven projects. The regularity is impressive, especially right around\n45 characters. Indeed, every size from 20 to 60 represents about 1 percent of the total\nnumber of lines. That\u2019 s 40 percent! Perhaps another 30 percent are less than 10 characters\nwide. Remember this is a log scale, so the linear appearance of the drop-off above 80 char-\nacters is really very signi\ufb01cant. Programmers clearly prefer short lines. \nThis suggests that we should strive to keep our lines short. The old Hollerith limit of\n80 is a bit arbitrary, and I\u2019m not opposed to lines edging out to 100 or even 120. But\nbeyond that is probably just careless. \nI used to follow the rule that you should never have to scroll to the right. But monitors\nare too wide for that nowadays, and younger programmers can shrink the font so small\nFigure 5-2\nJava line width distribution", "86 Chapter 5: Formatting\nthat they can get 200 characters across the screen. Don\u2019t do that. I personally set my limit\nat 120.\nHorizontal Openness and Density\nWe use horizontal white space to associate things that are strongly related and disassociate\nthings that are more weakly related. Consider the following function:\n  private void measureLine(String line) {\n    lineCount++;    int lineSize = line.length();\n    totalChars += lineSize;\n    lineWidthHistogram.addLine(lineSize, lineCount);    recordWidestLine(lineSize);  }\nI surrounded the assignment operators with white space to accentuate them. Assignment\nstatements have two distinct and major elements: the left side and the right side. The\nspaces make that separation obvious.\nOn the other hand, I didn\u2019t put spaces between the function names and the opening\nparenthesis. This is because the function and its arguments are closely related. Separat-\ning them makes them appear disjoined instead of conjoined. I separate arguments within\nthe function call parenthesis to accentuate the comma and show that the arguments are\nseparate.\nAnother use for white space is to accentuate the precedence of operators. \npublic class Quadratic {\n  public static double root1(double a, double b, double c) {    double determinant = determinant(a, b, c);\n    return (-b + Math.sqrt(determinant)) / (2*a);\n  }\n  public static double root2(int a, int b, int c) {\n    double determinant = determinant(a, b, c);\n    return (-b - Math.sqrt(determinant)) / (2*a); \n  }\n  private static double determinant(double a, double b, double c) {\n    return b*b - 4*a*c;\n  }}\nNotice how nicely the equations read. The factors have no white space between them\nbecause they are high precedence. The terms are separated by white space because addi-\ntion and subtraction are lower precedence.\nUnfortunately, most tools for reformatting code are blind to the precedence of\noperators and impose the same spacing throughout. So subtle spacings like those\nshown above tend to get lost after you reformat the code.", "87Horizontal Formatting\nHorizontal Alignment\nWhen I was an assembly language programmer,3 I used horizontal alignment to accentuate\ncertain structures. When I started coding in C, C++, and eventually Java, I continued to try\nto line up all the variable names in a set of declarations, or all the rvalues in a set of assign-\nment statements. My code might have looked like this:\npublic class FitNesseExpediter implements ResponseSender\n{\nprivate   Socket          socket;\nprivate   InputStream     input;\nprivate   OutputStream    output;private   Request         request;private   Response        response;private   FitNesseContext context;\nprotected long            requestParsingTimeLimit;\nprivate   long            requestProgress;private   long            requestParsingDeadline;private   boolean         hasError;\npublic FitNesseExpediter(Socket          s, \n                         FitNesseContext context) throws Exception{\nthis.context =            context;socket =                  s;\ninput =                   s.getInputStream();\noutput =                  s.getOutputStream();requestParsingTimeLimit = 10000;\n}\nI have found, however, that this kind of alignment is not useful. The alignment seems to\nemphasize the wrong things and leads my eye away from the true intent. For example, in\nthe list of declarations above you are tempted to read down the list of variable names with-\nout looking at their types. Likewise, in the list of assignment statements you are tempted to\nlook down the list of rvalues without ever seeing the assignment operator. To make matters\nworse, automatic reformatting tools usually eliminate this kind of alignment. \nSo, in the end, I don\u2019t do this kind of thing anymore. Nowadays I prefer unaligned\ndeclarations and assignments, as shown below, because they point out an important de\ufb01-\nciency. If I have long lists that need to be aligned, the problem is the length of the lists, not\nthe lack of alignment. The length of the list of declarations in FitNesseExpediter below\nsuggests that this class should be split up.\npublic class FitNesseExpediter implements ResponseSender\n{\nprivate Socket socket;\nprivate InputStream input;\nprivate OutputStream output;private Request request;\n3. Who am I kidding? I still am an assembly language programmer. Y ou can take the boy away from the metal, but you can\u2019t \ntake the metal out of the boy!", "88 Chapter 5: Formatting\nprivate Response response;\nprivate FitNesseContext context;protected long requestParsingTimeLimit;\nprivate long requestProgress;\nprivate long requestParsingDeadline;private boolean hasError;\npublic FitNesseExpediter(Socket s, FitNesseContext context) throws Exception\n{\nthis.context = context;socket = s;input = s.getInputStream();output = s.getOutputStream();requestParsingTimeLimit = 10000;\n}\nIndentation\nA source \ufb01le is a hierarchy rather like an outline. There is information that pertains to the\n\ufb01le as a whole, to the individual classes within the \ufb01le, to the methods within the classes,\nto the blocks within the methods, and recursively to the blocks within the blocks. Each\nlevel of this hierarchy is a scope into which names can be declared and in which declara-\ntions and executable statements are interpreted. \nTo make this hierarchy of scopes visible, we indent the lines of source code in pro-\nportion to their position in the hiearchy. Statements at the level of the \ufb01le, such as most\nclass declarations, are not indented at all. Methods within a class are indented one level\nto the right of the class. Implementations of those methods are implemented one level to\nthe right of the method declaration. Block implementations are implemented one level\nto the right of their containing block, and so on.\nProgrammers rely heavily on this indentation scheme. They visually line up lines on\nthe left to see what scope they appear in. This allows them to quickly hop over scopes,\nsuch as implementations of if or while statements, that are not relevant to their current\nsituation. They scan the left for new method declarations, new variables, and even new\nclasses. Without indentation, programs would be virtually unreadable by humans. \nConsider the following programs that are syntactically and semantically identical:\npublic class FitNesseServer implements SocketServer { private FitNesseContext \ncontext; public FitNesseServer(FitNesseContext context) { this.context = context; } public void serve(Socket s) { serve(s, 10000); } public void \nserve(Socket s, long requestTimeout) { try { FitNesseExpediter sender = new \nFitNesseExpediter(s, context); sender.setRequestParsingTimeLimit(requestTimeout); sender.start(); } catch(Exception e) { e.printStackTrace(); } } }\n-----\npublic class FitNesseServer implements SocketServer {\n  private FitNesseContext context;", "89Horizontal Formatting\n  public FitNesseServer(FitNesseContext context) {\n    this.context = context;  }\n  public void serve(Socket s) {\n    serve(s, 10000);  }\n  public void serve(Socket s, long requestTimeout) {\n    try {      FitNesseExpediter sender = new FitNesseExpediter(s, context);      sender.setRequestParsingTimeLimit(requestTimeout);      sender.start();\n    }\n    catch (Exception e) {      e.printStackTrace();    }  }\n}\nY our eye can rapidly discern the structure of the indented \ufb01le. Y ou can almost instantly\nspot the variables, constructors, accessors, and methods. It takes just a few seconds to real-\nize that this is some kind of simple front end to a socket, with a time-out. The unindented\nversion, however, is virtually impenetrable without intense study. \nBreaking Indentation. It is sometimes tempting to break the indentation rule for short\nif statements, short while loops, or short functions. Whenever I have succumbed to this\ntemptation, I have almost always gone back and put the indentation back in. So I avoid col-\nlapsing scopes down to one line like this:\npublic class CommentWidget extends TextWidget\n{\npublic static final String REGEXP = \"^#[^\\r\\n]*(?:(?:\\r\\n)|\\n|\\r)?\";\npublic CommentWidget(ParentWidget parent, String text){super(parent, text);}\npublic String render() throws Exception {return \"\"; }\n}\nI prefer to expand and indent the scopes instead, like this:\npublic class CommentWidget extends TextWidget {  public static final String REGEXP = \"^#[^\\r\\n]*(?:(?:\\r\\n)|\\n|\\r)?\";\n  public CommentWidget(ParentWidget parent, String text) {\n    super(parent, text);  }\n  public String render() throws Exception {\n    return \"\";\n  }}", "90 Chapter 5: Formatting\nDummy Scopes\nSometimes the body of a while or for statement is a dummy, as shown below. I don\u2019t like\nthese kinds of structures and try to avoid them. When I can\u2019t avoid them, I make sure that\nthe dummy body is properly indented and surrounded by braces. I can\u2019t tell you how\nmany times I\u2019ve been fooled by a semicolon silently sitting at the end of a while loop on\nthe same line. Unless you make that semicolon visible by indenting it on it\u2019 s own line, it\u2019 s\njust too hard to see.\nwhile (dis.read(buf, 0, readBufferSize) != -1) \n  ;\nTeam Rules\nThe title of this section is a play on\nwords. Every programmer has his own\nfavorite formatting rules, but if he works\nin a team, then the team rules. \nA team of developers should agree\nupon a single formatting style, and then\nevery member of that team should use\nthat style. We want the software to have a\nconsistent style. We don\u2019t want it to appear to have been written by a bunch of disagreeing\nindividuals.\nWhen I started the FitNesse project back in 2002, I sat down with the team to work\nout a coding style. This took about 10 minutes. We decided where we\u2019 d put our braces,\nwhat our indent size would be, how we would name classes, variables, and methods, and\nso forth. Then we encoded those rules into the code formatter of our IDE and have stuck\nwith them ever since. These were not the rules that I prefer; they were rules decided by the\nteam. As a member of that team I followed them when writing code in the FitNesse\nproject.\nRemember, a good software system is composed of a set of documents that read\nnicely. They need to have a consistent and smooth style. The reader needs to be able to\ntrust that the formatting gestures he or she has seen in one source \ufb01le will mean the same\nthing in others. The last thing we want to do is add more complexity to the source code by\nwriting it in a jumble of different individual styles.\nUncle Bob\u2019s Formatting Rules\nThe rules I use personally are very simple and are illustrated by the code in Listing 5-6.\nConsider this an example of how code makes the best coding standard document.", "91Uncle Bob\u2019s Formatting Rules\nListing 5-6 \nCodeAnalyzer.java\npublic class CodeAnalyzer implements JavaFileAnalysis {\n  private int lineCount;  private int maxLineWidth;\n  private int widestLineNumber;\n  private LineWidthHistogram lineWidthHistogram;  private int totalChars;\n  public CodeAnalyzer() {\n    lineWidthHistogram = new LineWidthHistogram();\n  }\n  public static List<File> findJavaFiles(File parentDirectory) {\n    List<File> files = new ArrayList<File>();\n    findJavaFiles(parentDirectory, files);\n    return files;  }\n  private static void findJavaFiles(File parentDirectory, List<File> files) {\n    for (File file : parentDirectory.listFiles()) {\n      if (file.getName().endsWith(\".java\"))        files.add(file);      else if (file.isDirectory())        findJavaFiles(file, files);\n    }\n  }\n  public void analyzeFile(File javaFile) throws Exception {\n    BufferedReader br = new BufferedReader(new FileReader(javaFile));\n    String line;\n    while ((line = br.readLine()) != null)      measureLine(line);  }\n  private void measureLine(String line) {\n    lineCount++;    int lineSize = line.length();    totalChars += lineSize;\n    lineWidthHistogram.addLine(lineSize, lineCount);\n    recordWidestLine(lineSize);  }\n  private void recordWidestLine(int lineSize) {\n    if (lineSize > maxLineWidth) {\n      maxLineWidth = lineSize;      widestLineNumber = lineCount;    }  }\n  public int getLineCount() {\n    return lineCount;  }\n  public int getMaxLineWidth() {\n    return maxLineWidth;  }", "92 Chapter 5: Formatting\n  public int getWidestLineNumber() {\n    return widestLineNumber;  }\n  public LineWidthHistogram getLineWidthHistogram() {\n    return lineWidthHistogram;  }\n  public double getMeanLineWidth() {\n    return (double)totalChars/lineCount;  }\n  public int getMedianLineWidth() {\n    Integer[] sortedWidths = getSortedWidths();\n    int cumulativeLineCount = 0;    for (int width : sortedWidths) {      cumulativeLineCount += lineCountForWidth(width);\n      if (cumulativeLineCount > lineCount/2)\n        return width;    }    throw new Error(\"Cannot get here\");  }\n  private int lineCountForWidth(int width) {\n    return lineWidthHistogram.getLinesforWidth(width).size();  }\n  private Integer[] getSortedWidths() {\n    Set<Integer> widths = lineWidthHistogram.getWidths();    Integer[] sortedWidths = (widths.toArray(new Integer[0]));    Arrays.sort(sortedWidths);    return sortedWidths;\n  }\n}\nListing 5-6 (continued)\nCodeAnalyzer.java", "93\n6\nObjects and Data Structures\nThere is a reason that we keep our variables private. We don\u2019t want anyone else to depend\non them. We want to keep the freedom to change their type or implementation on a whim\nor an impulse. Why, then, do so many programmers automatically add getters and setters\nto their objects, exposing their private variables as if they were public?\nData Abstraction\nConsider the difference between Listing 6-1 and Listing 6-2. Both represent the data of a\npoint on the Cartesian plane. And yet one exposes its implementation and the other com-\npletely hides it.", "94 Chapter 6: Objects and Data Structures\nThe beautiful thing about Listing 6-2 is that there is no way you can tell whether the\nimplementation is in rectangular or polar coordinates. It might be neither! And yet the\ninterface still unmistakably represents a data structure.\nBut it represents more than just a data structure. The methods enforce an access\npolicy. Y ou can read the individual coordinates independently, but you must set the coordi-\nnates together as an atomic operation. \nListing 6-1, on the other hand, is very clearly implemented in rectangular coordinates,\nand it forces us to manipulate those coordinates independently. This exposes implementa-\ntion. Indeed, it would expose implementation even if the variables were private and we\nwere using single variable getters and setters. \nHiding implementation is not just a matter of putting a layer of functions between\nthe variables. Hiding implementation is about abstractions! A class does not simply\npush its variables out through getters and setters. Rather it exposes abstract interfaces\nthat allow its users to manipulate the essence of the data, without having to know its\nimplementation.\nConsider Listing 6-3 and Listing 6-4. The \ufb01rst uses concrete terms to communicate\nthe fuel level of a vehicle, whereas the second does so with the abstraction of percentage.\nIn the concrete case you can be pretty sure that these are just accessors of variables. In the\nabstract case you have no clue at all about the form of the data.  \nListing 6-1\nConcrete Point\npublic class Point {\n  public double x;  public double y;\n}\nListing 6-2\nAbstract Point\npublic interface Point {\n  double getX();  double getY();\n  void setCartesian(double x, double y);\n  double getR();  double getTheta();  void setPolar(double r, double theta);}\nListing 6-3\nConcrete Vehicle\npublic interface Vehicle {\n  double getFuelTankCapacityInGallons();  double getGallonsOfGasoline();\n}", "95Data/Object Anti-Symmetry\nIn both of the above cases the second option is preferable. We do not want to expose\nthe details of our data. Rather we want to express our data in abstract terms. This is not\nmerely accomplished by using interfaces and/or getters and setters. Serious thought needs\nto be put into the best way to represent the data that an object contains. The worst option is\nto blithely add getters and setters.\nData/Object Anti-Symmetry\nThese two examples show the difference between objects and data structures. Objects hide\ntheir data behind abstractions and expose functions that operate on that data. Data struc-\nture expose their data and have no meaningful functions. Go back and read that again.\nNotice the complimentary nature of the two de\ufb01nitions. They are virtual opposites. This\ndifference may seem trivial, but it has far-reaching implications.\nConsider, for example, the procedural shape example in Listing 6-5. The Geometry\nclass operates on the three shape classes. The shape classes are simple data structures\nwithout any behavior. All the behavior is in the Geometry class.\nListing 6-4\nAbstract Vehicle\npublic interface Vehicle {\n  double getPercentFuelRemaining();}\nListing 6-5 \nProcedural Shape\npublic class Square {\n  public Point topLeft;  public double side;\n}\npublic class Rectangle {\n  public Point topLeft;  public double height;\n  public double width;\n}\npublic class Circle {\n  public Point center;\n  public double radius;\n}\npublic class Geometry {\n  public final double PI = 3.141592653589793;\n  public double area(Object shape) throws NoSuchShapeException \n  {\n    if (shape instanceof Square) {\n      Square s = (Square)shape;      return s.side * s.side;    }", "96 Chapter 6: Objects and Data Structures\nObject-oriented programmers might wrinkle their noses at this and complain that it\nis procedural\u2014and they\u2019 d be right. But the sneer may not be warranted. Consider what\nwould happen if a perimeter() function were added to Geometry. The shape classes would\nbe unaffected! Any other classes that depended upon the shapes would also be unaffected!\nOn the other hand, if I add a new shape, I must change all the functions in Geometry to\ndeal with it. Again, read that over. Notice that the two conditions are diametrically\nopposed.\nNow consider the object-oriented solution in Listing 6-6. Here the area() method is\npolymorphic. No Geometry class is necessary. So if I add a new shape, none of the existing\nfunctions are affected, but if I add a new function all of the shapes must be changed!1\n    else if (shape instanceof Rectangle) {\n      Rectangle r = (Rectangle)shape;      return r.height * r.width;\n    }\n    else if (shape instanceof Circle) {      Circle c = (Circle)shape;      return PI * c.radius * c.radius;    }    throw new NoSuchShapeException();\n  }\n}\nListing 6-6 \nPolymorphic Shapes\npublic class Square implements Shape {\n  private Point topLeft;  private double side;\n  public double area() {\n    return side*side;  }}\npublic class Rectangle implements Shape {\n  private Point topLeft;  private double height;  private double width;\n  public double area() {\n    return height * width;  }}\n1. There are ways around this that are well known to experienced object-oriented designers: V ISITOR, or dual-dispatch, for \nexample. But these techniques carry costs of their own and generally return the structure to that of a procedural program.\nListing 6-5 (continued)\nProcedural Shape", "97The Law of Demeter\nAgain, we see the complimentary nature of these two de\ufb01nitions; they are virtual\nopposites! This exposes the fundamental dichotomy between objects and data structures: \nProcedural code (code using data structures) makes it easy to add new functions without\nchanging the existing data structures. OO code, on the other hand, makes it easy to add\nnew classes without changing existing functions.\nThe complement is also true: \nProcedural code makes it hard to add new data structures because all the functions must\nchange. OO code makes it hard to add new functions because all the classes must change.\nSo, the things that are hard for OO are easy for procedures, and the things that are\nhard for procedures are easy for OO!\nIn any complex system there are going to be times when we want to add new data\ntypes rather than new functions. For these cases objects and OO are most appropriate. On\nthe other hand, there will also be times when we\u2019ll want to add new functions as opposed\nto data types. In that case procedural code and data structures will be more appropriate.\nMature programmers know that the idea that everything is an object is a myth. Some-\ntimes you really do want simple data structures with procedures operating on them.\nThe Law of Demeter\nThere is a well-known heuristic called the Law of Demeter2 that says a module should not\nknow about the innards of the objects it manipulates. As we saw in the last section, objects\nhide their data and expose operations. This means that an object should not expose its\ninternal structure through accessors because to do so is to expose, rather than to hide, its\ninternal structure. \nMore precisely, the Law of Demeter says that a method f of a class C should only call\nthe methods of these:\n\u2022C\n\u2022 An object created by f\npublic class Circle implements Shape {\n  private Point center;\n  private double radius;\n  public final double PI = 3.141592653589793;\n  public double area() {\n    return PI * radius * radius;\n  }\n}\n2. http://en.wikipedia.org/wiki/Law_of_Demeter \nListing 6-6 (continued)\nPolymorphic Shapes", "98 Chapter 6: Objects and Data Structures\n\u2022 An object passed as an argument to f\n\u2022 An object held in an instance variable of C\nThe method should not invoke methods on objects that are returned by any of the\nallowed functions. In other words, talk to friends, not to strangers.\nThe following code 3 appears to violate the Law of Demeter (among other things)\nbecause it calls the getScratchDir() function on the return value of getOptions() and then\ncalls getAbsolutePath() on the return value of getScratchDir().\nfinal String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();\nTrain Wrecks\nThis kind of code is often called a train wreckbecause it look like a bunch of coupled train\ncars. Chains of calls like this are generally considered to be sloppy style and should be\navoided [G36]. It is usually best to split them up as follows:\nOptions opts = ctxt.getOptions();\nFile scratchDir = opts.getScratchDir();final String outputDir = scratchDir.getAbsolutePath();\nAre these two snippets of code viola-\ntions of the Law of Demeter? Certainly\nthe containing module knows that the\nctxt object contains options, which con-\ntain a scratch directory, which has an\nabsolute path. That\u2019 s a lot of knowledge\nfor one function to know. The calling\nfunction knows how to navigate through\na lot of different objects.\nWhether this is a violation of Demeter depends on whether or not ctxt, Options, and\nScratchDir are objects or data structures. If they are objects, then their internal structure\nshould be hidden rather than exposed, and so knowledge of their innards is a clear viola-\ntion of the Law of Demeter. On the other hand, if ctxt, Options, and ScratchDir are just\ndata structures with no behavior, then they naturally expose their internal structure, and so\nDemeter does not apply.\nThe use of accessor functions confuses the issue. If the code had been written as fol-\nlows, then we probably wouldn\u2019t be asking about Demeter violations.\nfinal String outputDir = ctxt.options.scratchDir.absolutePath;\nThis issue would be a lot less confusing if data structures simply had public variables\nand no functions, whereas objects had private variables and public functions. However,\n3. Found somewhere in the apache framework.", "99The Law of Demeter\nthere are frameworks and standards (e.g., \u201cbeans\u201d) that demand that even simple data\nstructures have accessors and mutators.\nHybrids\nThis confusion sometimes leads to unfortunate hybrid structures that are half object and\nhalf data structure. They have functions that do signi\ufb01cant things, and they also have either\npublic variables or public accessors and mutators that, for all intents and purposes, make\nthe private variables public, tempting other external functions to use those variables the\nway a procedural program would use a data structure.4\nSuch hybrids make it hard to add new functions but also make it hard to add new data\nstructures. They are the worst of both worlds. Avoid creating them. They are indicative of a\nmuddled design whose authors are unsure of\u2014or worse, ignorant of\u2014whether they need\nprotection from functions or types.\nHiding Structure\nWhat if ctxt, options, and scratchDir are objects with real behavior? Then, because\nobjects are supposed to hide their internal structure, we should not be able to navigate\nthrough them. How then would we get the absolute path of the scratch directory? \nctxt.getAbsolutePathOfScratchDirectoryOption();\nor\nctx.getScratchDirectoryOption().getAbsolutePath()\nThe \ufb01rst option could lead to an explosion of methods in the ctxt object. The second pre-\nsumes that getScratchDirectoryOption() returns a data structure, not an object. Neither\noption feels good.\nIf ctxt is an object, we should be telling it to do something; we should not be asking it\nabout its internals. So why did we want the absolute path of the scratch directory? What\nwere we going to do with it? Consider this code from (many lines farther down in) the\nsame module:\nString outFile = outputDir + \"/\" + className.replace('.', '/') + \".class\";\nFileOutputStream fout = new FileOutputStream(outFile);BufferedOutputStream bos = new BufferedOutputStream(fout);\nThe admixture of different levels of detail [G34][G6] is a bit troubling. Dots, slashes,\n\ufb01le extensions, and File objects should not be so carelessly mixed together, and mixed\nwith the enclosing code. Ignoring that, however, we see that the intent of getting the abso-\nlute path of the scratch directory was to create a scratch \ufb01le of a given name.\n4. This is sometimes called Feature Envy from [Refactoring].", "100 Chapter 6: Objects and Data Structures\nSo, what if we told the ctxt object to do this? \nBufferedOutputStream bos = ctxt.createScratchFileStream(classFileName);\nThat seems like a reasonable thing for an object to do! This allows ctxt to hide its\ninternals and prevents the current function from having to violate the Law of Demeter by\nnavigating through objects it shouldn\u2019t know about.\nData Transfer Objects\nThe quintessential form of a data structure is a class with public variables and no func-\ntions. This is sometimes called a data transfer object, or DTO. DTOs are very useful struc-\ntures, especially when communicating with databases or parsing messages from sockets,\nand so on. They often become the \ufb01rst in a series of translation stages that convert raw data\nin a database into objects in the application code. \nSomewhat more common is the \u201cbean\u201d form shown in Listing 6-7. Beans have private\nvariables manipulated by getters and setters. The quasi-encapsulation of beans seems to\nmake some OO purists feel better but usually provides no other bene\ufb01t.\nListing 6-7 \naddress.java\npublic class Address {\n  private String street;  private String streetExtra;\n  private String city;\n  private String state;  private String zip;\n  public Address(String street, String streetExtra, \n                  String city, String state, String zip) {\n    this.street = street;    this.streetExtra = streetExtra;    this.city = city;\n    this.state = state;\n    this.zip = zip;  }\n  public String getStreet() {\n    return street;\n  }\n  public String getStreetExtra() {\n    return streetExtra;\n  }\n  public String getCity() {\n    return city;  }", "101Bibliography\nActive Record\nActive Records are special forms of DTOs. They are data structures with public (or bean-\naccessed) variables; but they typically have navigational methods like save and find. T ypi-\ncally these Active Records are direct translations from database tables, or other data\nsources.\nUnfortunately we often \ufb01nd that developers try to treat these data structures as though\nthey were objects by putting business rule methods in them. This is awkward because it\ncreates a hybrid between a data structure and an object. \nThe solution, of course, is to treat the Active Record as a data structure and to create\nseparate objects that contain the business rules and that hide their internal data (which are\nprobably just instances of the Active Record).\nConclusion\nObjects expose behavior and hide data. This makes it easy to add new kinds of objects\nwithout changing existing behaviors. It also makes it hard to add new behaviors to existing\nobjects. Data structures expose data and have no signi\ufb01cant behavior. This makes it easy to\nadd new behaviors to existing data structures but makes it hard to add new data structures\nto existing functions.\nIn any given system we will sometimes want the \ufb02exibility to add new data types, and\nso we prefer objects for that part of the system. Other times we will want the \ufb02exibility to\nadd new behaviors, and so in that part of the system we prefer data types and procedures.\nGood software developers understand these issues without prejudice and choose the\napproach that is best for the job at hand.\nBibliography\n[Refactoring]:  Refactoring: Improving the Design of Existing Code, Martin Fowler et al.,\nAddison-Wesley, 1999.\n  public String getState() {\n    return state;  }\n  public String getZip() {\n    return zip;  }}\nListing 6-7 (continued)\naddress.java", "This page intentionally left blank", "103\n7\nError Handling\nby Michael Feathers\nIt might seem odd to have a section about error handling in a book about clean code. Error\nhandling is just one of those things that we all have to do when we program. Input can be\nabnormal and devices can fail. In short, things can go wrong, and when they do, we as pro-\ngrammers are responsible for making sure that our code does what it needs to do.\nThe connection to clean code, however, should be clear. Many code bases are com-\npletely dominated by error handling. When I say dominated, I don\u2019t mean that error han-\ndling is all that they do. I mean that it is nearly impossible to see what the code does\nbecause of all of the scattered error handling. Error handling is important, but if it\nobscures logic, it\u2019 s wrong.\nIn this chapter I\u2019ll outline a number of techniques and considerations that you can use\nto write code that is both clean and robust\u2014code that handles errors with grace and style.", "104 Chapter 7: Error Handling\nUse Exceptions Rather Than Return Codes\nBack in the distant past there were many languages that didn\u2019t have exceptions. In those\nlanguages the techniques for handling and reporting errors were limited. Y ou either set an\nerror \ufb02ag or returned an error code that the caller could check. The code in Listing 7-1\nillustrates these approaches.\nThe problem with these approaches is that they clutter the caller. The caller must\ncheck for errors immediately after the call. Unfortunately, it\u2019 s easy to forget. For this rea-\nson it is better to throw an exception when you encounter an error. The calling code is\ncleaner. Its logic is not obscured by error handling.\nListing 7-2 shows the code after we\u2019ve chosen to throw exceptions in methods that\ncan detect errors.\nListing 7-1 \nDeviceController.java\npublic class DeviceController {\n  ...  public void sendShutDown() {\n    DeviceHandle handle = getHandle(DEV1);\n    // Check the state of the device    if (handle != DeviceHandle.INVALID) {      // Save the device status to the record field      retrieveDeviceRecord(handle);\n      // If not suspended, shut down\n      if (record.getStatus() != DEVICE_SUSPENDED) {        pauseDevice(handle);\n        clearDeviceWorkQueue(handle);\n        closeDevice(handle);      } else {        logger.log(\"Device suspended.  Unable to shut down\");      }\n    } else {\n      logger.log(\"Invalid handle for: \" + DEV1.toString());    }  }\n  ...\n}\nListing 7-2 \nDeviceController.java (with exceptions)\npublic class DeviceController {\n  ...\n  public void sendShutDown() {\n    try {      tryToShutDown();    } catch (DeviceShutDownError e) {      logger.log(e);\n    }\n  }", "105Write Y our Try-Catch-Finally Statement First\nNotice how much cleaner it is. This isn\u2019t just a matter of aesthetics. The code is better\nbecause two concerns that were tangled, the algorithm for device shutdown and error han-\ndling, are now separated. Y ou can look at each of those concerns and understand them\nindependently.\nWrite Y our Try-Catch-Finally Statement First\nOne of the most interesting things about exceptions is that they de\ufb01ne a scope within your\nprogram. When you execute code in the try portion of a try-catch-finally statement, you\nare stating that execution can abort at any point and then resume at the catch.\nIn a way, try blocks are like transactions. Y our catch has to leave your program in a\nconsistent state, no matter what happens in the try. For this reason it is good practice to\nstart with a try-catch-finally statement when you are writing code that could throw\nexceptions. This helps you de\ufb01ne what the user of that code should expect, no matter what\ngoes wrong with the code that is executed in the try.\nLet\u2019 s look at an example. We need to write some code that accesses a \ufb01le and reads\nsome serialized objects.\nWe start with a unit test that shows that we\u2019ll get an exception when the \ufb01le doesn\u2019t exist:\n  @Test(expected = StorageException.class)\n  public void retrieveSectionShouldThrowOnInvalidFileName() {    sectionStore.retrieveSection(\"invalid - file\");\n  }\nThe test drives us to create this stub:\npublic List<RecordedGrip> retrieveSection(String sectionName) {\n  // dummy return until we have a real implementation  return new ArrayList<RecordedGrip>();\n}\n  private void tryToShutDown() throws DeviceShutDownError {\n    DeviceHandle handle = getHandle(DEV1);    DeviceRecord record = retrieveDeviceRecord(handle);\n    pauseDevice(handle);\n    clearDeviceWorkQueue(handle);    closeDevice(handle);  }\n  private DeviceHandle getHandle(DeviceID id) {\n    ...    throw new DeviceShutDownError(\"Invalid handle for: \" + id.toString());    ...\n  }\n  ...\n}\nListing 7-2 (continued)\nDeviceController.java (with exceptions)", "106 Chapter 7: Error Handling\nOur test fails because it doesn\u2019t throw an exception. Next, we change our implementa-\ntion so that it attempts to access an invalid \ufb01le. This operation throws an exception:\npublic List<RecordedGrip> retrieveSection(String sectionName) {\n  try {    FileInputStream stream = new FileInputStream(sectionName)\n  } catch (Exception e) {\n    throw new StorageException(\"retrieval error\", e);  }  return new ArrayList<RecordedGrip>(); }\nOur test passes now because we\u2019ve caught the exception. At this point, we can refac-\ntor. We can narrow the type of the exception we catch to match the type that is actually\nthrown from the FileInputStream constructor: FileNotFoundException:\npublic List<RecordedGrip> retrieveSection(String sectionName) {\n  try {    FileInputStream stream = new FileInputStream(sectionName);\n    stream.close();\n  } catch (FileNotFoundException e) {    throw new StorageException(\"retrieval error\u201d, e);  }  return new ArrayList<RecordedGrip>();\n}\nNow that we\u2019ve de\ufb01ned the scope with a try-catch structure, we can use TDD to build\nup the rest of the logic that we need. That logic will be added between the creation of the\nFileInputStream and the close, and can pretend that nothing goes wrong.\nTry to write tests that force exceptions, and then add behavior to your handler to sat-\nisfy your tests. This will cause you to build the transaction scope of the try block \ufb01rst and\nwill help you maintain the transaction nature of that scope.\nUse Unchecked Exceptions\nThe debate is over. For years Java programmers have debated over the bene\ufb01ts and liabili-\nties of checked exceptions. When checked exceptions were introduced in the \ufb01rst version\nof Java, they seemed like a great idea. The signature of every method would list all of the\nexceptions that it could pass to its caller. Moreover, these exceptions were part of the type\nof the method. Y our code literally wouldn\u2019t compile if the signature didn\u2019t match what your\ncode could do. \nAt the time, we thought that checked exceptions were a great idea; and yes, they can\nyield some bene\ufb01t. However, it is clear now that they aren\u2019t necessary for the production of\nrobust software. C# doesn\u2019t have checked exceptions, and despite valiant attempts, C++\ndoesn\u2019t either. Neither do Python or Ruby. Y et it is possible to write robust software in all\nof these languages. Because that is the case, we have to decide\u2014really\u2014whether checked\nexceptions are worth their price.", "107De\ufb01ne Exception Classes in Terms of a Caller\u2019s Needs\nWhat price? The price of checked exceptions is an Open/Closed Principle 1 violation.\nIf you throw a checked exception from a method in your code and the catch is three levels\nabove, you must declare that exception in the signature of each method between you and\nthe catch. This means that a change at a low level of the software can force signature\nchanges on many higher levels. The changed modules must be rebuilt and redeployed,\neven though nothing they care about changed. \nConsider the calling hierarchy of a large system. Functions at the top call functions\nbelow them, which call more functions below them, ad in\ufb01nitum. Now let\u2019 s say one of the\nlowest level functions is modi\ufb01ed in such a way that it must throw an exception. If that\nexception is checked, then the function signature must add a throws clause. But this\nmeans that every function that calls our modi\ufb01ed function must also be modi\ufb01ed either to\ncatch the new exception or to append the appropriate throws clause to its signature. Ad\nin\ufb01nitum. The net result is a cascade of changes that work their way from the lowest levels\nof the software to the highest! Encapsulation is broken because all functions in the path\nof a throw must know about details of that low-level exception. Given that the purpose of\nexceptions is to allow you to handle errors at a distance, it is a shame that checked excep-\ntions break encapsulation in this way. \nChecked exceptions can sometimes be useful if you are writing a critical library: Y ou\nmust catch them. But in general application development the dependency costs outweigh\nthe bene\ufb01ts.\nProvide Context with Exceptions\nEach exception that you throw should provide enough context to determine the source and\nlocation of an error. In Java, you can get a stack trace from any exception; however, a stack\ntrace can\u2019t tell you the intent of the operation that failed. \nCreate informative error messages and pass them along with your exceptions. Men-\ntion the operation that failed and the type of failure. If you are logging in your application,\npass along enough information to be able to log the error in your catch.\nDe\ufb01ne Exception Classes in Terms of a Caller\u2019s Needs\nThere are many ways to classify errors. We can classify them by their source: Did they\ncome from one component or another? Or their type: Are they device failures, network\nfailures, or programming errors? However, when we de\ufb01ne exception classes in an appli-\ncation, our most important concern should be how they are caught.\n1. [Martin].", "108 Chapter 7: Error Handling\nLet\u2019 s look at an example of poor exception classi\ufb01cation. Here is a try-catch-finally\nstatement for a third-party library call. It covers all of the exceptions that the calls can\nthrow:\n    ACMEPort port = new ACMEPort(12);\n    try {\n      port.open();\n    } catch (DeviceResponseException e) {      reportPortError(e);      logger.log(\"Device response exception\", e);    } catch (ATM1212UnlockedException e) {\n      reportPortError(e);\n      logger.log(\"Unlock exception\", e);    } catch (GMXError e) {      reportPortError(e);      logger.log(\"Device response exception\");    } finally {      \u2026    }\nThat statement contains a lot of duplication, and we shouldn\u2019t be surprised. In most\nexception handling situations, the work that we do is relatively standard regardless of the\nactual cause. We have to record an error and make sure that we can proceed.\nIn this case, because we know that the work that we are doing is roughly the same\nregardless of the exception, we can simplify our code considerably by wrapping the API\nthat we are calling and making sure that it returns a common exception type:\n    LocalPort port = new LocalPort(12);\n    try {      port.open();\n    } catch (PortDeviceFailure e) {\n      reportError(e);      logger.log(e.getMessage(), e);    } finally {      \u2026\n    }\nOur LocalPort class is just a simple wrapper that catches and translates exceptions\nthrown by the ACMEPort class:\npublic class LocalPort {\n  private ACMEPort innerPort;\n  public LocalPort(int portNumber) {\n    innerPort = new ACMEPort(portNumber);  }\n  public void open() {\n    try {\n      innerPort.open();    } catch (DeviceResponseException e) {      throw new PortDeviceFailure(e);    } catch (ATM1212UnlockedException e) {\n      throw new PortDeviceFailure(e);\n    } catch (GMXError e) {", "109De\ufb01ne the Normal Flow\n      throw new PortDeviceFailure(e);\n    }  }\n  \u2026\n}\nWrappers like the one we de\ufb01ned for ACMEPort can be very useful. In fact, wrapping\nthird-party APIs is a best practice. When you wrap a third-party API, you minimize your\ndependencies upon it: Y ou can choose to move to a different library in the future without\nmuch penalty. Wrapping also makes it easier to mock out third-party calls when you are\ntesting your own code.\nOne \ufb01nal advantage of wrapping is that you aren\u2019t tied to a particular vendor\u2019 s API\ndesign choices. Y ou can de\ufb01ne an API that you feel comfortable with. In the preceding\nexample, we de\ufb01ned a single exception type for port device failure and found that we\ncould write much cleaner code.\nOften a single exception class is \ufb01ne for a particular area of code. The information\nsent with the exception can distinguish the errors. Use different classes only if there are\ntimes when you want to catch one exception and allow the other one to pass through.\nDe\ufb01ne the Normal Flow\nIf you follow the advice in the preceding\nsections, you\u2019ll end up with a good amount\nof separation between your business logic\nand your error handling. The bulk of your\ncode will start to look like a clean\nunadorned algorithm. However, the pro-\ncess of doing this pushes error detection\nto the edges of your program. Y ou wrap\nexternal APIs so that you can throw your\nown exceptions, and you de\ufb01ne a handler above your code so that you can deal with any\naborted computation. Most of the time this is a great approach, but there are some times\nwhen you may not want to abort.\nLet\u2019 s take a look at an example. Here is some awkward code that sums expenses in a\nbilling application:\ntry {\n  MealExpenses expenses = expenseReportDAO.getMeals(employee.getID());  m_total += expenses.getTotal();\n} catch(MealExpensesNotFound e) {\n  m_total += getMealPerDiem();}\nIn this business, if meals are expensed, they become part of the total. If they aren\u2019t, the\nemployee gets a meal per diem amount for that day. The exception clutters the logic.\nWouldn\u2019t it be better if we didn\u2019t have to deal with the special case? If we didn\u2019t, our code\nwould look much simpler. It would look like this:\nMealExpenses expenses = expenseReportDAO.getMeals(employee.getID());\nm_total += expenses.getTotal();", "110 Chapter 7: Error Handling\nCan we make the code that simple? It turns out that we can. We can change the\nExpenseReportDAO so that it always returns a MealExpense object. If there are no meal\nexpenses, it returns a MealExpense object that returns the per diem as its total:\npublic class PerDiemMealExpenses implements MealExpenses {\n  public int getTotal() {    // return the per diem default\n  }\n}\nThis is called the S PECIAL CASE PATTERN [Fowler]. Y ou create a class or con\ufb01gure an\nobject so that it handles a special case for you. When you do, the client code doesn\u2019t have\nto deal with exceptional behavior. That behavior is encapsulated in the special case object.\nDon\u2019t Return Null\nI think that any discussion about error handling should include mention of the things we\ndo that invite errors. The \ufb01rst on the list is returning null. I can\u2019t begin to count the number\nof applications I\u2019ve seen in which nearly every other line was a check for null. Here is\nsome example code:\n  public void registerItem(Item item) {\n    if (item != null) {      ItemRegistry registry = peristentStore.getItemRegistry();\n      if (registry != null) {\n        Item existing = registry.getItem(item.getID());        if (existing.getBillingPeriod().hasRetailOwner()) {          existing.register(item);        }\n      }\n    }  }\nIf you work in a code base with code like this, it might not look all that bad to you, but it is\nbad! When we return null, we are essentially creating work for ourselves and foisting\nproblems upon our callers. All it takes is one missing null check to send an application\nspinning out of control.\nDid you notice the fact that there wasn\u2019t a null check in the second line of that nested\nif statement? What would have happened at runtime if persistentStore were null? We\nwould have had a NullPointerException at runtime, and either someone is catching\nNullPointerException at the top level or they are not. Either way it\u2019 s bad. What exactly\nshould you do in response to a NullPointerExceptionthrown from the depths of your appli-\ncation?\nIt\u2019 s easy to say that the problem with the code above is that it is missing a null check,\nbut in actuality, the problem is that it has too many. If you are tempted to return null from\na method, consider throwing an exception or returning a S PECIAL CASE object instead. If\nyou are calling a null-returning method from a third-party API, consider wrapping that\nmethod with a method that either throws an exception or returns a special case object.", "111Don\u2019t Pass Null\nIn many cases, special case objects are an easy remedy. Imagine that you have code\nlike this:\nList<Employee> employees = getEmployees();\nif (employees != null) {  for(Employee e : employees) {\n    totalPay += e.getPay();\n  }}\nRight now, getEmployees can return null, but does it have to? If we change getEmployee so\nthat it returns an empty list, we can clean up the code:\nList<Employee> employees = getEmployees();\nfor(Employee e : employees) {  totalPay += e.getPay();\n}\nFortunately, Java has Collections.emptyList(), and it returns a prede\ufb01ned immutable list\nthat we can use for this purpose:\npublic List<Employee> getEmployees() {\n  if( .. there are no employees .. )     return Collections.emptyList();\n}\nIf you code this way, you will minimize the chance of NullPointerExceptions and your\ncode will be cleaner.\nDon\u2019t Pass Null\nReturning null from methods is bad, but passing null into methods is worse. Unless you\nare working with an API which expects you to pass null, you should avoid passing null in\nyour code whenever possible.\nLet\u2019 s look at an example to see why. Here is a simple method which calculates a met-\nric for two points:\npublic class MetricsCalculator \n{  public double xProjection(Point p1, Point p2) {\n    return (p2.x \u2013 p1.x) * 1.5;\n  }  \u2026}\nWhat happens when someone passes null as an argument?\ncalculator.xProjection(null, new Point(12, 13));\nWe\u2019ll get a NullPointerException, of course.\nHow can we \ufb01x it? We could create a new exception type and throw it:\npublic class MetricsCalculator \n{", "112 Chapter 7: Error Handling\n  public double xProjection(Point p1, Point p2) {\n    if (p1 == null || p2 == null) {      throw InvalidArgumentException(\n        \"Invalid argument for MetricsCalculator.xProjection\");\n    }    return (p2.x \u2013 p1.x) * 1.5;  }}\nIs this better? It might be a little better than a null pointer exception, but remember, we\nhave to de\ufb01ne a handler for InvalidArgumentException. What should the handler do? Is\nthere any good course of action?\nThere is another alternative. We could use a set of assertions:\npublic class MetricsCalculator \n{  public double xProjection(Point p1, Point p2) {\n    assert p1 != null : \"p1 should not be null\";\n    assert p2 != null : \"p2 should not be null\";    return (p2.x \u2013 p1.x) * 1.5;  }}\nIt\u2019 s good documentation, but it doesn\u2019t solve the problem. If someone passes null, we\u2019ll\nstill have a runtime error. \nIn most programming languages there is no good way to deal with a null that is\npassed by a caller accidentally. Because this is the case, the rational approach is to forbid\npassingnull by default. When you do, you can code with the knowledge that a null in an\nargument list is an indication of a problem, and end up with far fewer careless mistakes.\nConclusion\nClean code is readable, but it must also be robust. These are not con\ufb02icting goals. We can\nwrite robust clean code if we see error handling as a separate concern, something that is\nviewable independently of our main logic. To the degree that we are able to do that, we can\nreason about it independently, and we can make great strides in the maintainability of our\ncode.\nBibliography\n[Martin]:  Agile Software Development: Principles, Patterns, and Practices, Robert C.\nMartin, Prentice Hall, 2002.", "113\n8\nBoundaries\nby James Grenning\nWe seldom control all the software in our systems. Sometimes we buy third-party pack-\nages or use open source. Other times we depend on teams in our own company to produce\ncomponents or subsystems for us. Somehow we must cleanly integrate this foreign code", "114 Chapter 8: Boundaries\nwith our own. In this chapter we look at practices and techniques to keep the boundaries of\nour software clean.\nUsing Third-Party Code\nThere is a natural tension between the provider of an interface and the user of an interface.\nProviders of third-party packages and frameworks strive for broad applicability so they\ncan work in many environments and appeal to a wide audience. Users, on the other hand,\nwant an interface that is focused on their particular needs. This tension can cause problems\nat the boundaries of our systems.\nLet\u2019 s look at java.util.Map as an example. As you can see by examining Figure 8-1,\nMaps have a very broad interface with plenty of capabilities. Certainly this power and \ufb02exi-\nbility is useful, but it can also be a liability. For instance, our application might build up a\nMap and pass it around. Our intention might be that none of the recipients of our Map delete\nanything in the map. But right there at the top of the list is the clear() method. Any user of\nthe Map has the power to clear it. Or maybe our design convention is that only particular\ntypes of objects can be stored in the Map, but Maps do not reliably constrain the types of\nobjects placed within them. Any determined user can add items of any type to any Map.\nIf our application needs a Map of Sensors, you might \ufb01nd the sensors set up like this:\nMap sensors = new HashMap();\n\u2022 clear() void \u2013 Map\n\u2022 containsKey(Object key) boolean \u2013 Map\n\u2022 containsValue(Object value) boolean \u2013 Map\n\u2022 entrySet() Set \u2013 Map\n\u2022 equals(Object o) boolean \u2013 Map\n\u2022 get(Object key) Object \u2013 Map\n\u2022 getClass() Class<? extends Object> \u2013 Object\n\u2022 hashCode() int \u2013 Map\n\u2022 isEmpty() boolean \u2013 Map\n\u2022 keySet() Set \u2013 Map\n\u2022 notify() void \u2013 Object\n\u2022 notifyAll() void \u2013 Object\n\u2022 put(Object key, Object value) Object \u2013 Map\n\u2022 putAll(Map t) void \u2013 Map\n\u2022 remove(Object key) Object \u2013 Map\n\u2022 size() int \u2013 Map\n\u2022 toString() String \u2013 Object\n\u2022 values() Collection \u2013 Map\n\u2022 wait() void \u2013 Object\n\u2022 wait(long timeout) void \u2013 Object\n\u2022 wait(long timeout, int nanos) void \u2013 Object\nFigure 8-1\nThe methods of Map", "115Using Third-Party Code\nThen, when some other part of the code needs to access the sensor, you see this code:\nSensor s = (Sensor)sensors.get(sensorId );\nWe don\u2019t just see it once, but over and over again throughout the code. The client of this\ncode carries the responsibility of getting an Object from the Map and casting it to the right\ntype. This works, but it\u2019 s not clean code. Also, this code does not tell its story as well as it\ncould. The readability of this code can be greatly improved by using generics, as shown\nbelow:\nMap<Sensor> sensors = new HashMap<Sensor>();\n...\nSensor s = sensors.get(sensorId );\nHowever, this doesn\u2019t solve the problem that Map<Sensor> provides more capability than we\nneed or want.\nPassing an instance of Map<Sensor> liberally around the system means that there will\nbe a lot of places to \ufb01x if the interface to Map ever changes. Y ou might think such a change\nto be unlikely, but remember that it changed when generics support was added in Java 5.\nIndeed, we\u2019ve seen systems that are inhibited from using generics because of the sheer\nmagnitude of changes needed to make up for the liberal use of Maps.\nA cleaner way to use Map might look like the following. No user of Sensors would care\none bit if generics were used or not. That choice has become (and always should be) an\nimplementation detail.\npublic class Sensors {\nprivate Map sensors = new HashMap();\npublic Sensor getById(String id) {\nreturn (Sensor) sensors.get(id);\n}\n//snip\n}\nThe interface at the boundary (Map) is hidden. It is able to evolve with very little impact on\nthe rest of the application. The use of generics is no longer a big issue because the casting\nand type management is handled inside the Sensors class. \nThis interface is also tailored and constrained to meet the needs of the application. It\nresults in code that is easier to understand and harder to misuse. The Sensors class can\nenforce design and business rules.\nWe are not suggesting that every use of Map be encapsulated in this form. Rather, we\nare advising you not to pass Maps (or any other interface at a boundary) around your\nsystem. If you use a boundary interface like Map, keep it inside the class, or close family\nof classes, where it is used. Avoid returning it from, or accepting it as an argument to,\npublic APIs.", "116 Chapter 8: Boundaries\nExploring and Learning Boundaries\nThird-party code helps us get more functionality delivered in less time. Where do we start\nwhen we want to utilize some third-party package? It\u2019 s not our job to test the third-party\ncode, but it may be in our best interest to write tests for the third-party code we use. \nSuppose it is not clear how to use our third-party library. We might spend a day or two\n(or more) reading the documentation and deciding how we are going to use it. Then we\nmight write our code to use the third-party code and see whether it does what we think. We\nwould not be surprised to \ufb01nd ourselves bogged down in long debugging sessions trying to\n\ufb01gure out whether the bugs we are experiencing are in our code or theirs. \nLearning the third-party code is hard. Integrating the third-party code is hard too.\nDoing both at the same time is doubly hard. What if we took a different approach? Instead\nof experimenting and trying out the new stuff in our production code, we could write some\ntests to explore our understanding of the third-party code. Jim Newkirk calls such tests\nlearning tests.1\nIn learning tests we call the third-party API, as we expect to use it in our application.\nWe\u2019re essentially doing controlled experiments that check our understanding of that API.\nThe tests focus on what we want out of the API. \nLearning log4j\nLet\u2019 s say we want to use the apache log4j package rather than our own custom-built log-\nger. We download it and open the introductory documentation page. Without too much\nreading we write our \ufb01rst test case, expecting it to write \u201chello\u201d to the console.\n@Test\npublic void testLogCreate() {\nLogger logger = Logger.getLogger(\"MyLogger\");\nlogger.info(\"hello\");\n}\nWhen we run it, the logger produces an error that tells us we need something called an\nAppender. After a little more reading we \ufb01nd that there is a ConsoleAppender. So we create a\nConsoleAppender and see whether we have unlocked the secrets of logging to the console.\n@Testpublic void testLogAddAppender() {\nLogger logger = Logger.getLogger(\"MyLogger\");\nConsoleAppender appender = new ConsoleAppender();\nlogger.addAppender(appender);logger.info(\"hello\");\n}\n1. [BeckTDD], pp. 136\u2013137.", "117Learning log4j\nThis time we \ufb01nd that the Appender has no output stream. Odd\u2014it seems logical that it\u2019 d\nhave one. After a little help from Google, we try the following:\n@Test\npublic void testLogAddAppender() {\nLogger logger = Logger.getLogger(\"MyLogger\");\nlogger.removeAllAppenders();\nlogger.addAppender(new ConsoleAppender(\nnew PatternLayout(\"%p %t %m%n\"), ConsoleAppender.SYSTEM_OUT));\nlogger.info(\"hello\");\n}\nThat worked; a log message that includes \u201chello\u201d came out on the console! It seems odd\nthat we have to tell the ConsoleAppender that it writes to the console. \nInterestingly enough, when we remove the ConsoleAppender.SystemOut argument, we\nsee that \u201chello\u201d is still printed. But when we take out the PatternLayout, it once again com-\nplains about the lack of an output stream. This is very strange behavior. \nLooking a little more carefully at the documentation, we see that the default\nConsoleAppenderconstructor is \u201cuncon\ufb01gured,\u201d which does not seem too obvious or useful.\nThis feels like a bug, or at least an inconsistency, in log4j.\nA bit more googling, reading, and testing, and we eventually wind up with Listing 8-1.\nWe\u2019ve discovered a great deal about the way that log4j works, and we\u2019ve encoded that\nknowledge into a set of simple unit tests.\nListing 8-1 \nLogTest.java\npublic class LogTest {\n    private Logger logger;\n    @Before\n    public void initialize() {        logger = Logger.getLogger(\"logger\");        logger.removeAllAppenders();        Logger.getRootLogger().removeAllAppenders();\n    }\n    @Test    public void basicLogger() {        BasicConfigurator.configure();\n        logger.info(\"basicLogger\");\n    }\n    @Test\n    public void addAppenderWithStream() {\nlogger.addAppender(new ConsoleAppender(\nnew PatternLayout(\"%p %t %m%n\"),ConsoleAppender.SYSTEM_OUT));\n        logger.info(\"addAppenderWithStream\");    }", "118 Chapter 8: Boundaries\nNow we know how to get a simple console logger initialized, and we can encapsulate\nthat knowledge into our own logger class so that the rest of our application is isolated from\nthelog4j boundary interface. \nLearning Tests Are Better Than Free\nThe learning tests end up costing nothing. We had to learn the API anyway, and writing\nthose tests was an easy and isolated way to get that knowledge. The learning tests were\nprecise experiments that helped increase our understanding.\nNot only are learning tests free, they have a positive return on investment. When there\nare new releases of the third-party package, we run the learning tests to see whether there\nare behavioral differences. \nLearning tests verify that the third-party packages we are using work the way we\nexpect them to. Once integrated, there are no guarantees that the third-party code will stay\ncompatible with our needs. The original authors will have pressures to change their code to\nmeet new needs of their own. They will \ufb01x bugs and add new capabilities. With each\nrelease comes new risk. If the third-party package changes in some way incompatible with\nour tests, we will \ufb01nd out right away. \nWhether you need the learning provided by the learning tests or not, a clean boundary\nshould be supported by a set of outbound tests that exercise the interface the same way the\nproduction code does. Without these boundary tests to ease the migration, we might be\ntempted to stay with the old version longer than we should. \nUsing Code That Does Not Y et Exist\nThere is another kind of boundary, one that separates the known from the unknown. There\nare often places in the code where our knowledge seems to drop off the edge. Sometimes\nwhat is on the other side of the boundary is unknowable (at least right now). Sometimes\nwe choose to look no farther than the boundary. \nA number of years back I was part of a team developing software for a radio com-\nmunications system. There was a subsystem, the \u201cTransmitter,\u201d that we knew little\nabout, and the people responsible for the subsystem had not gotten to the point of de\ufb01ning\ntheir interface. We did not want to be blocked, so we started our work far away from the\nunknown part of the code.\n    @Test\n    public void addAppenderWithoutStream() {\nlogger.addAppender(new ConsoleAppender(\nnew PatternLayout(\"%p %t %m%n\")));\n        logger.info(\"addAppenderWithoutStream\");    }}\nListing 8-1 (continued)\nLogTest.java", "119Using Code That Does Not Y et Exist\nWe had a pretty good idea of where our world ended and the new world began. As we\nworked, we sometimes bumped up against this boundary. Though mists and clouds of\nignorance obscured our view beyond the boundary, our work made us aware of what we\nwanted the boundary interface to be. We wanted to tell the transmitter something like this:\nKey the transmitter on the provided frequency and emit an analog representation of the\ndata coming from this stream. \nWe had no idea how that would be done because the API had not been designed yet.\nSo we decided to work out the details later.\nTo keep from being blocked, we de\ufb01ned our own interface. We called it something\ncatchy, like Transmitter. We gave it a method called transmit that took a frequency and a\ndata stream. This was the interface we wished we had. \nOne good thing about writing the interface we wish we had is that it\u2019 s under our\ncontrol. This helps keep client code more readable and focused on what it is trying to\naccomplish.\nIn Figure 8-2, you can see that we insulated the CommunicationsController classes\nfrom the transmitter API (which was out of our control and unde\ufb01ned). By using our own\napplication speci\ufb01c interface, we kept our CommunicationsController code clean and\nexpressive. Once the transmitter API was de\ufb01ned, we wrote the TransmitterAdapter to\nbridge the gap. The A DAPTER2 encapsulated the interaction with the API and provides a\nsingle place to change when the API evolves.\nFigure 8-2\nPredicting the transmitter\nThis design also gives us a very convenient seam 3 in the code for testing. Using a\nsuitable FakeTransmitter, we can test the CommunicationsController classes. We can also\ncreate boundary tests once we have the TransmitterAPI that make sure we are using the\nAPI correctly.\n2. See the Adapter pattern in [GOF].\n3. See more about seams in [WELC].", "120 Chapter 8: Boundaries\nClean Boundaries\nInteresting things happen at boundaries. Change is one of those things. Good software\ndesigns accommodate change without huge investments and rework. When we use code\nthat is out of our control, special care must be taken to protect our investment and make\nsure future change is not too costly. \nCode at the boundaries needs clear separation and tests that de\ufb01ne expectations. We\nshould avoid letting too much of our code know about the third-party particulars. It\u2019 s better\nto depend on something you control than on something you don\u2019t control, lest it end up\ncontrolling you. \nWe manage third-party boundaries by having very few places in the code that refer to\nthem. We may wrap them as we did with Map, or we may use an ADAPTER to convert from\nour perfect interface to the provided interface. Either way our code speaks to us better,\npromotes internally consistent usage across the boundary, and has fewer maintenance\npoints when the third-party code changes. \nBibliography\n[BeckTDD]:  Test Driven Development, Kent Beck, Addison-Wesley, 2003.\n[GOF]:  Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al.,\nAddison-Wesley, 1996.\n[WELC]:  W orking Effectively with Legacy Code,Addison-Wesley, 2004.", "121\n9\nUnit Tests\nOur profession has come a long way in the last ten years. In 1997 no one had heard of\nTest Driven Development. For the vast majority of us, unit tests were short bits of throw-\naway code that we wrote to make sure our programs \u201cworked.\u201d We would painstakingly\nwrite our classes and methods, and then we would concoct some ad hoc code to test\nthem. T ypically this would involve some kind of simple driver program that would allow\nus to manually interact with the program we had written.\nI remember writing a C++ program for an embedded real-time system back in the\nmid-90s. The program was a simple timer with the following signature:\nvoid Timer::ScheduleCommand(Command* theCommand, int milliseconds) \nThe idea was simple; the execute method of the Command would be executed in a new\nthread after the speci\ufb01ed number of milliseconds. The problem was, how to test it.", "122 Chapter 9: Unit Tests\nI cobbled together a simple driver program that listened to the keyboard. Every time a\ncharacter was typed, it would schedule a command that would type the same character \ufb01ve\nseconds later. Then I tapped out a rhythmic melody on the keyboard and waited for that\nmelody to replay on the screen \ufb01ve seconds later. \n\u201cI . . . want-a-girl . . . just . . . like-the-girl-who-marr . . . ied . . . dear . . . old . . . dad.\u201d\nI actually sang that melody while typing the \u201c.\u201d key, and then I sang it again as the\ndots appeared on the screen.\nThat was my test! Once I saw it work and demonstrated it to my colleagues, I threw\nthe test code away.\nAs I said, our profession has come a long way. Nowadays I would write a test that made\nsure that every nook and cranny of that code worked as I expected it to. I would isolate my\ncode from the operating system rather than just calling the standard timing functions. I\nwould mock out those timing functions so that I had absolute control over the time. I would\nschedule commands that set boolean \ufb02ags, and then I would step the time forward, watching\nthose \ufb02ags and ensuring that they went from false to true just as I changed the time to the\nright value.\nOnce I got a suite of tests to pass, I would make sure that those tests were convenient\nto run for anyone else who needed to work with the code. I would ensure that the tests and\nthe code were checked in together into the same source package.\nY es, we\u2019ve come a long way; but we have farther to go. The Agile and TDD move-\nments have encouraged many programmers to write automated unit tests, and more are\njoining their ranks every day. But in the mad rush to add testing to our discipline, many\nprogrammers have missed some of the more subtle, and important, points of writing\ngood tests.\nThe Three Laws of TDD\nBy now everyone knows that TDD asks us to write unit tests \ufb01rst, before we write produc-\ntion code. But that rule is just the tip of the iceberg. Consider the following three laws:1\nFirst Law Y ou may not write production code until you have written a failing unit test.\nSecond Law Y ou may not write more of a unit test than is suf\ufb01cient to fail, and not com-\npiling is failing.\nThird Law Y ou may not write more production code than is suf\ufb01cient to pass the cur-\nrently failing test. \n1. Professionalism and Test-Driven Development, Robert C. Martin, Object Mentor, IEEE Software, May/June 2007 (V ol. 24, \nNo. 3)   pp. 32\u201336\nhttp://doi.ieeecomputersociety.org/10.1109/MS.2007.85", "123Keeping Tests Clean\nThese three laws lock you into a cycle that is perhaps thirty seconds long. The tests\nand the production code are written together, with the tests just a few seconds ahead of the\nproduction code.\nIf we work this way, we will write dozens of tests every day, hundreds of tests every\nmonth, and thousands of tests every year. If we work this way, those tests will cover virtu-\nally all of our production code. The sheer bulk of those tests, which can rival the size of the\nproduction code itself, can present a daunting management problem.\nKeeping Tests Clean\nSome years back I was asked to coach a team who had explicitly decided that their test\ncodeshould not be maintained to the same standards of quality as their production code.\nThey gave each other license to break the rules in their unit tests. \u201cQuick and dirty\u201d was\nthe watchword. Their variables did not have to be well named, their test functions did not\nneed to be short and descriptive. Their test code did not need to be well designed and\nthoughtfully partitioned. So long as the test code worked, and so long as it covered the pro-\nduction code, it was good enough.\nSome of you reading this might sympathize with that decision. Perhaps, long in the\npast, you wrote tests of the kind that I wrote for that Timer class. It\u2019 s a huge step from\nwriting that kind of throw-away test, to writing a suite of automated unit tests. So, like the\nteam I was coaching, you might decide that having dirty tests is better than having no\ntests.\nWhat this team did not realize was that having dirty tests is equivalent to, if not worse\nthan, having no tests. The problem is that tests must change as the production code\nevolves. The dirtier the tests, the harder they are to change. The more tangled the test code,\nthe more likely it is that you will spend more time cramming new tests into the suite than it\ntakes to write the new production code. As you modify the production code, old tests start\nto fail, and the mess in the test code makes it hard to get those tests to pass again. So the\ntests become viewed as an ever-increasing liability.\nFrom release to release the cost of maintaining my team\u2019 s test suite rose. Eventually it\nbecame the single biggest complaint among the developers. When managers asked why\ntheir estimates were getting so large, the developers blamed the tests. In the end they were\nforced to discard the test suite entirely.\nBut, without a test suite they lost the ability to make sure that changes to their code\nbase worked as expected. Without a test suite they could not ensure that changes to one\npart of their system did not break other parts of their system. So their defect rate began to\nrise. As the number of unintended defects rose, they started to fear making changes. They\nstopped cleaning their production code because they feared the changes would do more\nharm than good. Their production code began to rot. In the end they were left with no tests,\ntangled and bug-riddled production code, frustrated customers, and the feeling that their\ntesting effort had failed them.", "124 Chapter 9: Unit Tests\nIn a way they were right. Their testing effort had failed them. But it was their decision\nto allow the tests to be messy that was the seed of that failure. Had they kept their tests\nclean, their testing effort would not have failed. I can say this with some certainty because\nI have participated in, and coached, many teams who have been successful with clean unit\ntests.\nThe moral of the story is simple: Test code is just as important as production code. It\nis not a second-class citizen. It requires thought, design, and care. It must be kept as clean\nas production code. \nTests Enable the -ilities\nIf you don\u2019t keep your tests clean, you will lose them. And without them, you lose the very\nthing that keeps your production code \ufb02exible. Y es, you read that correctly. It is unit tests\nthat keep our code \ufb02exible, maintainable, and reusable. The reason is simple. If you have\ntests, you do not fear making changes to the code! Without tests every change is a possible\nbug. No matter how \ufb02exible your architecture is, no matter how nicely partitioned your\ndesign, without tests you will be reluctant to make changes because of the fear that you\nwill introduce undetected bugs.\nBut with tests that fear virtually disappears. The higher your test coverage, the less\nyour fear. Y ou can make changes with near impunity to code that has a less than stellar\narchitecture and a tangled and opaque design. Indeed, you can improve that architecture\nand design without fear!\nSo having an automated suite of unit tests that cover the production code is the key to\nkeeping your design and architecture as clean as possible. Tests enable all the -ilities,\nbecause tests enable change.\nSo if your tests are dirty, then your ability to change your code is hampered, and you\nbegin to lose the ability to improve the structure of that code. The dirtier your tests, the\ndirtier your code becomes. Eventually you lose the tests, and your code rots.\nClean Tests\nWhat makes a clean test? Three things. Readability, readability, and readability. Read-\nability is perhaps even more important in unit tests than it is in production code. What\nmakes tests readable? The same thing that makes all code readable: clarity, simplicity,\nand density of expression. In a test you want to say a lot with as few expressions as\npossible. \nConsider the code from FitNesse in Listing 9-1. These three tests are dif\ufb01cult to\nunderstand and can certainly be improved. First, there is a terrible amount of duplicate\ncode [G5] in the repeated calls to addPage and assertSubString. More importantly, this\ncode is just loaded with details that interfere with the expressiveness of the test.", "125Clean Tests\nListing 9-1 \nSerializedPageResponderTest.java\npublic void testGetPageHieratchyAsXml() throws Exception\n{\ncrawler.addPage(root, PathParser.parse(\"PageOne\"));\ncrawler.addPage(root, PathParser.parse(\"PageOne.ChildOne\"));\ncrawler.addPage(root, PathParser.parse(\"PageTwo\"));\nrequest.setResource(\"root\");\nrequest.addInput(\"type\", \"pages\");\nResponder responder = new SerializedPageResponder();\nSimpleResponse response = \n      (SimpleResponse) responder.makeResponse(         new FitNesseContext(root), request);\nString xml = response.getContent();\nassertEquals(\"text/xml\", response.getContentType());\nassertSubString(\"<name>PageOne</name>\", xml);assertSubString(\"<name>PageTwo</name>\", xml);assertSubString(\"<name>ChildOne</name>\", xml);\n}\npublic void testGetPageHieratchyAsXmlDoesntContainSymbolicLinks() \n  throws Exception\n{\nWikiPage pageOne = crawler.addPage(root, PathParser.parse(\"PageOne\"));\ncrawler.addPage(root, PathParser.parse(\"PageOne.ChildOne\"));crawler.addPage(root, PathParser.parse(\"PageTwo\"));\nPageData data = pageOne.getData();\nWikiPageProperties properties = data.getProperties();\nWikiPageProperty symLinks = properties.set(SymbolicPage.PROPERTY_NAME);symLinks.set(\"SymPage\", \"PageTwo\");pageOne.commit(data);\nrequest.setResource(\"root\");\nrequest.addInput(\"type\", \"pages\");Responder responder = new SerializedPageResponder();SimpleResponse response = \n      (SimpleResponse) responder.makeResponse(\n         new FitNesseContext(root), request);\nString xml = response.getContent();\nassertEquals(\"text/xml\", response.getContentType());\nassertSubString(\"<name>PageOne</name>\", xml);\nassertSubString(\"<name>PageTwo</name>\", xml);\nassertSubString(\"<name>ChildOne</name>\", xml);assertNotSubString(\"SymPage\", xml);\n}\npublic void testGetDataAsHtml() throws Exception\n{\ncrawler.addPage(root, PathParser.parse(\"TestPageOne\"), \"test page\");\nrequest.setResource(\"TestPageOne\");\nrequest.addInput(\"type\", \"data\");", "126 Chapter 9: Unit Tests\nFor example, look at the PathParser calls. They transform strings into PagePath\ninstances used by the crawlers. This transformation is completely irrelevant to the test at\nhand and serves only to obfuscate the intent. The details surrounding the creation of the\nresponder and the gathering and casting of the response are also just noise. Then there\u2019 s the\nham-handed way that the request URL is built from a resource and an argument. (I helped\nwrite this code, so I feel free to roundly criticize it.)\nIn the end, this code was not designed to be read. The poor reader is inundated with a\nswarm of details that must be understood before the tests make any real sense.\nNow consider the improved tests in Listing 9-2. These tests do the exact same thing,\nbut they have been refactored into a much cleaner and more explanatory form.\nResponder responder = new SerializedPageResponder();\nSimpleResponse response = \n       (SimpleResponse) responder.makeResponse(\n          new FitNesseContext(root), request);\nString xml = response.getContent();\nassertEquals(\"text/xml\", response.getContentType());\nassertSubString(\"test page\", xml);\nassertSubString(\"<Test\", xml);\n}\nListing 9-2 \nSerializedPageResponderTest.java (refactored)\n  public void testGetPageHierarchyAsXml() throws Exception {\n    makePages(\"PageOne\", \"PageOne.ChildOne\", \"PageTwo\");\n    submitRequest(\"root\", \"type:pages\");\n    assertResponseIsXML();\n    assertResponseContains(      \"<name>PageOne</name>\", \"<name>PageTwo</name>\", \"<name>ChildOne</name>\"\n    );\n  }\n  public void testSymbolicLinksAreNotInXmlPageHierarchy() throws Exception {\n    WikiPage page = makePage(\"PageOne\");\n    makePages(\"PageOne.ChildOne\", \"PageTwo\");\n    addLinkTo(page, \"PageTwo\", \"SymPage\");\n    submitRequest(\"root\", \"type:pages\");\n    assertResponseIsXML();\n    assertResponseContains(      \"<name>PageOne</name>\", \"<name>PageTwo</name>\", \"<name>ChildOne</name>\"    );\n    assertResponseDoesNotContain(\"SymPage\");\n  }\nListing 9-1 (continued)\nSerializedPageResponderTest.java", "127Clean Tests\nThe BUILD-OPERATE-CHECK2 pattern is made obvious by the structure of these tests.\nEach of the tests is clearly split into three parts. The \ufb01rst part builds up the test data, the\nsecond part operates on that test data, and the third part checks that the operation yielded\nthe expected results.\nNotice that the vast majority of annoying detail has been eliminated. The tests get\nright to the point and use only the data types and functions that they truly need. Anyone\nwho reads these tests should be able to work out what they do very quickly, without being\nmisled or overwhelmed by details.\nDomain-Speci\ufb01c Testing Language\nThe tests in Listing 9-2 demonstrate the technique of building a domain-speci\ufb01c language\nfor your tests. Rather than using the APIs that programmers use to manipulate the sys-\ntem, we build up a set of functions and utilities that make use of those APIs and that\nmake the tests more convenient to write and easier to read. These functions and utilities\nbecome a specialized API used by the tests. They are a testing language that program-\nmers use to help themselves to write their tests and to help those who must read those\ntests later on.\nThis testing API is not designed up front; rather it evolves from the continued refac-\ntoring of test code that has gotten too tainted by obfuscating detail. Just as you saw me\nrefactor Listing 9-1 into Listing 9-2, so too will disciplined developers refactor their test\ncode into more succinct and expressive forms. \nA Dual Standard\nIn one sense the team I mentioned at the beginning of this chapter had things right. The\ncode within the testing API does have a different set of engineering standards than produc-\ntion code. It must still be simple, succinct, and expressive, but it need not be as ef\ufb01cient as\nproduction code. After all, it runs in a test environment, not a production environment, and\nthose two environment have very different needs.\n  public void testGetDataAsXml() throws Exception {\n    makePageWithContent(\"TestPageOne\", \"test page\");\n    submitRequest(\"TestPageOne\", \"type:data\");\n    assertResponseIsXML();\n    assertResponseContains(\"test page\", \"<Test\");\n  }\n2. http://\ufb01tnesse.org/FitNesse.AcceptanceTestPatterns\nListing 9-2 (continued)\nSerializedPageResponderTest.java (refactored)", "128 Chapter 9: Unit Tests\nConsider the test in Listing 9-3. I wrote this test as part of an environment control sys-\ntem I was prototyping. Without going into the details you can tell that this test checks that\nthe low temperature alarm, the heater, and the blower are all turned on when the tempera-\nture is \u201cway too cold.\u201d \nThere are, of course, lots of details here. For example, what is that tic function all\nabout? In fact, I\u2019 d rather you not worry about that while reading this test. I\u2019 d rather you just\nworry about whether you agree that the end state of the system is consistent with the tem-\nperature being \u201cway too cold.\u201d\nNotice, as you read the test, that your eye needs to bounce back and forth between\nthe name of the state being checked, and the sense of the state being checked. Y ou see\nheaterState, and then your eyes glissade left to assertTrue. Y ou see coolerState and your\neyes must track left to assertFalse. This is tedious and unreliable. It makes the test hard\nto read.\nI improved the reading of this test greatly by transforming it into Listing 9-4.\nOf course I hid the detail of the tic function by creating a wayTooColdfunction. But the\nthing to note is the strange string in the assertEquals. Upper case means \u201con,\u201d lower case\nmeans \u201coff,\u201d and the letters are always in the following order: {heater, blower, cooler,\nhi-temp-alarm, lo-temp-alarm}.\nEven though this is close to a violation of the rule about mental mapping, 3 it seems\nappropriate in this case. Notice, once you know the meaning, your eyes glide across\nListing 9-3 \nEnvironmentControllerTest.java\n@Test\n  public void turnOnLoTempAlarmAtThreashold() throws Exception {    hw.setTemp(WAY_TOO_COLD);\n    controller.tic();\n    assertTrue(hw.heaterState());    assertTrue(hw.blowerState());    assertFalse(hw.coolerState());    assertFalse(hw.hiTempAlarm());\n    assertTrue(hw.loTempAlarm());\n  }\nListing 9-4 \nEnvironmentControllerTest.java (refactored)\n@Test\n  public void turnOnLoTempAlarmAtThreshold() throws Exception {\n    wayTooCold();\n    assertEquals(\"HBchL\", hw.getState());  }\n3. \u201cAvoid Mental Mapping\u201d on page 25.", "129Clean Tests\nthat string and you can quickly interpret the results. Reading the test becomes almost a\npleasure. Just take a look at Listing 9-5 and see how easy it is to understand these tests.\nThe getState function is shown in Listing 9-6. Notice that this is not very ef\ufb01cient\ncode. To make it ef\ufb01cient, I probably should have used a StringBuffer.\nStringBuffers are a bit ugly. Even in production code I will avoid them if the cost is\nsmall; and you could argue that the cost of the code in Listing 9-6 is very small. However,\nthis application is clearly an embedded real-time system, and it is likely that computer and\nmemory resources are very constrained. The test environment, however, is not likely to be\nconstrained at all. \nListing 9-5 \nEnvironmentControllerTest.java (bigger selection)\n@Test\n  public void turnOnCoolerAndBlowerIfTooHot() throws Exception {    tooHot();\n    assertEquals(\"hBChl\", hw.getState());\n  }\n  @Test\n  public void turnOnHeaterAndBlowerIfTooCold() throws Exception {\n    tooCold();\n    assertEquals(\"HBchl\", hw.getState());  }\n  @Test\n  public void turnOnHiTempAlarmAtThreshold() throws Exception {\n    wayTooHot();    assertEquals(\"hBCHl\", hw.getState());  }\n  @Test\n  public void turnOnLoTempAlarmAtThreshold() throws Exception {    wayTooCold();    assertEquals(\"HBchL\", hw.getState());  }\nListing 9-6 \nMockControlHardware.java\npublic String getState() {\n    String state = \"\";    state += heater ? \"H\" : \"h\";\n    state += blower ? \"B\" : \"b\";\n    state += cooler ? \"C\" : \"c\";    state += hiTempAlarm ? \"H\" : \"h\";    state += loTempAlarm ? \"L\" : \"l\";    return state;\n  }", "130 Chapter 9: Unit Tests\nThat is the nature of the dual standard. There are things that you might never do in a\nproduction environment that are perfectly \ufb01ne in a test environment. Usually they involve\nissues of memory or CPU ef\ufb01ciency. But they never involve issues of cleanliness. \nOne Assert per Test\nThere is a school of thought4 that says that every test function in a JUnit test should have one\nand only one assert statement. This rule may seem draconian, but the advantage can be seen\nin Listing 9-5. Those tests come to a single conclusion that is quick and easy to understand. \nBut what about Listing 9-2? It seems unreasonable that we could somehow easily\nmerge the assertion that the output is XML and that it contains certain substrings. How-\never, we can break the test into two separate tests, each with its own particular assertion, as\nshown in Listing 9-7.\nNotice that I have changed the names of the functions to use the common given-when-\nthen5 convention. This makes the tests even easier to read. Unfortunately, splitting the tests\nas shown results in a lot of duplicate code.\nWe can eliminate the duplication by using the TEMPLATE METHOD6 pattern and putting\nthe given/whenparts in the base class, and the then parts in different derivatives. Or we could\ncreate a completely separate test class and put the given and when parts in the @Beforefunc-\ntion, and the when parts in each @Test function. But this seems like too much mechanism for\nsuch a minor issue. In the end, I prefer the multiple asserts in Listing 9-2.\n4. See Dave Astel\u2019 s blog entry: http://www.artima.com/weblogs/viewpost.jsp?thread=35578\nListing 9-7 \nSerializedPageResponderTest.java (Single Assert)\npublic void testGetPageHierarchyAsXml() throws Exception {\n    givenPages(\"PageOne\", \"PageOne.ChildOne\", \"PageTwo\");\n    whenRequestIsIssued(\"root\", \"type:pages\");\n    thenResponseShouldBeXML();\n  }\n  public void testGetPageHierarchyHasRightTags() throws Exception {\n    givenPages(\"PageOne\", \"PageOne.ChildOne\", \"PageTwo\");\n    whenRequestIsIssued(\"root\", \"type:pages\");\n    thenResponseShouldContain(\n      \"<name>PageOne</name>\", \"<name>PageTwo</name>\", \"<name>ChildOne</name>\"    );\n  }\n5. [RSpec].\n6. [GOF].", "131One Assert per Test\nI think the single assert rule is a good guideline. 7 I usually try to create a domain-\nspeci\ufb01c testing language that supports it, as in Listing 9-5. But I am not afraid to put\nmore than one assert in a test. I think the best thing we can say is that the number of\nasserts in a test ought to be minimized.\nSingle Concept per Test\nPerhaps a better rule is that we want to test a single concept in each test function. We don\u2019t\nwant long test functions that go testing one miscellaneous thing after another. Listing 9-8\nis an example of such a test. This test should be split up into three independent tests\nbecause it tests three independent things. Merging them all together into the same function\nforces the reader to \ufb01gure out why each section is there and what is being tested by that\nsection.\nThe three test functions probably ought to be like this:\n\u2022 Given the last day of a month with 31 days (like May):\n1. When you add one month, such that the last day of that month is the 30th \n(like June), then the date should be the 30th of that month, not the 31st.\n2. When you add two months to that date, such that the \ufb01nal month has 31 days, \nthen the date should be the 31st.\n7. \u201cKeep to the code!\u201d\nListing 9-8 \n    /**\n     * Miscellaneous tests for the addMonths() method.     */\n    public void testAddMonths() {\n        SerialDate d1 = SerialDate.createInstance(31, 5, 2004);\n        SerialDate d2 = SerialDate.addMonths(1, d1);\n        assertEquals(30, d2.getDayOfMonth());        assertEquals(6, d2.getMonth());        assertEquals(2004, d2.getYYYY());\n        SerialDate d3 = SerialDate.addMonths(2, d1);\n        assertEquals(31, d3.getDayOfMonth());        assertEquals(7, d3.getMonth());        assertEquals(2004, d3.getYYYY());\n        SerialDate d4 = SerialDate.addMonths(1, SerialDate.addMonths(1, d1));\n        assertEquals(30, d4.getDayOfMonth());        assertEquals(7, d4.getMonth());        assertEquals(2004, d4.getYYYY());\n    }", "132 Chapter 9: Unit Tests\n\u2022 Given the last day of a month with 30 days in it (like June):\n1. When you add one month such that the last day of that month has 31 days, then the\ndate should be the 30th, not the 31st. \nStated like this, you can see that there is a general rule hiding amidst the miscella-\nneous tests. When you increment the month, the date can be no greater than the last day of\nthe month. This implies that incrementing the month on February 28th should yield March\n28th.That test is missing and would be a useful test to write.\nSo it\u2019 s not the multiple asserts in each section of Listing 9-8 that causes the problem.\nRather it is the fact that there is more than one concept being tested. So probably the best\nrule is that you should minimize the number of asserts per concept and test just one con-\ncept per test function.\nF.I.R.S.T.8\nClean tests follow \ufb01ve other rules that form the above acronym:\nFast Tests should be fast. They should run quickly. When tests run slow, you won\u2019t want\nto run them frequently. If you don\u2019t run them frequently, you won\u2019t \ufb01nd problems early\nenough to \ufb01x them easily. Y ou won\u2019t feel as free to clean up the code. Eventually the code\nwill begin to rot.\nIndependent Tests should not depend on each other. One test should not set up the condi-\ntions for the next test. Y ou should be able to run each test independently and run the tests in\nany order you like. When tests depend on each other, then the \ufb01rst one to fail causes a cas-\ncade of downstream failures, making diagnosis dif\ufb01cult and hiding downstream defects.\nRepeatable Tests should be repeatable in any environment. Y ou should be able to run the\ntests in the production environment, in the QA environment, and on your laptop while\nriding home on the train without a network. If your tests aren\u2019t repeatable in any environ-\nment, then you\u2019ll always have an excuse for why they fail. Y ou\u2019ll also \ufb01nd yourself unable\nto run the tests when the environment isn\u2019t available.\nSelf-Validating The tests should have a boolean output. Either they pass or fail. Y ou\nshould not have to read through a log \ufb01le to tell whether the tests pass. Y ou should not have\nto manually compare two different text \ufb01les to see whether the tests pass. If the tests aren\u2019t\nself-validating, then failure can become subjective and running the tests can require a long\nmanual evaluation.\n8. Object Mentor Training Materials.", "133Bibliography\nTimely The tests need to be written in a timely fashion. Unit tests should be written just\nbefore the production code that makes them pass. If you write tests after the production\ncode, then you may \ufb01nd the production code to be hard to test. Y ou may decide that some\nproduction code is too hard to test. Y ou may not design the production code to be testable.\nConclusion\nWe have barely scratched the surface of this topic. Indeed, I think an entire book could be\nwritten about clean tests. Tests are as important to the health of a project as the production\ncode is. Perhaps they are even more important, because tests preserve and enhance the\n\ufb02exibility, maintainability, and reusability of the production code. So keep your tests con-\nstantly clean. Work to make them expressive and succinct. Invent testing APIs that act as\ndomain-speci\ufb01c language that helps you write the tests. \nIf you let the tests rot, then your code will rot too. Keep your tests clean.\nBibliography\n[RSpec]:  RSpec: Behavior Driven Development for Ruby Programmers,\nAslak Helles\u00f8y, David Chelimsky, Pragmatic Bookshelf, 2008.\n[GOF]:  Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al.,\nAddison-Wesley, 1996.", "This page intentionally left blank", "135\n10\nClasses\nwith Jeff Langr\nSo far in this book we have focused on how to write lines and blocks of code well. We have\ndelved into proper composition of functions and how they interrelate. But for all the atten-\ntion to the expressiveness of code statements and the functions they comprise, we still\ndon\u2019t have clean code until we\u2019ve paid attention to higher levels of code organization. Let\u2019 s\ntalk about clean classes.", "136 Chapter 10: Classes\nClass Organization\nFollowing the standard Java convention, a class should begin with a list of variables. Pub-\nlic static constants, if any, should come \ufb01rst. Then private static variables, followed by pri-\nvate instance variables. There is seldom a good reason to have a public variable.\nPublic functions should follow the list of variables. We like to put the private utilities\ncalled by a public function right after the public function itself. This follows the stepdown\nrule and helps the program read like a newspaper article. \nEncapsulation\nWe like to keep our variables and utility functions private, but we\u2019re not fanatic about it.\nSometimes we need to make a variable or utility function protected so that it can be\naccessed by a test. For us, tests rule. If a test in the same package needs to call a function\nor access a variable, we\u2019ll make it protected or package scope. However, we\u2019ll \ufb01rst look for\na way to maintain privacy. Loosening encapsulation is always a last resort.\nClasses Should Be Small!\nThe \ufb01rst rule of classes is that they should be small. The second rule of classes is that they\nshould be smaller than that. No, we\u2019re not going to repeat the exact same text from the\nFunctionschapter. But as with functions, smaller is the primary rule when it comes to\ndesigning classes. As with functions, our immediate question is always \u201cHow small?\u201d\nWith functions we measured size by counting physical lines. With classes we use a\ndifferent measure. We count responsibilities.1\nListing 10-1 outlines a class, SuperDashboard, that exposes about 70 public methods.\nMost developers would agree that it\u2019 s a bit too super in size. Some developers might refer\ntoSuperDashboard as a \u201cGod class.\u201d\n1. [RDD].\nListing 10-1 \nToo Many Responsibilities\npublic class SuperDashboard extends JFrame implements MetaDataUser \n   public String getCustomizerLanguagePath()    public void setSystemConfigPath(String systemConfigPath) \n   public String getSystemConfigDocument() \n   public void setSystemConfigDocument(String systemConfigDocument)    public boolean getGuruState()    public boolean getNoviceState()    public boolean getOpenSourceState() \n   public void showObject(MetaObject object) \n   public void showProgress(String s)", "137Classes Should Be Small!\n   public boolean isMetadataDirty() \n   public void setIsMetadataDirty(boolean isMetadataDirty)    public Component getLastFocusedComponent() \n   public void setLastFocused(Component lastFocused) \n   public void setMouseSelectState(boolean isMouseSelected)   public boolean isMouseSelected()    public LanguageManager getLanguageManager()    public Project getProject()    public Project getFirstProject() \n   public Project getLastProject() \n   public String getNewProjectName()   public void setComponentSizes(Dimension dim)   public String getCurrentDir()    public void setCurrentDir(String newDir) \n   public void updateStatus(int dotPos, int markPos) \n   public Class[] getDataBaseClasses()    public MetadataFeeder getMetadataFeeder()    public void addProject(Project project)   public boolean setCurrentProject(Project project)\n   public boolean removeProject(Project project) \n   public MetaProjectHeader getProgramMetadata()   public void resetDashboard()   public Project loadProject(String fileName, String projectName)\n   public void setCanSaveMetadata(boolean canSave)\n   public MetaObject getSelectedObject()    public void deselectObjects()    public void setProject(Project project)    public void editorAction(String actionName, ActionEvent event)\n   public void setMode(int mode) \n   public FileManager getFileManager()    public void setFileManager(FileManager fileManager)    public ConfigManager getConfigManager()    public void setConfigManager(ConfigManager configManager) \n   public ClassLoader getClassLoader() \n   public void setClassLoader(ClassLoader classLoader)    public Properties getProps()    public String getUserHome() \n   public String getBaseDir() \n   public int getMajorVersionNumber()    public int getMinorVersionNumber()    public int getBuildNumber()    public MetaObject pasting(\nMetaObject target, MetaObject pasted, MetaProject project)\n   public void processMenuItems(MetaObject metaObject)   public void processMenuSeparators(MetaObject metaObject)   public void processTabPages(MetaObject metaObject)   public void processPlacement(MetaObject object) \n   public void processCreateLayout(MetaObject object) \n   public void updateDisplayLayer(MetaObject object, int layerIndex)   public void propertyEditedRepaint(MetaObject object)    public void processDeleteObject(MetaObject object)    public boolean getAttachedToDesigner() \n   public void processProjectChangedState(boolean hasProjectChanged)\n   public void processObjectNameChanged(MetaObject object)    public void runProject() \nListing 10-1 (continued)\nToo Many Responsibilities", "138 Chapter 10: Classes\nBut what if SuperDashboard contained only the methods shown in Listing 10-2?\nFive methods isn\u2019t too much, is it? In this case it is because despite its small number\nof methods, SuperDashboard has too many responsibilities.\nThe name of a class should describe what responsibilities it ful\ufb01lls. In fact, naming\nis probably the \ufb01rst way of helping determine class size. If we cannot derive a concise\nname for a class, then it\u2019 s likely too large. The more ambiguous the class name, the more\nlikely it has too many responsibilities. For example, class names including weasel words\nlike Processor or Manager or Super often hint at unfortunate aggregation of\nresponsibilities.\nWe should also be able to write a brief description of the class in about 25 words,\nwithout using the words \u201cif,\u201d \u201cand,\u201d \u201cor,\u201d or \u201cbut.\u201d How would we describe the\nSuperDashboard? \u201cThe SuperDashboard provides access to the component that last held the\nfocus, and it also allows us to track the version and build numbers.\u201d The \ufb01rst \u201cand\u201d is a\nhint that SuperDashboard has too many responsibilities.\nThe Single Responsibility Principle\nThe Single Responsibility Principle (SRP)2 states that a class or module should have one,\nand only one, reason to change. This principle gives us both a de\ufb01nition of responsibility,\nand a guidelines for class size. Classes should have one responsibility\u2014one reason to\nchange.\n   public void setA\u00e7owDragging(boolean allowDragging) \n   public boolean allowDragging()    public boolean isCustomizing() \n   public void setTitle(String title) \n   public IdeMenuBar getIdeMenuBar()    public void showHelper(MetaObject metaObject, String propertyName)   // ... many non-public methods follow ...}\nListing 10-2 \nSmall Enough?\npublic class SuperDashboard extends JFrame implements MetaDataUser\n    public Component getLastFocusedComponent()     public void setLastFocused(Component lastFocused) \n    public int getMajorVersionNumber() \n    public int getMinorVersionNumber()     public int getBuildNumber() }\n2. Y ou can read much more about this principle in [PPP].\nListing 10-1 (continued)\nToo Many Responsibilities", "139Classes Should Be Small!\nThe seemingly small SuperDashboard class in Listing 10-2 has two reasons to change.\nFirst, it tracks version information that would seemingly need to be updated every time the\nsoftware gets shipped. Second, it manages Java Swing components (it is a derivative of\nJFrame, the Swing representation of a top-level GUI window). No doubt we\u2019ll want to\nupdate the version number if we change any of the Swing code, but the converse isn\u2019t nec-\nessarily true: We might change the version information based on changes to other code in\nthe system.\nTrying to identify responsibilities (reasons to change) often helps us recognize and\ncreate better abstractions in our code. We can easily extract all three SuperDashboard\nmethods that deal with version information into a separate class named Version. (See\nListing 10-3.) The Version class is a construct that has a high potential for reuse in other\napplications!\nSRP is one of the more important concept in OO design. It\u2019 s also one of the simpler\nconcepts to understand and adhere to. Y et oddly, SRP is often the most abused class design\nprinciple. We regularly encounter classes that do far too many things. Why?\nGetting software to work and making software clean are two very different activities.\nMost of us have limited room in our heads, so we focus on getting our code to work more\nthan organization and cleanliness. This is wholly appropriate. Maintaining a separation of\nconcerns is just as important in our programming activities as it is in our programs.\nThe problem is that too many of us think that we are done once the program works.\nWe fail to switch to the other concern of organization and cleanliness. We move on to the\nnext problem rather than going back and breaking the overstuffed classes into decoupled\nunits with single responsibilities.\nAt the same time, many developers fear that a large number of small, single-purpose\nclasses makes it more dif\ufb01cult to understand the bigger picture. They are concerned that\nthey must navigate from class to class in order to \ufb01gure out how a larger piece of work gets\naccomplished.\nHowever, a system with many small classes has no more moving parts than a system\nwith a few large classes. There is just as much to learn in the system with a few large\nclasses. So the question is: Do you want your tools organized into toolboxes with many\nsmall drawers each containing well-de\ufb01ned and well-labeled components? Or do you want\na few drawers that you just toss everything into?\nEvery sizable system will contain a large amount of logic and complexity. The pri-\nmary goal in managing such complexity is to organize it so that a developer knows where\nListing 10-3 \nA single-responsibility class\npublic class Version {\n    public int getMajorVersionNumber()     public int getMinorVersionNumber() \n    public int getBuildNumber() \n}", "140 Chapter 10: Classes\nto look to \ufb01nd things and need only understand the directly affected complexity at any\ngiven time. In contrast, a system with larger, multipurpose classes always hampers us by\ninsisting we wade through lots of things we don\u2019t need to know right now.\nTo restate the former points for emphasis: We want our systems to be composed of\nmany small classes, not a few large ones. Each small class encapsulates a single responsi-\nbility, has a single reason to change, and collaborates with a few others to achieve the\ndesired system behaviors.\nCohesion\nClasses should have a small number of instance variables. Each of the methods of a class\nshould manipulate one or more of those variables. In general the more variables a method\nmanipulates the more cohesive that method is to its class. A class in which each variable is\nused by each method is maximally cohesive. \nIn general it is neither advisable nor possible to create such maximally cohesive\nclasses; on the other hand, we would like cohesion to be high. When cohesion is high, it\nmeans that the methods and variables of the class are co-dependent and hang together as a\nlogical whole.\nConsider the implementation of a Stack in Listing 10-4. This is a very cohesive class.\nOf the three methods only size() fails to use both the variables. \nThe strategy of keeping functions small and keeping parameter lists short can some-\ntimes lead to a proliferation of instance variables that are used by a subset of methods.\nWhen this happens, it almost always means that there is at least one other class trying to\nListing 10-4 \nStack.java A cohesive class.\npublic class Stack {\n  private int topOfStack = 0;  List<Integer> elements = new LinkedList<Integer>();\n  public int size() {\n    return topOfStack;  }\n  public void push(int element) {\n    topOfStack++;    elements.add(element);  }\n  public int pop() throws PoppedWhenEmpty {\n    if (topOfStack == 0)      throw new PoppedWhenEmpty();    int element = elements.get(--topOfStack);    elements.remove(topOfStack);\n    return element;\n  }}", "141Classes Should Be Small!\nget out of the larger class. Y ou should try to separate the variables and methods into two or\nmore classes such that the new classes are more cohesive.\nMaintaining Cohesion Results in Many Small Classes\nJust the act of breaking large functions into smaller functions causes a proliferation of\nclasses. Consider a large function with many variables declared within it. Let\u2019 s say you\nwant to extract one small part of that function into a separate function. However, the code\nyou want to extract uses four of the variables declared in the function. Must you pass all\nfour of those variables into the new function as arguments?\nNot at all! If we promoted those four variables to instance variables of the class, then\nwe could extract the code without passing any variables at all. It would be easy to break\nthe function up into small pieces.\nUnfortunately, this also means that our classes lose cohesion because they accumulate\nmore and more instance variables that exist solely to allow a few functions to share them.\nBut wait! If there are a few functions that want to share certain variables, doesn\u2019t that\nmake them a class in their own right? Of course it does. When classes lose cohesion, split\nthem!\nSo breaking a large function into many smaller functions often gives us the opportu-\nnity to split several smaller classes out as well. This gives our program a much better orga-\nnization and a more transparent structure.\nAs a demonstration of what I mean, let\u2019 s use a time-honored example taken from\nKnuth\u2019 s wonderful book Literate Programming.3 Listing 10-5 shows a translation into Java\nof Knuth\u2019 s PrintPrimes program. To be fair to Knuth, this is not the program as he wrote it\nbut rather as it was output by his WEB tool. I\u2019m using it because it makes a great starting\nplace for breaking up a big function into many smaller functions and classes.\n3. [Knuth92].\nListing 10-5 \nPrintPrimes.java\npackage literatePrimes;\npublic class PrintPrimes {\n  public static void main(String[] args) {\n    final int M = 1000;    final int RR = 50;    final int CC = 4;    final int WW = 10;\n    final int ORDMAX = 30;\n    int P[] = new int[M + 1];    int PAGENUMBER;    int PAGEOFFSET;    int ROWOFFSET;\n    int C;", "142 Chapter 10: Classes\n    int J;\n    int K;    boolean JPRIME;\n    int ORD;\n    int SQUARE;    int N;    int MULT[] = new int[ORDMAX + 1];\n    J = 1;\n    K = 1;    P[1] = 2;    ORD = 2;    SQUARE = 9;\n    while (K < M) {\n      do {        J = J + 2;        if (J == SQUARE) {\n          ORD = ORD + 1;\n          SQUARE = P[ORD] * P[ORD];          MULT[ORD - 1] = J;        }        N = 2;\n        JPRIME = true;\n        while (N < ORD && JPRIME) {          while (MULT[N] < J)            MULT[N] = MULT[N] + P[N] + P[N];          if (MULT[N] == J)\n            JPRIME = false;\n          N = N + 1;        }      } while (!JPRIME);\n      K = K + 1;\n      P[K] = J;    }    {      PAGENUMBER = 1;\n      PAGEOFFSET = 1;\n      while (PAGEOFFSET <= M) {        System.out.println(\"The First \" + M +                              \" Prime Numbers --- Page \" + PAGENUMBER);        System.out.println(\"\");\n        for (ROWOFFSET = PAGEOFFSET; ROWOFFSET < PAGEOFFSET + RR; ROWOFFSET++){\n          for (C = 0; C < CC;C++)            if (ROWOFFSET + C * RR <= M)              System.out.format(\"%10d\", P[ROWOFFSET + C * RR]);          System.out.println(\"\");\n        }\n        System.out.println(\"\\f\");        PAGENUMBER = PAGENUMBER + 1;        PAGEOFFSET = PAGEOFFSET + RR * CC;      }\n    }\n  }}\nListing 10-5 (continued)\nPrintPrimes.java", "143Classes Should Be Small!\nThis program, written as a single function, is a mess. It has a deeply indented struc-\nture, a plethora of odd variables, and a tightly coupled structure. At the very least, the one\nbig function should be split up into a few smaller functions.\nListing 10-6 through Listing 10-8 show the result of splitting the code in Listing 10-5\ninto smaller classes and functions, and choosing meaningful names for those classes, func-\ntions, and variables.   \nListing 10-6 \nPrimePrinter.java (refactored)\npackage literatePrimes;\npublic class PrimePrinter {\n  public static void main(String[] args) {\n    final int NUMBER_OF_PRIMES = 1000;    int[] primes = PrimeGenerator.generate(NUMBER_OF_PRIMES);\n    final int ROWS_PER_PAGE = 50;\n    final int COLUMNS_PER_PAGE = 4;\n    RowColumnPagePrinter tablePrinter =      new RowColumnPagePrinter(ROWS_PER_PAGE,                               COLUMNS_PER_PAGE,\n\"The First \" + NUMBER_OF_PRIMES + \n                                 \" Prime Numbers\");\n    tablePrinter.print(primes);\n  }\n}\nListing 10-7 \nRowColumnPagePrinter.java\npackage literatePrimes;\nimport java.io.PrintStream;\npublic class RowColumnPagePrinter {\n  private int rowsPerPage;  private int columnsPerPage;  private int numbersPerPage;\n  private String pageHeader;\n  private PrintStream printStream;\n  public RowColumnPagePrinter(int rowsPerPage,\n                              int columnsPerPage,\n                              String pageHeader) {\n    this.rowsPerPage = rowsPerPage;    this.columnsPerPage = columnsPerPage;    this.pageHeader = pageHeader;    numbersPerPage = rowsPerPage * columnsPerPage;\n    printStream = System.out;\n  }", "144 Chapter 10: Classes\n  public void print(int data[]) {\n    int pageNumber = 1;    for (int firstIndexOnPage = 0;\n         firstIndexOnPage < data.length;\n         firstIndexOnPage += numbersPerPage) {      int lastIndexOnPage =         Math.min(firstIndexOnPage + numbersPerPage - 1,                  data.length - 1);      printPageHeader(pageHeader, pageNumber);\n      printPage(firstIndexOnPage, lastIndexOnPage, data);\n      printStream.println(\"\\f\");      pageNumber++;    }  }\n  private void printPage(int firstIndexOnPage,\n                         int lastIndexOnPage,                         int[] data) {    int firstIndexOfLastRowOnPage = \n      firstIndexOnPage + rowsPerPage - 1;\n    for (int firstIndexInRow = firstIndexOnPage;          firstIndexInRow <= firstIndexOfLastRowOnPage;          firstIndexInRow++) {\n      printRow(firstIndexInRow, lastIndexOnPage, data);\n      printStream.println(\"\");    }  }\n  private void printRow(int firstIndexInRow, \n                        int lastIndexOnPage,                         int[] data) {    for (int column = 0; column < columnsPerPage; column++) {      int index = firstIndexInRow + column * rowsPerPage;\n      if (index <= lastIndexOnPage)\n        printStream.format(\"%10d\", data[index]);    }  }\n  private void printPageHeader(String pageHeader, \n                               int pageNumber) {    printStream.println(pageHeader + \" --- Page \" + pageNumber);    printStream.println(\"\");  }\n  public void setOutput(PrintStream printStream) {\n    this.printStream = printStream;  }}\nListing 10-7 (continued)\nRowColumnPagePrinter.java", "145Classes Should Be Small!\nListing 10-8 \nPrimeGenerator.java\npackage literatePrimes;\nimport java.util.ArrayList;\npublic class PrimeGenerator {\n  private static int[] primes;  private static ArrayList<Integer> multiplesOfPrimeFactors;\n  protected static int[] generate(int n) {\n    primes = new int[n];    multiplesOfPrimeFactors = new ArrayList<Integer>();    set2AsFirstPrime();    checkOddNumbersForSubsequentPrimes();\n    return primes;\n  }\n  private static void set2AsFirstPrime() {\n    primes[0] = 2;\n    multiplesOfPrimeFactors.add(2);\n  }\n  private static void checkOddNumbersForSubsequentPrimes() {\n    int primeIndex = 1;\n    for (int candidate = 3;\n         primeIndex < primes.length;         candidate += 2) {      if (isPrime(candidate))\n        primes[primeIndex++] = candidate;\n    }  }\n  private static boolean isPrime(int candidate) {\n    if (isLeastRelevantMultipleOfNextLargerPrimeFactor(candidate)) {\n      multiplesOfPrimeFactors.add(candidate);      return false;    }    return isNotMultipleOfAnyPreviousPrimeFactor(candidate);\n  }\n  private static boolean\n  isLeastRelevantMultipleOfNextLargerPrimeFactor(int candidate) {    int nextLargerPrimeFactor = primes[multiplesOfPrimeFactors.size()];\n    int leastRelevantMultiple = nextLargerPrimeFactor * nextLargerPrimeFactor;\n    return candidate == leastRelevantMultiple;  }\n  private static boolean \n  isNotMultipleOfAnyPreviousPrimeFactor(int candidate) {\n    for (int n = 1; n < multiplesOfPrimeFactors.size(); n++) {\n      if (isMultipleOfNthPrimeFactor(candidate, n))\n        return false;\n    }", "146 Chapter 10: Classes\nThe \ufb01rst thing you might notice is that the program got a lot longer. It went from a\nlittle over one page to nearly three pages in length. There are several reasons for this\ngrowth. First, the refactored program uses longer, more descriptive variable names.\nSecond, the refactored program uses function and class declarations as a way to add\ncommentary to the code. Third, we used whitespace and formatting techniques to keep\nthe program readable. \nNotice how the program has been split into three main responsibilities. The main\nprogram is contained in the PrimePrinter class all by itself. Its responsibility is to handle\nthe execution environment. It will change if the method of invocation changes. For\nexample, if this program were converted to a SOAP service, this is the class that would\nbe affected.\nThe RowColumnPagePrinter knows all about how to format a list of numbers into\npages with a certain number of rows and columns. If the formatting of the output needed\nchanging, then this is the class that would be affected.\nThe PrimeGenerator class knows how to generate a list prime numbers. Notice that it\nis not meant to be instantiated as an object. The class is just a useful scope in which\nits variables can be declared and kept hidden. This class will change if the algorithm for\ncomputing prime numbers changes. \nThis was not a rewrite! We did not start over from scratch and write the program over\nagain. Indeed, if you look closely at the two different programs, you\u2019ll see that they use the\nsame algorithm and mechanics to get their work done. \nThe change was made by writing a test suite that veri\ufb01ed the precise behavior of the\n\ufb01rst program. Then a myriad of tiny little changes were made, one at a time. After each\nchange the program was executed to ensure that the behavior had not changed. One tiny\nstep after another, the \ufb01rst program was cleaned up and transformed into the second.\n    return true;\n  }\n  private static boolean \n  isMultipleOfNthPrimeFactor(int candidate, int n) {    return       candidate == smallestOddNthMultipleNotLessThanCandidate(candidate, n);  }\n  private static int \n  smallestOddNthMultipleNotLessThanCandidate(int candidate, int n) {    int multiple = multiplesOfPrimeFactors.get(n);    while (multiple < candidate)\n      multiple += 2 * primes[n];\n    multiplesOfPrimeFactors.set(n, multiple);    return multiple;  }}\nListing 10-8 (continued)\nPrimeGenerator.java", "147Organizing for Change\nOrganizing for Change\nFor most systems, change is continual. Every change subjects us to the risk that the\nremainder of the system no longer works as intended. In a clean system we organize our\nclasses so as to reduce the risk of change.\nThe Sql class in Listing 10-9 is used to generate properly formed SQL strings given\nappropriate metadata. It\u2019 s a work in progress and, as such, doesn\u2019t yet support SQL func-\ntionality like update statements. When the time comes for the Sql class to support an\nupdate statement, we\u2019ll have to \u201copen up\u201d this class to make modi\ufb01cations. The problem\nwith opening a class is that it introduces risk. Any modi\ufb01cations to the class have the\npotential of breaking other code in the class. It must be fully retested.\nThe Sql class must change when we add a new type of statement. It also must change\nwhen we alter the details of a single statement type\u2014for example, if we need to modify\ntheselect functionality to support subselects. These two reasons to change mean that the\nSql class violates the SRP .\nWe can spot this SRP violation from a simple organizational standpoint. The method\noutline of Sql shows that there are private methods, such as selectWithCriteria, that\nappear to relate only to select statements.\nPrivate method behavior that applies only to a small subset of a class can be a useful\nheuristic for spotting potential areas for improvement. However, the primary spur for tak-\ning action should be system change itself. If the Sql class is deemed logically complete,\nthen we need not worry about separating the responsibilities. If we won\u2019t need update\nfunctionality for the foreseeable future, then we should leave Sql alone. But as soon as we\n\ufb01nd ourselves opening up a class, we should consider \ufb01xing our design.\nWhat if we considered a solution like that in Listing 10-10? Each public interface\nmethod de\ufb01ned in the previous Sql from Listing 10-9 is refactored out to its own derivative\nof the Sql class. Note that the private methods, such as valuesList, move directly where\nListing 10-9 \nA class that must be opened for change\npublic class Sql {\n   public Sql(String table, Column[] columns)   public String create()\n   public String insert(Object[] fields)\n   public String selectAll()   public String findByKey(String keyColumn, String keyValue)   public String select(Column column, String pattern)   public String select(Criteria criteria)\n   public String preparedInsert()\n   private String columnList(Column[] columns)   private String valuesList(Object[] fields, final Column[] columns)   private String selectWithCriteria(String criteria)\n   private String placeholderList(Column[] columns)\n}", "148 Chapter 10: Classes\nthey are needed. The common private behavior is isolated to a pair of utility classes, Where\nand ColumnList.\nListing 10-10 \nA set of closed classes\nabstract public class Sql {\n   public Sql(String table, Column[] columns)   abstract public String generate();\n}\npublic class CreateSql extends Sql {\n   public CreateSql(String table, Column[] columns)   @Override public String generate()\n}\npublic class SelectSql extends Sql {\n   public SelectSql(String table, Column[] columns)   @Override public String generate()\n}\npublic class InsertSql extends Sql {\n   public InsertSql(String table, Column[] columns, Object[] fields)   @Override public String generate()\n   private String valuesList(Object[] fields, final Column[] columns)\n}\npublic class SelectWithCriteriaSql extends Sql {\n   public SelectWithCriteriaSql(\n      String table, Column[] columns, Criteria criteria)\n   @Override public String generate()}\npublic class SelectWithMatchSql extends Sql {\n   public SelectWithMatchSql(\n      String table, Column[] columns, Column column, String pattern)   @Override public String generate()}\npublic class FindByKeySql extends Sql\n   public FindByKeySql(      String table, Column[] columns, String keyColumn, String keyValue)   @Override public String generate()\n}\npublic class PreparedInsertSql extends Sql {\n   public PreparedInsertSql(String table, Column[] columns)   @Override public String generate() {\n   private String placeholderList(Column[] columns)\n}\npublic class Where {\n   public Where(String criteria)   public String generate()}", "149Organizing for Change\nThe code in each class becomes excruciatingly simple. Our required comprehension\ntime to understand any class decreases to almost nothing. The risk that one function could\nbreak another becomes vanishingly small. From a test standpoint, it becomes an easier\ntask to prove all bits of logic in this solution, as the classes are all isolated from one\nanother.\nEqually important, when it\u2019 s time to add the update statements, none of the existing\nclasses need change! We code the logic to build update statements in a new subclass of Sql\nnamed UpdateSql. No other code in the system will break because of this change. \nOur restructured Sql logic represents the best of all worlds. It supports the SRP . It also\nsupports another key OO class design principle known as the Open-Closed Principle, or\nOCP:4 Classes should be open for extension but closed for modi\ufb01cation. Our restructured\nSql class is open to allow new functionality via subclassing, but we can make this change\nwhile keeping every other class closed. We simply drop our UpdateSql class in place.\nWe want to structure our systems so that we muck with as little as possible when we\nupdate them with new or changed features. In an ideal system, we incorporate new fea-\ntures by extending the system, not by making modi\ufb01cations to existing code. \nIsolating from Change\nNeeds will change, therefore code will change. We learned in OO 101 that there are con-\ncrete classes, which contain implementation details (code), and abstract classes, which\nrepresent concepts only. A client class depending upon concrete details is at risk when\nthose details change. We can introduce interfaces and abstract classes to help isolate the\nimpact of those details.\nDependencies upon concrete details create challenges for testing our system. If we\u2019re\nbuilding a Portfolio class and it depends upon an external TokyoStockExchange API to\nderive the portfolio\u2019 s value, our test cases are impacted by the volatility of such a lookup.\nIt\u2019 s hard to write a test when we get a different answer every \ufb01ve minutes!\nInstead of designing Portfolio so that it directly depends upon TokyoStockExchange,\nwe create an interface, StockExchange, that declares a single method:\npublic interface StockExchange {\n   Money currentPrice(String symbol);}\npublic class ColumnList {\n   public ColumnList(Column[] columns)   public String generate()\n}\n4. [PPP].\nListing 10-10 (continued)\nA set of closed classes", "150 Chapter 10: Classes\nWe design TokyoStockExchange to implement this interface. We also make sure that the\nconstructor of Portfolio takes a StockExchange reference as an argument:\npublic Portfolio {\n   private StockExchange exchange;   public Portfolio(StockExchange exchange) {\n      this.exchange = exchange;\n   }   // ...}\nNow our test can create a testable implementation of the StockExchange interface that\nemulates the TokyoStockExchange. This test implementation will \ufb01x the current value for\nany symbol we use in testing. If our test demonstrates purchasing \ufb01ve shares of Microsoft\nfor our portfolio, we code the test implementation to always return $100 per share of\nMicrosoft. Our test implementation of the StockExchange interface reduces to a simple\ntable lookup. We can then write a test that expects $500 for our overall portfolio value.\npublic class PortfolioTest {\n  private FixedStockExchangeStub exchange;  private Portfolio portfolio;\n  @Before\n  protected void setUp() throws Exception {    exchange = new FixedStockExchangeStub();    exchange.fix(\"MSFT\", 100);\n    portfolio = new Portfolio(exchange);\n  }\n  @Test\n  public void GivenFiveMSFTTotalShouldBe500() throws Exception {\n    portfolio.add(5, \"MSFT\");    Assert.assertEquals(500, portfolio.value());  }}\nIf a system is decoupled enough to be tested in this way, it will also be more \ufb02exible\nand promote more reuse. The lack of coupling means that the elements of our system are\nbetter isolated from each other and from change. This isolation makes it easier to under-\nstand each element of the system.\nBy minimizing coupling in this way, our classes adhere to another class design princi-\nple known as the Dependency Inversion Principle (DIP).5 In essence, the DIP says that our\nclasses should depend upon abstractions, not on concrete details.\nInstead of being dependent upon the implementation details of the TokyoStock-\nExchange class, our Portfolio class is now dependent upon the StockExchange interface.\nThe StockExchange interface represents the abstract concept of asking for the current price\nof a symbol. This abstraction isolates all of the speci\ufb01c details of obtaining such a price,\nincluding from where that price is obtained.\n5. [PPP].", "151Bibliography\nBibliography\n[RDD]:  Object Design: Roles, Responsibilities, and Collaborations , Rebecca Wirfs-\nBrock et al., Addison-Wesley, 2002.\n[PPP]:  Agile Software Development: Principles, Patterns, and Practices, Robert C. Martin,\nPrentice Hall, 2002.\n[Knuth92]:  Literate Programming, Donald E. Knuth, Center for the Study of language\nand Information, Leland Stanford Junior University, 1992.", "This page intentionally left blank", "153\n11\nSystems\nby Dr. Kevin Dean Wampler\n\u201cComplexity kills. It sucks the life out of developers,\nit makes products dif\ufb01cult to plan, build, and test. \u201d\n\u2014Ray Ozzie, CTO, Microsoft Corporation", "154 Chapter 11: Systems\nHow Would Y ou Build a City?\nCould you manage all the details yourself? Probably not. Even managing an existing city\nis too much for one person. Y et, cities work (most of the time). They work because cities\nhave teams of people who manage particular parts of the city, the water systems, power\nsystems, traf\ufb01c, law enforcement, building codes, and so forth. Some of those people are\nresponsible for the big picture, while others focus on the details.\nCities also work because they have evolved appropriate levels of abstraction and mod-\nularity that make it possible for individuals and the \u201ccomponents\u201d they manage to work\neffectively, even without understanding the big picture.\nAlthough software teams are often organized like that too, the systems they work on\noften don\u2019t have the same separation of concerns and levels of abstraction. Clean code\nhelps us achieve this at the lower levels of abstraction. In this chapter let us consider how\nto stay clean at higher levels of abstraction, the system level.\nSeparate Constructing a System from Using It\nFirst, consider that construction is a very different process from use. As I write this,\nthere is a new hotel under construction that I see out my window in Chicago. Today it is\na bare concrete box with a construction crane and elevator bolted to the outside. The\nbusy people there all wear hard hats and work clothes. In a year or so the hotel will be\n\ufb01nished. The crane and elevator will be gone. The building will be clean, encased in\nglass window walls and attractive paint. The people working and staying there will look\na lot different too.\nSoftware systems should separate the startup process, when the application objects are\nconstructed and the dependencies are \u201cwired\u201d together, from the runtime logic that takes\nover after startup.\nThe startup process is a concern that any application must address. It is the \ufb01rst con-\ncern that we will examine in this chapter. The separation of concerns is one of the oldest\nand most important design techniques in our craft. \nUnfortunately, most applications don\u2019t separate this concern. The code for the startup\nprocess is ad hoc and it is mixed in with the runtime logic. Here is a typical example:\npublic Service getService() {\n  if (service == null)    service = new MyServiceImpl(...);  // Good enough default for most cases?\n  return service;\n}\nThis is the LAZY INITIALIZATION /EVALUATION idiom, and it has several merits. We\ndon\u2019t incur the overhead of construction unless we actually use the object, and our startup\ntimes can be faster as a result. We also ensure that null is never returned.", "155Separate Constructing a System from Using It\nHowever, we now have a hard-coded dependency on MyServiceImpl and everything its\nconstructor requires (which I have elided). We can\u2019t compile without resolving these\ndependencies, even if we never actually use an object of this type at runtime! \nTesting can be a problem. If MyServiceImpl is a heavyweight object, we will need to\nmake sure that an appropriate T EST DOUBLE1 or MOCK OBJECT gets assigned to the ser-\nvice \ufb01eld before this method is called during unit testing. Because we have construction\nlogic mixed in with normal runtime processing, we should test all execution paths (for\nexample, thenull test and its block). Having both of these responsibilities means that the\nmethod is doing more than one thing, so we are breaking the Single Responsibility Principle\nin a small way.\nPerhaps worst of all, we do not know whether MyServiceImpl is the right object in all\ncases. I implied as much in the comment. Why does the class with this method have to\nknow the global context? Can we ever really know the right object to use here? Is it even\npossible for one type to be right for all possible contexts?\nOne occurrence of LAZY-INITIALIZATION isn\u2019t a serious problem, of course. However,\nthere are normally many instances of little setup idioms like this in applications. Hence,\nthe global setup strategy (if there is one) is scattered across the application, with little\nmodularity and often signi\ufb01cant duplication. \nIf we are diligent about building well-formed and robust systems, we should never let\nlittle, convenient idioms lead to modularity breakdown. The startup process of object con-\nstruction and wiring is no exception. We should modularize this process separately from\nthe normal runtime logic and we should make sure that we have a global, consistent strat-\negy for resolving our major dependencies.\nSeparation of Main\nOne way to separate construction from use is simply to move all aspects of construction to\nmain, or modules called by main, and to design the rest of the system assuming that all\nobjects have been constructed and wired up appropriately. (See Figure 11-1.)\nThe \ufb02ow of control is easy to follow. The main function builds the objects necessary\nfor the system, then passes them to the application, which simply uses them. Notice the\ndirection of the dependency arrows crossing the barrier between main and the application.\nThey all go one direction, pointing away from main. This means that the application has no\nknowledge of main or of the construction process. It simply expects that everything has\nbeen built properly.\nFactories\nSometimes, of course, we need to make the application responsible for when an object gets\ncreated. For example, in an order processing system the application must create the\n1. [Mezzaros07].", "156 Chapter 11: Systems\nLineItem instances to add to an Order. In this case we can use the A BSTRACT FACTORY2\npattern to give the application control of when to build the LineItems, but keep the details\nof that construction separate from the application code. (See Figure 11-2.)\nAgain notice that all the dependencies point from main toward the OrderProcessing\napplication. This means that the application is decoupled from the details of how to\nbuild a LineItem. That capability is held in the LineItemFactoryImplementation , which\nis on the main side of the line. And yet the application is in complete control of when\nthe LineItem instances get built and can even provide application-speci\ufb01c constructor\narguments. \nFigure 11-1\nSeparating construction in main()\n2. [GOF].\nFigure 11-2\nSeparation construction with factory", "157Scaling Up\nDependency Injection\nA powerful mechanism for separating construction from use is Dependency Injection (DI),\nthe application of Inversion of Control (IoC) to dependency management. 3 Inversion of\nControl moves secondary responsibilities from an object to other objects that are dedicated\nto the purpose, thereby supporting the Single Responsibility Principle. In the context of\ndependency management, an object should not take responsibility for instantiating depen-\ndencies itself. Instead, it should pass this responsibility to another \u201cauthoritative\u201d mecha-\nnism, thereby inverting the control. Because setup is a global concern, this authoritative\nmechanism will usually be either the \u201cmain\u201d routine or a special-purpose container.\nJNDI lookups are a \u201cpartial\u201d implementation of DI, where an object asks a directory\nserver to provide a \u201cservice\u201d matching a particular name. \nMyService myService = (MyService)(jndiContext.lookup(\u201cNameOfMyService\u201d));\nThe invoking object doesn\u2019t control what kind of object is actually returned (as long it\nimplements the appropriate interface, of course), but the invoking object still actively\nresolves the dependency.\nTrue Dependency Injection goes one step further. The class takes no direct steps to\nresolve its dependencies; it is completely passive. Instead, it provides setter methods or\nconstructor arguments (or both) that are used to inject the dependencies. During the con-\nstruction process, the DI container instantiates the required objects (usually on demand)\nand uses the constructor arguments or setter methods provided to wire together the depen-\ndencies. Which dependent objects are actually used is speci\ufb01ed through a con\ufb01guration\n\ufb01le or programmatically in a special-purpose construction module. \nThe Spring Framework provides the best known DI container for Java. 4 Y ou de\ufb01ne\nwhich objects to wire together in an XML con\ufb01guration \ufb01le, then you ask for particular\nobjects by name in Java code. We will look at an example shortly.\nBut what about the virtues of LAZY-INITIALIZATION? This idiom is still sometimes\nuseful with DI. First, most DI containers won\u2019t construct an object until needed. Second,\nmany of these containers provide mechanisms for invoking factories or for constructing\nproxies, which could be used for LAZY-EVALUATION and similar optimizations.5\nScaling Up\nCities grow from towns, which grow from settlements. At \ufb01rst the roads are narrow and\npractically nonexistent, then they are paved, then widened over time. Small buildings and\n3. See, for example, [Fowler].\n4. See [Spring]. There is also a Spring.NET framework.\n5. Don\u2019t forget that lazy instantiation/evaluation is just an optimization and perhaps premature!", "158 Chapter 11: Systems\nempty plots are \ufb01lled with larger buildings, some of which will eventually be replaced\nwith skyscrapers.\nAt \ufb01rst there are no services like power, water, sewage, and the Internet (gasp!). These\nservices are also added as the population and building densities increase.\nThis growth is not without pain. How many times have you driven, bumper to bumper\nthrough a road \u201cimprovement\u201d project and asked yourself, \u201cWhy didn\u2019t they build it wide\nenough the \ufb01rst time!?\u201d\nBut it couldn\u2019t have happened any other way. Who can justify the expense of a six-\nlane highway through the middle of a small town that anticipates growth? Who would\nwant such a road through their town? \nIt is a myth that we can get systems \u201cright the \ufb01rst time.\u201d Instead, we should imple-\nment only today\u2019 s stories, then refactor and expand the system to implement new stories\ntomorrow. This is the essence of iterative and incremental agility. Test-driven develop-\nment, refactoring, and the clean code they produce make this work at the code level.\nBut what about at the system level? Doesn\u2019t the system architecture require preplan-\nning? Certainly, it can\u2019t grow incrementally from simple to complex, can it?\nSoftware systems are unique compared to physical systems. Their architectures can grow\nincrementally, if we maintain the proper separation of concerns.\nThe ephemeral nature of software systems makes this possible, as we will see. Let us \ufb01rst\nconsider a counterexample of an architecture that doesn\u2019t separate concerns adequately.\nThe original EJB1 and EJB2 architectures did not separate concerns appropriately and\nthereby imposed unnecessary barriers to organic growth. Consider an Entity Bean for a\npersistent Bank class. An entity bean is an in-memory representation of relational data, in\nother words, a table row. \nFirst, you had to de\ufb01ne a local (in process) or remote (separate JVM) interface, which\nclients would use. Listing 11-1 shows a possible local interface:\nListing 11-1 \nAn EJB2 local interface for a Bank EJB\npackage com.example.banking;\nimport java.util.Collections;import javax.ejb.*;\npublic interface BankLocal extends java.ejb.EJBLocalObject {\n  String getStreetAddr1() throws EJBException;  String getStreetAddr2() throws EJBException;  String getCity() throws EJBException;\n  String getState() throws EJBException;\n  String getZipCode() throws EJBException;  void setStreetAddr1(String street1) throws EJBException;  void setStreetAddr2(String street2) throws EJBException;  void setCity(String city) throws EJBException;\n  void setState(String state) throws EJBException;", "159Scaling Up\nI have shown several attributes for the Bank\u2019 s address and a collection of accounts that\nthe bank owns, each of which would have its data handled by a separate Account EJB.\nListing 11-2 shows the corresponding implementation class for the Bank bean.\n  void setZipCode(String zip) throws EJBException;\n  Collection getAccounts() throws EJBException;  void setAccounts(Collection accounts) throws EJBException;\n  void addAccount(AccountDTO accountDTO) throws EJBException;\n}\nListing 11-2 \nThe corresponding EJB2 Entity Bean Implementation\npackage com.example.banking;\nimport java.util.Collections;import javax.ejb.*;\npublic abstract class Bank implements javax.ejb.EntityBean {\n  // Business logic...  public abstract String getStreetAddr1();  public abstract String getStreetAddr2();\n  public abstract String getCity();\n  public abstract String getState();  public abstract String getZipCode();  public abstract void setStreetAddr1(String street1);\n  public abstract void setStreetAddr2(String street2);\n  public abstract void setCity(String city);  public abstract void setState(String state);  public abstract void setZipCode(String zip);  public abstract Collection getAccounts();\n  public abstract void setAccounts(Collection accounts);\n  public void addAccount(AccountDTO accountDTO) {    InitialContext context = new InitialContext();    AccountHomeLocal accountHome = context.lookup(\"AccountHomeLocal\");    AccountLocal account = accountHome.create(accountDTO);\n    Collection accounts = getAccounts();\n    accounts.add(account);  }  // EJB container logic\n  public abstract void setId(Integer id);\n  public abstract Integer getId();  public Integer ejbCreate(Integer id) { ... }  public void ejbPostCreate(Integer id) { ... }  // The rest had to be implemented but were usually empty:\n  public void setEntityContext(EntityContext ctx) {} \n  public void unsetEntityContext() {}  public void ejbActivate() {}  public void ejbPassivate() {}  public void ejbLoad() {}\n  public void ejbStore() {}\n  public void ejbRemove() {}}\nListing 11-1 (continued)\nAn EJB2 local interface for a Bank EJB", "160 Chapter 11: Systems\nI haven\u2019t shown the corresponding LocalHome interface, essentially a factory used to\ncreate objects, nor any of the possible Bank \ufb01nder (query) methods you might add. \nFinally, you had to write one or more XML deployment descriptors that specify the\nobject-relational mapping details to a persistence store, the desired transactional behavior,\nsecurity constraints, and so on.\nThe business logic is tightly coupled to the EJB2 application \u201ccontainer.\u201d Y ou must\nsubclass container types and you must provide many lifecycle methods that are required\nby the container. \nBecause of this coupling to the heavyweight container, isolated unit testing is dif\ufb01cult.\nIt is necessary to mock out the container, which is hard, or waste a lot of time deploying\nEJBs and tests to a real server. Reuse outside of the EJB2 architecture is effectively impos-\nsible, due to the tight coupling. \nFinally, even object-oriented programming is undermined. One bean cannot inherit\nfrom another bean. Notice the logic for adding a new account. It is common in EJB2 beans\nto de\ufb01ne \u201cdata transfer objects\u201d (DTOs) that are essentially \u201cstructs\u201d with no behavior.\nThis usually leads to redundant types holding essentially the same data, and it requires\nboilerplate code to copy data from one object to another.\nCross-Cutting Concerns\nThe EJB2 architecture comes close to true separation of concerns in some areas. For\nexample, the desired transactional, security, and some of the persistence behaviors are\ndeclared in the deployment descriptors, independently of the source code. \nNote that concerns like persistence tend to cut across the natural object boundaries of\na domain. Y ou want to persist all your objects using generally the same strategy, for exam-\nple, using a particular DBMS 6 versus \ufb02at \ufb01les, following certain naming conventions for\ntables and columns, using consistent transactional semantics, and so on.\nIn principle, you can reason about your persistence strategy in a modular, encapsulated\nway. Y et, in practice, you have to spread essentially the same code that implements the persis-\ntence strategy across many objects. We use the term cross-cutting concerns for concerns like\nthese. Again, the persistence framework might be modular and our domain logic, in isola-\ntion, might be modular. The problem is the \ufb01ne-grained intersection of these domains.\nIn fact, the way the EJB architecture handled persistence, security, and transactions ,\n\u201canticipated\u201d aspect-oriented programming (AOP),7 which is a general-purpose approach\nto restoring modularity for cross-cutting concerns.\nIn AOP , modular constructs called aspects specify which points in the system should\nhave their behavior modi\ufb01ed in some consistent way to support a particular concern. This\nspeci\ufb01cation is done using a succinct declarative or programmatic mechanism. \n6. Database management system.\n7. See [AOSD] for general information on aspects and [AspectJ]] and [Colyer] for AspectJ-speci\ufb01c information.", "161Java Proxies\nUsing persistence as an example, you would declare which objects and attributes (or\npatterns thereof) should be persisted and then delegate the persistence tasks to your persis-\ntence framework. The behavior modi\ufb01cations are made noninvasively8 to the target code\nby the AOP framework. Let us look at three aspects or aspect-like mechanisms in Java.\nJava Proxies\nJava proxies are suitable for simple situations, such as wrapping method calls in individual\nobjects or classes. However, the dynamic proxies provided in the JDK only work with\ninterfaces. To proxy classes, you have to use a byte-code manipulation library, such as\nCGLIB, ASM, or Javassist.9\nListing 11-3 shows the skeleton for a JDK proxy to provide persistence support for\nour Bank application, covering only the methods for getting and setting the list of accounts.\n8. Meaning no manual editing of the target source code is required.\n9. See [CGLIB], [ASM], and [Javassist].\nListing 11-3 \nJDK Proxy Example\n// Bank.java (suppressing package names...)\nimport java.utils.*;\n// The abstraction of a bank.\npublic interface Bank {  Collection<Account> getAccounts();  void setAccounts(Collection<Account> accounts);}\n// BankImpl.java\nimport java.utils.*;\n// The \u201cPlain Old Java Object\u201d (POJO) implementing the abstraction.\npublic class BankImpl implements Bank {\n  private List<Account> accounts;\n  public Collection<Account> getAccounts() { \n    return accounts; \n  }  public void setAccounts(Collection<Account> accounts) {     this.accounts = new ArrayList<Account>();     for (Account account: accounts) {\n      this.accounts.add(account);\n    }  }}\n// BankProxyHandler.java\nimport java.lang.reflect.*;import java.util.*;", "162 Chapter 11: Systems\nWe de\ufb01ned an interface Bank, which will be wrapped by the proxy, and a Plain-Old\nJava Object (POJO), BankImpl, that implements the business logic. (We will revisit POJOs\nshortly.)\nThe Proxy API requires an InvocationHandler object that it calls to implement any\nBank method calls made to the proxy. Our BankProxyHandler uses the Java re\ufb02ection\nAPI to map the generic method invocations to the corresponding methods in BankImpl,\nand so on.\nThere is a lot of code here and it is relatively complicated, even for this simple case.10\nUsing one of the byte-manipulation libraries is similarly challenging. This code \u201cvolume\u201d\n// \u201cInvocationHandler\u201d required by the proxy API.\npublic class BankProxyHandler implements InvocationHandler {  private Bank bank;\n  public BankHandler (Bank bank) {\n    this.bank = bank;  }\n  // Method defined in InvocationHandler\n  public Object invoke(Object proxy, Method method, Object[] args)       throws Throwable {    String methodName = method.getName();    if (methodName.equals(\"getAccounts\")) {      bank.setAccounts(getAccountsFromDatabase());\n      return bank.getAccounts();\n    } else if (methodName.equals(\"setAccounts\")) {      bank.setAccounts((Collection<Account>) args[0]);      setAccountsToDatabase(bank.getAccounts());\n      return null;\n    } else {      ...    }  }\n  // Lots of details here:\n  protected Collection<Account> getAccountsFromDatabase() { ... }  protected void setAccountsToDatabase(Collection<Account> accounts) { ... }}\n// Somewhere else...\nBank bank = (Bank) Proxy.newProxyInstance(\n  Bank.class.getClassLoader(), \n  new Class[] { Bank.class },\n  new BankProxyHandler(new BankImpl()));\n10. For more detailed examples of the Proxy API and examples of its use, see, for example, [Goetz].\nListing 11-3 (continued)\nJDK Proxy Example", "163Pure Java AOP Frameworks\nand complexity are two of the drawbacks of proxies. They make it hard to create clean\ncode! Also, proxies don\u2019t provide a mechanism for specifying system-wide execution\n\u201cpoints\u201d of interest, which is needed for a true AOP solution.11\nPure Java AOP Frameworks\nFortunately, most of the proxy boilerplate can be handled automatically by tools. Proxies\nare used internally in several Java frameworks, for example, Spring AOP and JBoss AOP ,\nto implement aspects in pure Java.12 In Spring, you write your business logic as Plain-Old\nJava Objects. POJOs are purely focused on their domain. They have no dependencies on\nenterprise frameworks (or any other domains). Hence, they are conceptually simpler and\neasier to test drive. The relative simplicity makes it easier to ensure that you are imple-\nmenting the corresponding user stories correctly and to maintain and evolve the code for\nfuture stories. \nY ou incorporate the required application infrastructure, including cross-cutting con-\ncerns like persistence, transactions, security, caching, failover, and so on, using declara-\ntive con\ufb01guration \ufb01les or APIs. In many cases, you are actually specifying Spring or\nJBoss library aspects, where the framework handles the mechanics of using Java proxies\nor byte-code libraries transparently to the user. These declarations drive the dependency\ninjection (DI) container, which instantiates the major objects and wires them together on\ndemand.\nListing 11-4 shows a typical fragment of a Spring V2.5 con\ufb01guration \ufb01le, app.xml13:\n11. AOP is sometimes confused with techniques used to implement it, such as method interception and \u201cwrapping\u201d through \nproxies. The real value of an AOP system is the ability to specify systemic behaviors in a concise and modular way. \n12. See [Spring] and [JBoss]. \u201cPure Java\u201d means without the use of AspectJ.\nListing 11-4 \nSpring 2.X configuration file\n<beans>\n  ...  <bean id=\"appDataSource\"\nclass=\"org.apache.commons.dbcp.BasicDataSource\"\ndestroy-method=\"close\"p:driverClassName=\"com.mysql.jdbc.Driver\"p:url=\"jdbc:mysql://localhost:3306/mydb\"p:username=\"me\"/>\n  <bean id=\"bankDataAccessObject\"\nclass=\"com.example.banking.persistence.BankDataAccessObject\"p:dataSource-ref=\"appDataSource\"/>\n  <bean id=\"bank\" \n13. Adapted from http://www.theserverside.com/tt/articles/article.tss?l=IntrotoSpring25", "164 Chapter 11: Systems\nEach \u201cbean\u201d is like one part of a nested \u201cRussian doll,\u201d with a domain object for a\nBank proxied (wrapped) by a data accessor object (DAO), which is itself proxied by a\nJDBC driver data source. (See Figure 11-3.)\nThe client believes it is invoking getAccounts() on a Bank object, but it is actually talk-\ning to the outermost of a set of nested DECORATOR14 objects that extend the basic behavior\nof the Bank POJO. We could add other decorators for transactions, caching, and so forth.\nIn the application, a few lines are needed to ask the DI container for the top-level\nobjects in the system, as speci\ufb01ed in the XML \ufb01le.\nXmlBeanFactory bf =\nnew XmlBeanFactory(new ClassPathResource(\"app.xml\", getClass()));\nBank bank = (Bank) bf.getBean(\"bank\");\nBecause so few lines of Spring-speci\ufb01c Java code are required, the application is almost\ncompletely decoupled from Spring, eliminating all the tight-coupling problems of systems\nlike EJB2.\nAlthough XML can be verbose and hard to read,15 the \u201cpolicy\u201d speci\ufb01ed in these con-\n\ufb01guration \ufb01les is simpler than the complicated proxy and aspect logic that is hidden from\nview and created automatically. This type of architecture is so compelling that frame-\nworks like Spring led to a complete overhaul of the EJB standard for version 3. EJB3\nclass=\"com.example.banking.model.Bank\"\np:dataAccessObject-ref=\"bankDataAccessObject\"/>\n  ...\n</beans>\nFigure 11-3\nThe \u201cRussian doll\u201d of decorators\n14. [GOF].\n15. The example can be simpli\ufb01ed using mechanisms that exploit convention over con\ufb01gurationand Java 5 annotations to reduce \nthe amount of explicit \u201cwiring\u201d logic required.\nListing 11-4 (continued)\nSpring 2.X configuration file", "165Pure Java AOP Frameworks\nlargely follows the Spring model of declaratively supporting cross-cutting concerns using\nXML con\ufb01guration \ufb01les and/or Java 5 annotations. \nListing 11-5 shows our Bank object rewritten in EJB316.\nListing 11-5 \nAn EBJ3 Bank EJB\npackage com.example.banking.model;\nimport javax.persistence.*;import java.util.ArrayList;\nimport java.util.Collection;\n@Entity\n@Table(name = \"BANKS\")public class Bank implements java.io.Serializable {\n   @Id @GeneratedValue(strategy=GenerationType.AUTO)\n   private int id;\n   @Embeddable // An object \u201cinlined\u201d in Bank\u2019s DB row\n   public class Address { \n      protected String streetAddr1; \n      protected String streetAddr2;       protected String city;       protected String state;       protected String zipCode; \n   }\n   @Embedded\n   private Address address;\n   @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, \n              mappedBy=\"bank\")   private Collection<Account> accounts = new ArrayList<Account>();\n   public int getId() {\n      return id;   }\n   public void setId(int id) {\n      this.id = id;\n   }\n   public void addAccount(Account account) {\n      account.setBank(this);\n      accounts.add(account);\n   }\n   public Collection<Account> getAccounts() {\n      return accounts;\n   }\n16. Adapted from http://www.onjava.com/pub/a/onjava/2006/05/17/standardizing-with-ejb3-java-persistence-api.html", "166 Chapter 11: Systems\nThis code is much cleaner than the original EJB2 code. Some of the entity details are\nstill here, contained in the annotations. However, because none of that information is out-\nside of the annotations, the code is clean, clear, and hence easy to test drive, maintain, and\nso on.\nSome or all of the persistence information in the annotations can be moved to XML\ndeployment descriptors, if desired, leaving a truly pure POJO. If the persistence mapping\ndetails won\u2019t change frequently, many teams may choose to keep the annotations, but with\nfar fewer harmful drawbacks compared to the EJB2 invasiveness. \nAspectJ Aspects\nFinally, the most full-featured tool for separating concerns through aspects is the AspectJ\nlanguage,17 an extension of Java that provides \u201c\ufb01rst-class\u201d support for aspects as modular-\nity constructs. The pure Java approaches provided by Spring AOP and JBoss AOP are suf-\n\ufb01cient for 80\u201390 percent of the cases where aspects are most useful. However, AspectJ\nprovides a very rich and powerful tool set for separating concerns. The drawback of\nAspectJ is the need to adopt several new tools and to learn new language constructs and\nusage idioms. \nThe adoption issues have been partially mitigated by a recently introduced \u201cannota-\ntion form\u201d of AspectJ, where Java 5 annotations are used to de\ufb01ne aspects using pure Java\ncode. Also, the Spring Framework has a number of features that make incorporation of\nannotation-based aspects much easier for a team with limited AspectJ experience.\nA full discussion of AspectJ is beyond the scope of this book. See [AspectJ], [Colyer],\nand [Spring] for more information. \nTest Drive the System Architecture\nThe power of separating concerns through aspect-like approaches can\u2019t be overstated. If\nyou can write your application\u2019 s domain logic using POJOs, decoupled from any architec-\nture concerns at the code level, then it is possible to truly test drive your architecture. Y ou\ncan evolve it from simple to sophisticated, as needed, by adopting new technologies on\n   public void setAccounts(Collection<Account> accounts) {\n      this.accounts = accounts;   }\n}\n17. See [AspectJ] and [Colyer].\nListing 11-5 (continued)\nAn EBJ3 Bank EJB", "167Optimize Decision Making\ndemand. It is not necessary to do a Big Design Up Front18 (BDUF). In fact, BDUF is even\nharmful because it inhibits adapting to change, due to the psychological resistance to dis-\ncarding prior effort and because of the way architecture choices in\ufb02uence subsequent\nthinking about the design. \nBuilding architects have to do BDUF because it is not feasible to make radical archi-\ntectural changes to a large physical structure once construction is well underway. 19\nAlthough software has its own physics,20 it is economically feasible to make radical\nchange, if the structure of the software separates its concerns effectively. \nThis means we can start a software project with a \u201cnaively simple\u201d but nicely decou-\npled architecture, delivering working user stories quickly, then adding more infrastructure\nas we scale up. Some of the world\u2019 s largest Web sites have achieved very high availability\nand performance, using sophisticated data caching, security, virtualization, and so forth,\nall done ef\ufb01ciently and \ufb02exibly because the minimally coupled designs are appropriately\nsimple at each level of abstraction and scope.\nOf course, this does not mean that we go into a project \u201crudderless.\u201d We have some\nexpectations of the general scope, goals, and schedule for the project, as well as the gen-\neral structure of the resulting system. However, we must maintain the ability to change\ncourse in response to evolving circumstances.   \nThe early EJB architecture is but one of many well-known APIs that are over-engi-\nneered and that compromise separation of concerns. Even well-designed APIs can be over-\nkill when they aren\u2019t really needed. A good API should largely disappear from view most\nof the time, so the team expends the majority of its creative efforts focused on the user sto-\nries being implemented. If not, then the architectural constraints will inhibit the ef\ufb01cient\ndelivery of optimal value to the customer. \nTo recap this long discussion,\nAn optimal system architecture consists of modularized domains of concern, each of which\nis implemented with Plain Old Java (or other) Objects. The different domains are inte-\ngrated together with minimally invasive Aspects or Aspect-like tools. This architecture can\nbe test-driven, just like the code.\nOptimize Decision Making\nModularity and separation of concerns make decentralized management and decision\nmaking possible. In a suf\ufb01ciently large system, whether it is a city or a software project, no\none person can make all the decisions.\n18. Not to be confused with the good practice of up-front design, BDUF is the practice of designing everything up front before \nimplementing anything at all. \n19. There is still a signi\ufb01cant amount of iterative exploration and discussion of details, even after construction starts.\n20. The term software physics was \ufb01rst used by [Kolence].", "168 Chapter 11: Systems\nWe all know it is best to give responsibilities to the most quali\ufb01ed persons. We often\nforget that it is also best to postpone decisions until the last possible moment . This isn\u2019t\nlazy or irresponsible; it lets us make informed choices with the best possible information.\nA premature decision is a decision made with suboptimal knowledge. We will have that\nmuch less customer feedback, mental re\ufb02ection on the project, and experience with our\nimplementation choices if we decide too soon. \nThe agility provided by a POJO system with modularized concerns allows us to make opti-\nmal, just-in-time decisions, based on the most recent knowledge. The complexity of these\ndecisions is also reduced.\nUse Standards Wisely, When They Add Demonstrable V alue\nBuilding construction is a marvel to watch because of the pace at which new buildings are\nbuilt (even in the dead of winter) and because of the extraordinary designs that are possi-\nble with today\u2019 s technology. Construction is a mature industry with highly optimized parts,\nmethods, and standards that have evolved under pressure for centuries. \nMany teams used the EJB2 architecture because it was a standard, even when lighter-\nweight and more straightforward designs would have been suf\ufb01cient. I have seen teams\nbecome obsessed with various strongly hyped standards and lose focus on implementing\nvalue for their customers.\nStandards make it easier to reuse ideas and components, recruit people with relevant expe-\nrience, encapsulate good ideas, and wire components together. However, the process of\ncreating standards can sometimes take too long for industry to wait, and some standards\nlose touch with the real needs of the adopters they are intended to serve.\nSystems Need Domain-Speci\ufb01c Languages\nBuilding construction, like most domains, has developed a rich language with a vocabu-\nlary, idioms, and patterns21 that convey essential information clearly and concisely. In soft-\nware, there has been renewed interest recently in creating Domain-Speci\ufb01c Languages\n(DSLs),22 which are separate, small scripting languages or APIs in standard languages that\npermit code to be written so that it reads like a structured form of prose that a domain\nexpert might write. \nA good DSL minimizes the \u201ccommunication gap\u201d between a domain concept and the\ncode that implements it, just as agile practices optimize the communications within a\nteam and with the project\u2019 s stakeholders. If you are implementing domain logic in the\n21. The work of [Alexander] has been particularly in\ufb02uential on the software community.\n22. See, for example, [DSL]. [JMock] is a good example of a Java API that creates a DSL.", "169Bibliography\nsame language that a domain expert uses, there is less risk that you will incorrectly trans-\nlate the domain into the implementation.\nDSLs, when used effectively, raise the abstraction level above code idioms and design\npatterns. They allow the developer to reveal the intent of the code at the appropriate level\nof abstraction. \nDomain-Speci\ufb01c Languages allow all levels of abstraction and all domains in the applica-\ntion to be expressed as POJOs, from high-level policy to low-level details. \nConclusion\nSystems must be clean too. An invasive architecture overwhelms the domain logic and\nimpacts agility. When the domain logic is obscured, quality suffers because bugs \ufb01nd it\neasier to hide and stories become harder to implement. If agility is compromised, produc-\ntivity suffers and the bene\ufb01ts of TDD are lost. \nAt all levels of abstraction, the intent should be clear. This will only happen if you\nwrite POJOs and you use aspect-like mechanisms to incorporate other implementation\nconcerns noninvasively. \nWhether you are designing systems or individual modules, never forget to use the\nsimplest thing that can possibly work.\nBibliography\n[Alexander]:  Christopher Alexander, A Timeless W ay of Building, Oxford University\nPress, New Y ork, 1979.\n[AOSD]:  Aspect-Oriented Software Development port, http://aosd.net\n[ASM]:  ASM Home Page, http://asm.objectweb.org/\n[AspectJ]:  http://eclipse.org/aspectj\n[CGLIB]:  Code Generation Library, http://cglib.sourceforge.net/\n[Colyer]:  Adrian Colyer, Andy Clement, George Hurley, Mathew Webster, Eclipse\nAspectJ, Person Education, Inc., Upper Saddle River, NJ, 2005.\n[DSL]:  Domain-speci\ufb01c programming language, http://en.wikipedia.org/wiki/Domain-\nspeci\ufb01c_programming_language\n[Fowler]:  Inversion of Control Containers and the Dependency Injection pattern,\nhttp://martinfowler.com/articles/injection.html", "170 Chapter 11: Systems\n[Goetz]:  Brian Goetz, Java Theory and Practice: Decorating with Dynamic Proxie s,\nhttp://www.ibm.com/developerworks/java/library/j-jtp08305.html\n[Javassist]:  Javassist Home Page, http://www.csg.is.titech.ac.jp/~chiba/javassist/\n[JBoss]:  JBoss Home Page, http://jboss.org\n[JMock]:  JMock\u2014A Lightweight Mock Object Library for Java, http://jmock.org\n[Kolence]:  Kenneth W . Kolence, Software physics and computer performance measure-\nments, Proceedings of the ACM annual conference\u2014V olume 2 , Boston, Massachusetts,\npp. 1024\u20131040, 1972. \n[Spring]:  The Spring Framework, http://www.springframework.org\n[Mezzaros07]:  XUnit Patterns, Gerard Mezzaros, Addison-Wesley, 2007.\n[GOF]:  Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al.,\nAddison-Wesley, 1996.", "171\n12\nEmergence\nby Jeff Langr\nGetting Clean via Emergent Design\nWhat if there were four simple rules that you could follow that would help you create good\ndesigns as you worked? What if by following these rules you gained insights into the struc-\nture and design of your code, making it easier to apply principles such as SRP and DIP?\nWhat if these four rules facilitated the emergence of good designs?\nMany of us feel that Kent Beck\u2019 s four rules of Simple Design1 are of signi\ufb01cant help in\ncreating well-designed software.\n1. [XPE].", "172 Chapter 12: Emergence\nAccording to Kent, a design is \u201csimple\u201d if it follows these rules:\n\u2022 Runs all the tests\n\u2022 Contains no duplication\n\u2022 Expresses the intent of the programmer\n\u2022 Minimizes the number of classes and methods\nThe rules are given in order of importance.\nSimple Design Rule 1: Runs All the Tests\nFirst and foremost, a design must produce a system that acts as intended. A system might\nhave a perfect design on paper, but if there is no simple way to verify that the system actu-\nally works as intended, then all the paper effort is questionable.\nA system that is comprehensively tested and passes all of its tests all of the time is a test-\nable system. That\u2019 s an obvious statement, but an important one. Systems that aren\u2019t testable\naren\u2019t veri\ufb01able. Arguably, a system that cannot be veri\ufb01ed should never be deployed.\nFortunately, making our systems testable pushes us toward a design where our classes\nare small and single purpose. It\u2019 s just easier to test classes that conform to the SRP . The\nmore tests we write, the more we\u2019ll continue to push toward things that are simpler to test.\nSo making sure our system is fully testable helps us create better designs.\nTight coupling makes it dif\ufb01cult to write tests. So, similarly, the more tests we write,\nthe more we use principles like DIP and tools like dependency injection, interfaces, and\nabstraction to minimize coupling. Our designs improve even more.\nRemarkably, following a simple and obvious rule that says we need to have tests and\nrun them continuously impacts our system\u2019 s adherence to the primary OO goals of low\ncoupling and high cohesion. Writing tests leads to better designs.\nSimple Design Rules 2\u20134: Refactoring\nOnce we have tests, we are empowered to keep our code and classes clean. We do this by\nincrementally refactoring the code. For each few lines of code we add, we pause and re\ufb02ect\non the new design. Did we just degrade it? If so, we clean it up and run our tests to demon-\nstrate that we haven\u2019t broken anything. The fact that we have these tests eliminates the fear\nthat cleaning up the code will break it!\nDuring this refactoring step, we can apply anything from the entire body of knowledge\nabout good software design. We can increase cohesion, decrease coupling, separate con-\ncerns, modularize system concerns, shrink our functions and classes, choose better names,\nand so on. This is also where we apply the \ufb01nal three rules of simple design: Eliminate\nduplication, ensure expressiveness, and minimize the number of classes and methods.", "173No Duplication\nNo Duplication\nDuplication is the primary enemy of a well-designed system. It represents additional\nwork, additional risk, and additional unnecessary complexity. Duplication manifests\nitself in many forms. Lines of code that look exactly alike are, of course, duplication.\nLines of code that are similar can often be massaged to look even more alike so that\nthey can be more easily refactored. And duplication can exist in other forms such as\nduplication of implementation. For example, we might have two methods in a collection\nclass:\nint size() {}\nboolean isEmpty() {}\nWe could have separate implementations for each method. The isEmpty method could track\na boolean, while size could track a counter. Or, we can eliminate this duplication by tying\nisEmpty to the de\ufb01nition of size:\nboolean isEmpty() {\n   return 0 == size();}\nCreating a clean system requires the will to eliminate duplication, even in just a few\nlines of code. For example, consider the following code:\n    public void scaleToOneDimension(\n         float desiredDimension, float imageDimension) {      if (Math.abs(desiredDimension - imageDimension) < errorThreshold)\n         return;\n      float scalingFactor = desiredDimension / imageDimension;      scalingFactor = (float)(Math.floor(scalingFactor * 100) * 0.01f);\n      RenderedOp newImage = ImageUtilities.getScaledImage(\n         image, scalingFactor, scalingFactor);\n      image.dispose();      System.gc();      image = newImage;\n   }\n   public synchronized void rotate(int degrees) {\n      RenderedOp newImage = ImageUtilities.getRotatedImage(         image, degrees);      image.dispose();      System.gc();      image = newImage;   }\nTo keep this system clean, we should eliminate the small amount of duplication between\nthe scaleToOneDimension and rotate methods:\n    public void scaleToOneDimension(\n         float desiredDimension, float imageDimension) {      if (Math.abs(desiredDimension - imageDimension) < errorThreshold)\n         return;\n      float scalingFactor = desiredDimension / imageDimension;      scalingFactor = (float)(Math.floor(scalingFactor * 100) * 0.01f);", "174 Chapter 12: Emergence\n      replaceImage(ImageUtilities.getScaledImage(\n         image, scalingFactor, scalingFactor));   }\n   public synchronized void rotate(int degrees) {\n      replaceImage(ImageUtilities.getRotatedImage(image, degrees));   }\n   private void replaceImage(RenderedOp newImage) {\n      image.dispose();      System.gc();\n      image = newImage;\n   }\nAs we extract commonality at this very tiny level, we start to recognize violations of SRP .\nSo we might move a newly extracted method to another class. That elevates its visibility.\nSomeone else on the team may recognize the opportunity to further abstract the new\nmethod and reuse it in a different context. This \u201creuse in the small\u201d can cause system com-\nplexity to shrink dramatically. Understanding how to achieve reuse in the small is essential\nto achieving reuse in the large.\nThe TEMPLATE METHOD2 pattern is a common technique for removing higher-level\nduplication. For example: \npublic class VacationPolicy {\n   public void accrueUSDivisionVacation() {      // code to calculate vacation based on hours worked to date\n      // ...\n      // code to ensure vacation meets US minimums      // ...      // code to apply vaction to payroll record      // ...\n   }\n   public void accrueEUDivisionVacation() {\n      // code to calculate vacation based on hours worked to date      // ...      // code to ensure vacation meets EU minimums      // ...      // code to apply vaction to payroll record      // ...\n   }\n}\nThe code across accrueUSDivisionVacation and accrueEuropeanDivisionVacation is largely\nthe same, with the exception of calculating legal minimums. That bit of the algorithm\nchanges based on the employee type.\nWe can eliminate the obvious duplication by applying the TEMPLATE METHOD pattern.\nabstract public class VacationPolicy {\n   public void accrueVacation() {      calculateBaseVacationHours();\n2. [GOF].", "175Expressive\n      alterForLegalMinimums();\n      applyToPayroll();   }\n   private void calculateBaseVacationHours() { /* ... */ };\n   abstract protected void alterForLegalMinimums();\n   private void applyToPayroll() { /* ... */ };}\npublic class USVacationPolicy extends VacationPolicy {\n   @Override protected void alterForLegalMinimums() {\n      // US specific logic   }}\npublic class EUVacationPolicy extends VacationPolicy {\n   @Override protected void alterForLegalMinimums() {      // EU specific logic   }}\nThe subclasses \ufb01ll in the \u201chole\u201d in the accrueVacationalgorithm, supplying the only bits of\ninformation that are not duplicated.\nExpressive\nMost of us have had the experience of working on convoluted code. Many of us have pro-\nduced some convoluted code ourselves. It\u2019 s easy to write code that we understand, because\nat the time we write it we\u2019re deep in an understanding of the problem we\u2019re trying to solve.\nOther maintainers of the code aren\u2019t going to have so deep an understanding.\nThe majority of the cost of a software project is in long-term maintenance. In order to\nminimize the potential for defects as we introduce change, it\u2019 s critical for us to be able to\nunderstand what a system does. As systems become more complex, they take more and\nmore time for a developer to understand, and there is an ever greater opportunity for a mis-\nunderstanding. Therefore, code should clearly express the intent of its author. The clearer\nthe author can make the code, the less time others will have to spend understanding it. This\nwill reduce defects and shrink the cost of maintenance.\nY ou can express yourself by choosing good names. We want to be able to hear a class\nor function name and not be surprised when we discover its responsibilities. \nY ou can also express yourself by keeping your functions and classes small. Small\nclasses and functions are usually easy to name, easy to write, and easy to understand. \nY ou can also express yourself by using standard nomenclature. Design patterns, for\nexample, are largely about communication and expressiveness. By using the standard\npattern names, such as COMMAND or VISITOR, in the names of the classes that imple-\nment those patterns, you can succinctly describe your design to other developers. \nWell-written unit tests are also expressive. A primary goal of tests is to act as docu-\nmentation by example. Someone reading our tests should be able to get a quick under-\nstanding of what a class is all about.", "176 Chapter 12: Emergence\nBut the most important way to be expressive is to try. All too often we get our code\nworking and then move on to the next problem without giving suf\ufb01cient thought to making\nthat code easy for the next person to read. Remember, the most likely next person to read\nthe code will be you. \nSo take a little pride in your workmanship. Spend a little time with each of your func-\ntions and classes. Choose better names, split large functions into smaller functions, and\ngenerally just take care of what you\u2019ve created. Care is a precious resource.\nMinimal Classes and Methods\nEven concepts as fundamental as elimination of duplication, code expressiveness, and the\nSRP can be taken too far. In an effort to make our classes and methods small, we might\ncreate too many tiny classes and methods. So this rule suggests that we also keep our func-\ntion and class counts low. \nHigh class and method counts are sometimes the result of pointless dogmatism. Con-\nsider, for example, a coding standard that insists on creating an interface for each and\nevery class. Or consider developers who insist that \ufb01elds and behavior must always be sep-\narated into data classes and behavior classes. Such dogma should be resisted and a more\npragmatic approach adopted. \nOur goal is to keep our overall system small while we are also keeping our functions\nand classes small. Remember, however, that this rule is the lowest priority of the four rules\nof Simple Design. So, although it\u2019 s important to keep class and function count low, it\u2019 s\nmore important to have tests, eliminate duplication, and express yourself.\nConclusion\nIs there a set of simple practices that can replace experience? Clearly not. On the other\nhand, the practices described in this chapter and in this book are a crystallized form of the\nmany decades of experience enjoyed by the authors. Following the practice of simple\ndesign can and does encourage and enable developers to adhere to good principles and\npatterns that otherwise take years to learn. \nBibliography\n[XPE]:  Extreme Programming Explained: Embrace Change, Kent Beck, Addison-\nWesley, 1999.\n[GOF]:  Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al.,\nAddison-Wesley, 1996.", "177\n13\nConcurrency\nby Brett L. Schuchert\n\u201cObjects are abstractions of processing. Threads are abstractions of schedule. \u201d\n\u2014James O. Coplien1\n1. Private correspondence.", "178 Chapter 13: Concurrency\nWriting clean concurrent programs is hard\u2014very hard. It is much easier to write code that\nexecutes in a single thread. It is also easy to write multithreaded code that looks \ufb01ne on the\nsurface but is broken at a deeper level. Such code works \ufb01ne until the system is placed\nunder stress.\nIn this chapter we discuss the need for concurrent programming, and the dif\ufb01culties\nit presents. We then present several recommendations for dealing with those dif\ufb01culties,\nand writing clean concurrent code. Finally, we conclude with issues related to testing\nconcurrent code. \nClean Concurrency is a complex topic, worthy of a book by itself. Our strategy in this\nbook is to present an overview here and provide a more detailed tutorial in \u201cConcurrency II\u201d\non page 317. If you are just curious about concurrency, then this chapter will suf\ufb01ce for you\nnow. If you have a need to understand concurrency at a deeper level, then you should read\nthrough the tutorial as well. \nWhy Concurrency?\nConcurrency is a decoupling strategy. It helps us decouple what gets done from when it\ngets done. In single-threaded applications what and when are so strongly coupled that the\nstate of the entire application can often be determined by looking at the stack backtrace. A\nprogrammer who debugs such a system can set a breakpoint, or a sequence of breakpoints,\nandknow the state of the system by which breakpoints are hit. \nDecoupling what from when can dramatically improve both the throughput and struc-\ntures of an application. From a structural point of view the application looks like many lit-\ntle collaborating computers rather than one big main loop. This can make the system easier\nto understand and offers some powerful ways to separate concerns. \nConsider, for example, the standard \u201cServlet\u201d model of Web applications. These sys-\ntems run under the umbrella of a Web or EJB container that partially manages concur-\nrency for you. The servlets are executed asynchronously whenever Web requests come in.\nThe servlet programmer does not have to manage all the incoming requests. In principle,\neach servlet execution lives in its own little world and is decoupled from all the other serv-\nlet executions. \nOf course if it were that easy, this chapter wouldn\u2019t be necessary. In fact, the decou-\npling provided by Web containers is far less than perfect. Servlet programmers have to be\nvery aware, and very careful, to make sure their concurrent programs are correct. Still, the\nstructural bene\ufb01ts of the servlet model are signi\ufb01cant. \nBut structure is not the only motive for adopting concurrency. Some systems have\nresponse time and throughput constraints that require hand-coded concurrent solutions.\nFor example, consider a single-threaded information aggregator that acquires information\nfrom many different Web sites and merges that information into a daily summary. Because", "179Why Concurrency?\nthis system is single threaded, it hits each Web site in turn, always \ufb01nishing one before\nstarting the next. The daily run needs to execute in less than 24 hours. However, as more\nand more Web sites are added, the time grows until it takes more than 24 hours to gather\nall the data. The single-thread involves a lot of waiting at Web sockets for I/O to complete.\nWe could improve the performance by using a multithreaded algorithm that hits more than\none Web site at a time.\nOr consider a system that handles one user at a time and requires only one second\nof time per user. This system is fairly responsive for a few users, but as the number of\nusers increases, the system\u2019 s response time increases. No user wants to get in line\nbehind 150 others! We could improve the response time of this system by handling\nmany users concurrently.\nOr consider a system that interprets large data sets but can only give a complete solu-\ntion after processing all of them. Perhaps each data set could be processed on a different\ncomputer, so that many data sets are being processed in parallel.\nMyths and Misconceptions\nAnd so there are compelling reasons to adopt concurrency. However, as we said before,\nconcurrency is hard. If you aren\u2019t very careful, you can create some very nasty situations.\nConsider these common myths and misconceptions:\n\u2022 Concurrency always improves performance.\nConcurrency can sometimes improve performance, but only when there is a lot of wait \ntime that can be shared between multiple threads or multiple processors. Neither situ-\nation is trivial.\n\u2022 Design does not change when writing concurrent programs.\nIn fact, the design of a concurrent algorithm can be remarkably different from the \ndesign of a single-threaded system. The decoupling of what from when usually has a \nhuge effect on the structure of the system. \n\u2022 Understanding concurrency issues is not important when working with a container \nsuch as a W eb or EJB container.\nIn fact, you\u2019 d better know just what your container is doing and how to guard against \nthe issues of concurrent update and deadlock described later in this chapter. \nHere are a few more balanced sound bites regarding writing concurrent software:\n\u2022 Concurrency incurs some overhead,both in performance as well as writing additional \ncode.\n\u2022 Correct concurrency is complex, even for simple problems.", "180 Chapter 13: Concurrency\n\u2022 Concurrency bugs aren\u2019t usually repeatable, so they are often ignored as one-offs2\ninstead of the true defects they are.\n\u2022 Concurrency often requires a fundamental change in design strategy.\nChallenges\nWhat makes concurrent programming so dif\ufb01cult? Consider the following trivial class:\npublic class X {\n   private int lastIdUsed;\n   public int getNextId() {\n        return ++lastIdUsed;    }}\nLet\u2019 s say we create an instance of X, set the lastIdUsed \ufb01eld to 42, and then share the\ninstance between two threads. Now suppose that both of those threads call the method\ngetNextId(); there are three possible outcomes:\n\u2022 Thread one gets the value 43, thread two gets the value 44, lastIdUsed is 44.\n\u2022 Thread one gets the value 44, thread two gets the value 43, lastIdUsed is 44.\n\u2022 Thread one gets the value 43, thread two gets the value 43, lastIdUsed is 43.\nThe surprising third result3 occurs when the two threads step on each other. This hap-\npens because there are many possible paths that the two threads can take through that one\nline of Java code, and some of those paths generate incorrect results. How many different\npaths are there? To really answer that question, we need to understand what the Just-In-\nTime Compiler does with the generated byte-code, and understand what the Java memory\nmodel considers to be atomic.\nA quick answer, working with just the generated byte-code, is that there are 12,870\ndifferent possible execution paths 4 for those two threads executing within the getNextId\nmethod. If the type of lastIdUsed is changed from int to long, the number of possible\npaths increases to 2,704,156. Of course most of those paths generate valid results. The\nproblem is that some of them don\u2019t.\nConcurrency Defense Principles\nWhat follows is a series of principles and techniques for defending your systems from the\nproblems of concurrent code. \n2. Cosmic-rays, glitches, and so on.\n3. See \u201cDigging Deeper\u201d on page 323.\n4. See \u201cPossible Paths of Execution\u201d on page 321.", "181Concurrency Defense Principles\nSingle Responsibility Principle\nThe SRP 5 states that a given method/class/component should have a single reason to\nchange. Concurrency design is complex enough to be a reason to change in it\u2019 s own right\nand therefore deserves to be separated from the rest of the code. Unfortunately, it is all too\ncommon for concurrency implementation details to be embedded directly into other pro-\nduction code. Here are a few things to consider:\n\u2022 Concurrency-related code has its own life cycle of development, change, and tuning.\n\u2022 Concurrency-related code has its own challenges, which are different from and often \nmore dif\ufb01cult than nonconcurrency-related code.\n\u2022 The number of ways in which miswritten concurrency-based code can fail makes it \nchallenging enough without the added burden of surrounding application code.\nRecommendation: Keep your concurrency-related code separate from other code.6\nCorollary: Limit the Scope of Data\nAs we saw, two threads modifying the same \ufb01eld of a shared object can interfere with each\nother, causing unexpected behavior. One solution is to use the synchronized keyword to\nprotect a critical section in the code that uses the shared object. It is important to restrict\nthe number of such critical sections. The more places shared data can get updated, the\nmore likely:\n\u2022 Y ou will forget to protect one or more of those places\u2014effectively breaking all code \nthat modi\ufb01es that shared data.\n\u2022 There will be duplication of effort required to make sure everything is effectively \nguarded (violation of DR Y7).\n\u2022 It will be dif\ufb01cult to determine the source of failures, which are already hard enough \nto \ufb01nd.\nRecommendation: Take data encapsulation to heart; severely limit the access of any\ndata that may be shared.\nCorollary: Use Copies of Data\nA good way to avoid shared data is to avoid sharing the data in the \ufb01rst place. In some sit-\nuations it is possible to copy objects and treat them as read-only. In other cases it might be\npossible to copy objects, collect results from multiple threads in these copies and then\nmerge the results in a single thread.\n5. [PPP]\n6. See \u201cClient/Server Example\u201d on page 317.\n7. [PRAG].", "182 Chapter 13: Concurrency\nIf there is an easy way to avoid sharing objects, the resulting code will be far less likely\nto cause problems. Y ou might be concerned about the cost of all the extra object creation. It is\nworth experimenting to \ufb01nd out if this is in fact a problem. However, if using copies of\nobjects allows the code to avoid synchronizing, the savings in avoiding the intrinsic lock will\nlikely make up for the additional creation and garbage collection overhead.\nCorollary: Threads Should Be as Independent as Possible\nConsider writing your threaded code such that each thread exists in its own world, sharing\nno data with any other thread. Each thread processes one client request, with all of its\nrequired data coming from an unshared source and stored as local variables. This makes\neach of those threads behave as if it were the only thread in the world and there were no\nsynchronization requirements.\nFor example, classes that subclass from HttpServlet receive all of their information\nas parameters passed in to the doGet and doPost methods. This makes each Servlet act\nas if it has its own machine. So long as the code in the Servlet uses only local variables,\nthere is no chance that the Servlet will cause synchronization problems. Of course,\nmost applications using Servlets eventually run into shared resources such as database\nconnections.\nRecommendation: Attempt to partition data into independent subsets than can be\noperated on by independent threads, possibly in different processors.\nKnow Y our Library\nJava 5 offers many improvements for concurrent development over previous versions. There\nare several things to consider when writing threaded code in Java 5:\n\u2022 Use the provided thread-safe collections.\n\u2022 Use the executor framework for executing unrelated tasks.\n\u2022 Use nonblocking solutions when possible.\n\u2022 Several library classes are not thread safe.\nThread-Safe Collections\nWhen Java was young, Doug Lea wrote the seminal book 8 Concurrent Programming in\nJava. Along with the book he developed several thread-safe collections, which later\nbecame part of the JDK in the java.util.concurrentpackage. The collections in that pack-\nage are safe for multithreaded situations and they perform well. In fact, the\n8. [Lea99].", "183Know Y our Execution Models\nConcurrentHashMap implementation performs better than HashMap in nearly all situations. It\nalso allows for simultaneous concurrent reads and writes, and it has methods supporting\ncommon composite operations that are otherwise not thread safe. If Java 5 is the deploy-\nment environment, start with ConcurrentHashMap.\nThere are several other kinds of classes added to support advanced concurrency\ndesign. Here are a few examples:\nRecommendation: Review the classes available to you. In the case of Java, become\nfamiliar with java.util.concurrent, java.util.concurrent.atomic, java.util.concurrent.locks.\nKnow Y our Execution Models\nThere are several different ways to partition behavior in a concurrent application. To dis-\ncuss them we need to understand some basic de\ufb01nitions.\nGiven these de\ufb01nitions, we can now discuss the various execution models used in\nconcurrent programming.\nReentrantLock A lock that can be acquired in one method and released in another. \nSemaphore An implementation of the classic semaphore, a lock with a count. \nCountDownLatch A lock that waits for a number of events before releasing all\nthreads waiting on it. This allows all threads to have a fair chance\nof starting at about the same time.\nBound Resources Resources of a \ufb01xed size or number used in a concurrent environ-\nment. Examples include database connections and \ufb01xed-size read/\nwrite buffers.\nMutual Exclusion Only one thread can access shared data or a shared resource at a\ntime.\nStarvation One thread or a group of threads is prohibited from proceeding\nfor an excessively long time or forever. For example, always let-\nting fast-running threads through \ufb01rst could starve out longer run-\nning threads if there is no end to the fast-running threads.\nDeadlock T wo or more threads waiting for each other to \ufb01nish. Each thread\nhas a resource that the other thread requires and neither can \ufb01nish\nuntil it gets the other resource.\nLivelock Threads in lockstep, each trying to do work but \ufb01nding another\n\u201cin the way.\u201d Due to resonance, threads continue trying to\nmake progress but are unable to for an excessively long time\u2014\nor forever.", "184 Chapter 13: Concurrency\nProducer-Consumer9\nOne or more producer threads create some work and place it in a buffer or queue. One or\nmore consumer threads acquire that work from the queue and complete it. The queue\nbetween the producers and consumers is a bound resource. This means producers must\nwait for free space in the queue before writing and consumers must wait until there is\nsomething in the queue to consume. Coordination between the producers and consumers\nvia the queue involves producers and consumers signaling each other. The producers write\nto the queue and signal that the queue is no longer empty. Consumers read from the queue\nand signal that the queue is no longer full. Both potentially wait to be noti\ufb01ed when they\ncan continue.\nReaders-Writers10\nWhen you have a shared resource that primarily serves as a source of information for read-\ners, but which is occasionally updated by writers, throughput is an issue. Emphasizing\nthroughput can cause starvation and the accumulation of stale information. Allowing\nupdates can impact throughput. Coordinating readers so they do not read something a\nwriter is updating and vice versa is a tough balancing act. Writers tend to block many read-\ners for a long period of time, thus causing throughput issues. \nThe challenge is to balance the needs of both readers and writers to satisfy correct\noperation, provide reasonable throughput and avoiding starvation. A simple strategy\nmakes writers wait until there are no readers before allowing the writer to perform an\nupdate. If there are continuous readers, however, the writers will be starved. On the other\nhand, if there are frequent writers and they are given priority, throughput will suffer. Find-\ning that balance and avoiding concurrent update issues is what the problem addresses.\nDining Philosophers11\nImagine a number of philosophers sitting around a circular table. A fork is placed to the\nleft of each philosopher. There is a big bowl of spaghetti in the center of the table. The\nphilosophers spend their time thinking unless they get hungry. Once hungry, they pick\nup the forks on either side of them and eat. A philosopher cannot eat unless he is holding\ntwo forks. If the philosopher to his right or left is already using one of the forks he\nneeds, he must wait until that philosopher \ufb01nishes eating and puts the forks back down.\nOnce a philosopher eats, he puts both his forks back down on the table and waits until he\nis hungry again.\nReplace philosophers with threads and forks with resources and this problem is simi-\nlar to many enterprise applications in which processes compete for resources. Unless care-\nfully designed, systems that compete in this way can experience deadlock, livelock,\nthroughput, and ef\ufb01ciency degradation. \n9. http://en.wikipedia.org/wiki/Producer-consumer\n10. http://en.wikipedia.org/wiki/Readers-writers_problem\n11. http://en.wikipedia.org/wiki/Dining_philosophers_problem", "185Keep Synchronized Sections Small\nMost concurrent problems you will likely encounter will be some variation of these\nthree problems. Study these algorithms and write solutions using them on your own so\nthat when you come across concurrent problems, you\u2019ll be more prepared to solve the\nproblem.\nRecommendation: Learn these basic algorithms and understand their solutions.\nBeware Dependencies Between Synchronized Methods\nDependencies between synchronized methods cause subtle bugs in concurrent code. The\nJava language has the notion of synchronized, which protects an individual method. How-\never, if there is more than one synchronized method on the same shared class, then your\nsystem may be written incorrectly.12\nRecommendation: Avoid using more than one method on a shared object.\nThere will be times when you must use more than one method on a shared object.\nWhen this is the case, there are three ways to make the code correct:\n\u2022 Client-Based Locking\u2014Have the client lock the server before calling the \ufb01rst \nmethod and make sure the lock\u2019 s extent includes code calling the last method.\n\u2022 Server-Based Locking\u2014Within the server create a method that locks the server, calls \nall the methods, and then unlocks. Have the client call the new method.\n\u2022 Adapted Server\u2014create an intermediary that performs the locking. This is an exam-\nple of server-based locking, where the original server cannot be changed.\nKeep Synchronized Sections Small\nThe synchronized keyword introduces a lock. All sections of code guarded by the\nsame lock are guaranteed to have only one thread executing through them at any given\ntime. Locks are expensive because they create delays and add overhead. So we don\u2019t\nwant to litter our code with synchronized statements. On the other hand, critical sec-\ntions13 must be guarded. So we want to design our code with as few critical sections as\npossible.\nSome naive programmers try to achieve this by making their critical sections very\nlarge. However, extending synchronization beyond the minimal critical section increases\ncontention and degrades performance.14\nRecommendation: Keep your synchronized sections as small as possible.\n12. See \u201cDependencies Between Methods Can Break Concurrent Code\u201d on page 329.\n13. A critical section is any section of code that must be protected from simultaneous use for the program to be correct.\n14. See \u201cIncreasing Throughput\u201d on page 333.", "186 Chapter 13: Concurrency\nWriting Correct Shut-Down Code Is Hard\nWriting a system that is meant to stay live and run forever is different from writing some-\nthing that works for awhile and then shuts down gracefully.\nGraceful shutdown can be hard to get correct. Common problems involve deadlock,15\nwith threads waiting for a signal to continue that never comes. \nFor example, imagine a system with a parent thread that spawns several child threads\nand then waits for them all to \ufb01nish before it releases its resources and shuts down. What if\none of the spawned threads is deadlocked? The parent will wait forever, and the system\nwill never shut down. \nOr consider a similar system that has been instructed to shut down. The parent tells all\nthe spawned children to abandon their tasks and \ufb01nish. But what if two of the children\nwere operating as a producer/consumer pair. Suppose the producer receives the signal\nfrom the parent and quickly shuts down. The consumer might have been expecting a mes-\nsage from the producer and be blocked in a state where it cannot receive the shutdown sig-\nnal. It could get stuck waiting for the producer and never \ufb01nish, preventing the parent from\n\ufb01nishing as well.\nSituations like this are not at all uncommon. So if you must write concurrent code that\ninvolves shutting down gracefully, expect to spend much of your time getting the shut-\ndown to happen correctly.\nRecommendation: Think about shut-down early and get it working early. It\u2019 s going to\ntake longer than you expect. Review existing algorithms because this is probably harder\nthan you think.\nTesting Threaded Code\nProving that code is correct is impractical. Testing does not guarantee correctness. How-\never, good testing can minimize risk. This is all true in a single-threaded solution. As soon\nas there are two or more threads using the same code and working with shared data, things\nget substantially more complex.\nRecommendation: Write tests that have the potential to expose problems and then\nrun them frequently, with different programatic con\ufb01gurations and system con\ufb01gurations\nand load. If tests ever fail, track down the failure. Don\u2019t ignore a failure just because the\ntests pass on a subsequent run.\nThat is a whole lot to take into consideration. Here are a few more \ufb01ne-grained\nrecommendations:\n\u2022 Treat spurious failures as candidate threading issues.\n\u2022 Get your nonthreaded code working \ufb01rst.\n15. See \u201cDeadlock\u201d on page 335.", "187Testing Threaded Code\n\u2022 Make your threaded code pluggable.\n\u2022 Make your threaded code tunable.\n\u2022 Run with more threads than processors.\n\u2022 Run on different platforms.\n\u2022 Instrument your code to try and force failures.\nTreat Spurious Failures as Candidate Threading Issues\nThreaded code causes things to fail that \u201csimply cannot fail.\u201d Most developers do not have\nan intuitive feel for how threading interacts with other code (authors included). Bugs in\nthreaded code might exhibit their symptoms once in a thousand, or a million, executions.\nAttempts to repeat the systems can be frustratingly. This often leads developers to write off\nthe failure as a cosmic ray, a hardware glitch, or some other kind of \u201cone-off.\u201d It is best to\nassume that one-offs do not exist. The longer these \u201cone-offs\u201d are ignored, the more code\nis built on top of a potentially faulty approach.\nRecommendation: Do not ignore system failures as one-offs.\nGet Y our Nonthreaded Code Working First\nThis may seem obvious, but it doesn\u2019t hurt to reinforce it. Make sure code works outside\nof its use in threads. Generally, this means creating POJOs that are called by your threads.\nThe POJOs are not thread aware, and can therefore be tested outside of the threaded envi-\nronment. The more of your system you can place in such POJOs, the better.\nRecommendation: Do not try to chase down nonthreading bugs and threading bugs\nat the same time. Make sure your code works outside of threads.\nMake Y our Threaded Code Pluggable\nWrite the concurrency-supporting code such that it can be run in several con\ufb01gurations:\n\u2022 One thread, several threads, varied as it executes\n\u2022 Threaded code interacts with something that can be both real or a test double.\n\u2022 Execute with test doubles that run quickly, slowly, variable.\n\u2022 Con\ufb01gure tests so they can run for a number of iterations.\nRecommendation: Make your thread-based code especially pluggable so that you\ncan run it in various con\ufb01gurations.\nMake Y our Threaded Code Tunable\nGetting the right balance of threads typically requires trial an error. Early on, \ufb01nd ways to\ntime the performance of your system under different con\ufb01gurations. Allow the number of", "188 Chapter 13: Concurrency\nthreads to be easily tuned. Consider allowing it to change while the system is running.\nConsider allowing self-tuning based on throughput and system utilization.\nRun with More Threads Than Processors\nThings happen when the system switches between tasks. To encourage task swapping, run\nwith more threads than processors or cores. The more frequently your tasks swap, the more\nlikely you\u2019ll encounter code that is missing a critical section or causes deadlock.\nRun on Different Platforms\nIn the middle of 2007 we developed a course on concurrent programming. The course\ndevelopment ensued primarily under OS X. The class was presented using Windows XP\nrunning under a VM. Tests written to demonstrate failure conditions did not fail as fre-\nquently in an XP environment as they did running on OS X. \nIn all cases the code under test was known to be incorrect. This just reinforced the fact\nthat different operating systems have different threading policies, each of which impacts\nthe code\u2019 s execution. Multithreaded code behaves differently in different environments.16\nY ou should run your tests in every potential deployment environment.\nRecommendation: Run your threaded code on all target platforms early and often.\nInstrument Y our Code to Try and Force Failures\nIt is normal for \ufb02aws in concurrent code to hide. Simple tests often don\u2019t expose them.\nIndeed, they often hide during normal processing. They might show up once every few\nhours, or days, or weeks! \nThe reason that threading bugs can be infrequent, sporadic, and hard to repeat, is that\nonly a very few pathways out of the many thousands of possible pathways through a vul-\nnerable section actually fail. So the probability that a failing pathway is taken can be star-\ntlingly low. This makes detection and debugging very dif\ufb01cult.\nHow might you increase your chances of catching such rare occurrences? Y ou can\ninstrument your code and force it to run in different orderings by adding calls to methods\nlike Object.wait(), Object.sleep(), Object.yield() and Object.priority().\nEach of these methods can affect the order of execution, thereby increasing the odds\nof detecting a \ufb02aw. It\u2019 s better when broken code fails as early and as often as possible.\nThere are two options for code instrumentation:\n\u2022 Hand-coded\n\u2022 Automated\n16.  Did you know that the threading model in Java does not guarantee preemptive threading? Modern OS\u2019 s support preemptive \nthreading, so you get that \u201cfor free.\u201d Even so, it not guaranteed by the JVM.", "189Testing Threaded Code\nHand-Coded\nY ou can insert calls to wait(), sleep(), yield(), and priority() in your code by hand. It\nmight be just the thing to do when you\u2019re testing a particularly thorny piece of code. \nHere is an example of doing just that:\npublic synchronized String nextUrlOrNull() {\n    if(hasNext()) {        String url = urlGenerator.next();\n        Thread.yield(); // inserted for testing.\n        updateHasNext();        return url;    }     return null;}\nThe inserted call to yield() will change the execution pathways taken by the code and\npossibly cause the code to fail where it did not fail before. If the code does break, it was\nnot because you added a call to yield().17 Rather, your code was broken and this simply\nmade the failure evident.\nThere are many problems with this approach:\n\u2022 Y ou have to manually \ufb01nd appropriate places to do this.\n\u2022 How do you know where to put the call and what kind of call to use?\n\u2022 Leaving such code in a production environment unnecessarily slows the code down.\n\u2022 It\u2019 s a shotgun approach. Y ou may or may not \ufb01nd \ufb02aws. Indeed, the odds aren\u2019t with you.\nWhat we need is a way to do this during testing but not in production. We also need to\neasily mix up con\ufb01gurations between different runs, which results in increased chances of\n\ufb01nding errors in the aggregate.\nClearly, if we divide our system up into POJOs that know nothing of threading and\nclasses that control the threading, it will be easier to \ufb01nd appropriate places to instrument\nthe code. Moreover, we could create many different test jigs that invoke the POJOs under\ndifferent regimes of calls to sleep, yield, and so on. \nAutomated\nY ou could use tools like an Aspect-Oriented Framework, CGLIB, or ASM to programmat-\nically instrument your code. For example, you could use a class with a single method:\npublic class ThreadJigglePoint {\n    public static void jiggle() {    }\n}\n17. This is not strictly the case. Since the JVM does not guarantee preemptive threading, a particular algorithm might always \nwork on an OS that does not preempt threads. The reverse is also possible but for different reasons.", "190 Chapter 13: Concurrency\nY ou can add calls to this in various places within your code:\npublic synchronized String nextUrlOrNull() {\n    if(hasNext()) {        ThreadJiglePoint.jiggle();\n        String url = urlGenerator.next();\n        ThreadJiglePoint.jiggle();        updateHasNext();        ThreadJiglePoint.jiggle();        return url;    } \n    return null;\n}\nNow you use a simple aspect that randomly selects among doing nothing, sleeping, or\nyielding.\nOr imagine that the ThreadJigglePointclass has two implementations. The \ufb01rst imple-\nments jiggle to do nothing and is used in production. The second generates a random\nnumber to choose between sleeping, yielding, or just falling through. If you run your tests\na thousand times with random jiggling, you may root out some \ufb02aws. If the tests pass, at\nleast you can say you\u2019ve done due diligence. Though a bit simplistic, this could be a rea-\nsonable option in lieu of a more sophisticated tool.\nThere is a tool called ConTest,18 developed by IBM that does something similar, but it\ndoes so with quite a bit more sophistication.\nThe point is to jiggle the code so that threads run in different orderings at different\ntimes. The combination of well-written tests and jiggling can dramatically increase the\nchance \ufb01nding errors.\nRecommendation: Use jiggling strategies to ferret out errors.\nConclusion\nConcurrent code is dif\ufb01cult to get right. Code that is simple to follow can become night-\nmarish when multiple threads and shared data get into the mix. If you are faced with writ-\ning concurrent code, you need to write clean code with rigor or else face subtle and\ninfrequent failures.\nFirst and foremost, follow the Single Responsibility Principle. Break your system into\nPOJOs that separate thread-aware code from thread-ignorant code. Make sure when you\nare testing your thread-aware code, you are only testing it and nothing else. This suggests\nthat your thread-aware code should be small and focused.\nKnow the possible sources of concurrency issues: multiple threads operating on\nshared data, or using a common resource pool. Boundary cases, such as shutting down\ncleanly or \ufb01nishing the iteration of a loop, can be especially thorny.\n18. http://www.alphaworks.ibm.com/tech/contest", "191Bibliography\nLearn your library and know the fundamental algorithms. Understand how some of\nthe features offered by the library support solving problems similar to the fundamental\nalgorithms.\nLearn how to \ufb01nd regions of code that must be locked and lock them. Do not lock\nregions of code that do not need to be locked. Avoid calling one locked section from\nanother. This requires a deep understanding of whether something is or is not shared. Keep\nthe amount of shared objects and the scope of the sharing as narrow as possible. Change\ndesigns of the objects with shared data to accommodate clients rather than forcing clients\nto manage shared state.\nIssues will crop up. The ones that do not crop up early are often written off as a one-\ntime occurrence. These so-called one-offs typically only happen under load or at seem-\ningly random times. Therefore, you need to be able to run your thread-related code in\nmany con\ufb01gurations on many platforms repeatedly and continuously. Testability, which\ncomes naturally from following the Three Laws of TDD, implies some level of plug-ability,\nwhich offers the support necessary to run code in a wider range of con\ufb01gurations.\nY ou will greatly improve your chances of \ufb01nding erroneous code if you take the time\nto instrument your code. Y ou can either do so by hand or using some kind of automated\ntechnology. Invest in this early. Y ou want to be running your thread-based code as long as\npossible before you put it into production.\nIf you take a clean approach, your chances of getting it right increase drastically.\nBibliography\n[Lea99]:  Concurrent Programming in Java: Design Principles and Patterns , 2d. ed.,\nDoug Lea, Prentice Hall, 1999.\n[PPP]:  Agile Software Development: Principles, Patterns, and Practices, Robert C. Martin,\nPrentice Hall, 2002.\n[PRAG]:  The Pragmatic Programmer , Andrew Hunt, Dave Thomas, Addison-Wesley,\n2000.", "This page intentionally left blank", "193\n14\nSuccessive Re\ufb01nement\nCase Study of a Command-Line Argument Parser\nThis chapter is a case study in successive re\ufb01nement. You will see a module that started\nwell but did not scale. Then you will see how the module was refactored and cleaned. \nMost of us have had to parse command-line arguments from time to time. If we\ndon\u2019t have a convenient utility, then we simply walk the array of strings that is passed\ninto the main function. There are several good utilities available from various sources,", "194 Chapter 14: Successive Re\ufb01nement\nbut none of them do exactly what I want. So, of course, I decided to write my own. I call\nit: Args.\nArgs is very simple to use. You simply construct the Args class with the input argu-\nments and a format string, and then query the Args instance for the values of the argu-\nments. Consider the following simple example:\nYou can see how simple this is. We just create an instance of the Args class with two\nparameters. The \ufb01rst parameter is the format, or schema, string: \"l,p#,d*.\" It de\ufb01nes three\ncommand-line arguments. The \ufb01rst, \u2013l, is a boolean argument. The second, -p, is an integer\nargument. The third, -d, is a string argument. The second parameter to the Args constructor\nis simply the array of command-line argument passed into main.\nIf the constructor returns without throwing an ArgsException, then the incoming\ncommand-line was parsed, and the Args instance is ready to be queried. Methods like\ngetBoolean, getInteger, and getString allow us to access the values of the arguments by\ntheir names.\nIf there is a problem, either in the format string or in the command-line arguments\nthemselves, an ArgsException will be thrown. A convenient description of what went\nwrong can be retrieved from the errorMessage method of the exception.\nArgs Implementation\nListing 14-2 is the implementation of the Args class. Please read it very carefully. I worked\nhard on the style and structure and hope it is worth emulating.\nListing 14-1\nSimple use of Args\n  public static void main(String[] args) {\n    try {      Args arg = new Args(\"l,p#,d*\", args);\n      boolean logging = arg.getBoolean('l');\n      int port = arg.getInt('p');      String directory = arg.getString('d');      executeApplication(logging, port, directory);    } catch (ArgsException e) {\n      System.out.printf(\"Argument error: %s\\n\", e.errorMessage());\n    }  }\nListing 14-2\nArgs.java\npackage com.objectmentor.utilities.args;\nimport static com.objectmentor.utilities.args.ArgsException.ErrorCode.*;\nimport java.util.*;\npublic class Args {\n  private Map<Character, ArgumentMarshaler> marshalers;", "195Args Implementation\n  private Set<Character> argsFound;\n  private ListIterator<String> currentArgument;\n  public Args(String schema, String[] args) throws ArgsException {\n    marshalers = new HashMap<Character, ArgumentMarshaler>();    argsFound = new HashSet<Character>();\n    parseSchema(schema);\n    parseArgumentStrings(Arrays.asList(args));\n  }\n  private void parseSchema(String schema) throws ArgsException {\n    for (String element : schema.split(\",\"))\n      if (element.length() > 0)\n        parseSchemaElement(element.trim());  }\n  private void parseSchemaElement(String element) throws ArgsException {\n    char elementId = element.charAt(0);\n    String elementTail = element.substring(1);    validateSchemaElementId(elementId);    if (elementTail.length() == 0)\n      marshalers.put(elementId, new BooleanArgumentMarshaler());\n    else if (elementTail.equals(\"*\"))      marshalers.put(elementId, new StringArgumentMarshaler());    else if (elementTail.equals(\"#\"))      marshalers.put(elementId, new IntegerArgumentMarshaler());\n    else if (elementTail.equals(\"##\"))\n      marshalers.put(elementId, new DoubleArgumentMarshaler());    else if (elementTail.equals(\"[*]\"))      marshalers.put(elementId, new StringArrayArgumentMarshaler());    else\n      throw new ArgsException(INVALID_ARGUMENT_FORMAT, elementId, elementTail);\n  }\n  private void validateSchemaElementId(char elementId) throws ArgsException {\n    if (!Character.isLetter(elementId))\n      throw new ArgsException(INVALID_ARGUMENT_NAME, elementId, null);\n  }\nprivate void parseArgumentStrings(List<String> argsList) throws ArgsException \n  {\nfor (currentArgument = argsList.listIterator(); currentArgument.hasNext();) \n    {      String argString = currentArgument.next();      if (argString.startsWith(\"-\")) {        parseArgumentCharacters(argString.substring(1));\n      } else {\n        currentArgument.previous();        break;      }    }\n  }\nListing 14-2  (continued)\nArgs.java", "196 Chapter 14: Successive Re\ufb01nement\nNotice that you can read this code from the top to the bottom without a lot of jumping\naround or looking ahead. The one thing you may have had to look ahead for is the de\ufb01ni-\ntion of ArgumentMarshaler, which I left out intentionally. Having read this code carefully,\n  private void parseArgumentCharacters(String argChars) throws ArgsException {\n    for (int i = 0; i < argChars.length(); i++)      parseArgumentCharacter(argChars.charAt(i));\n  }\n  private void parseArgumentCharacter(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);    if (m == null) {\n      throw new ArgsException(UNEXPECTED_ARGUMENT, argChar, null);\n    } else {      argsFound.add(argChar);      try {        m.set(currentArgument);      } catch (ArgsException e) {\n        e.setErrorArgumentId(argChar);\n        throw e;      }    }\n  }\n  public boolean has(char arg) {\n    return argsFound.contains(arg);  }\n  public int nextArgument() {\n    return currentArgument.nextIndex();  }\n  public boolean getBoolean(char arg) {\n    return BooleanArgumentMarshaler.getValue(marshalers.get(arg));  }\n  public String getString(char arg) {\n    return StringArgumentMarshaler.getValue(marshalers.get(arg));\n  }\n  public int getInt(char arg) {\n    return IntegerArgumentMarshaler.getValue(marshalers.get(arg));\n  }\n  public double getDouble(char arg) {\n    return DoubleArgumentMarshaler.getValue(marshalers.get(arg));  }\n  public String[] getStringArray(char arg) {\n    return StringArrayArgumentMarshaler.getValue(marshalers.get(arg));  }}\nListing 14-2  (continued)\nArgs.java", "197Args Implementation\nyou should understand what the ArgumentMarshaler interface is and what its derivatives do.\nI\u2019ll show a few of them to you now (Listing 14-3 through Listing 14-6).\nListing 14-3 \nArgumentMarshaler.java\npublic interface ArgumentMarshaler {\n  void set(Iterator<String> currentArgument) throws ArgsException;}\nListing 14-4 \nBooleanArgumentMarshaler.java\npublic class BooleanArgumentMarshaler implements ArgumentMarshaler {\n  private boolean booleanValue = false;\n  public void set(Iterator<String> currentArgument) throws ArgsException {\n    booleanValue = true;  }\n  public static boolean getValue(ArgumentMarshaler am) {\n    if (am != null && am instanceof BooleanArgumentMarshaler)\n      return ((BooleanArgumentMarshaler) am).booleanValue;    else      return false;\n  }\n}\nListing 14-5 \nStringArgumentMarshaler.java\nimport static com.objectmentor.utilities.args.ArgsException.ErrorCode.*;\npublic class StringArgumentMarshaler implements ArgumentMarshaler {\n  private String stringValue = \"\";\n  public void set(Iterator<String> currentArgument) throws ArgsException {\n    try {      stringValue = currentArgument.next();\n    } catch (NoSuchElementException e) {\n      throw new ArgsException(MISSING_STRING);    }  }\n  public static String getValue(ArgumentMarshaler am) {\n    if (am != null && am instanceof StringArgumentMarshaler)      return ((StringArgumentMarshaler) am).stringValue;    else      return \"\";\n  }\n}", "198 Chapter 14: Successive Re\ufb01nement\nThe other ArgumentMarshaler derivatives simply replicate this pattern for doubles and\nString arrays and would serve to clutter this chapter. I\u2019ll leave them to you as an exercise.\nOne other bit of information might be troubling you: the de\ufb01nition of the error code\nconstants. They are in the ArgsException class (Listing 14-7).\nListing 14-6 \nIntegerArgumentMarshaler.java\nimport static com.objectmentor.utilities.args.ArgsException.ErrorCode.*;\npublic class IntegerArgumentMarshaler implements ArgumentMarshaler {\n  private int intValue = 0;\n  public void set(Iterator<String> currentArgument) throws ArgsException {\n    String parameter = null;    try {\n      parameter = currentArgument.next();\n      intValue = Integer.parseInt(parameter);    } catch (NoSuchElementException e) {      throw new ArgsException(MISSING_INTEGER);    } catch (NumberFormatException e) {\n      throw new ArgsException(INVALID_INTEGER, parameter);\n    }  }\n  public static int getValue(ArgumentMarshaler am) {\n    if (am != null && am instanceof IntegerArgumentMarshaler)\n      return ((IntegerArgumentMarshaler) am).intValue;    else      return 0;  }\n}\nListing 14-7 \nArgsException.java\nimport static com.objectmentor.utilities.args.ArgsException.ErrorCode.*;\npublic class ArgsException extends Exception {\n  private char errorArgumentId = '\\0';\n  private String errorParameter = null;  private ErrorCode errorCode = OK;\n  public ArgsException() {}\n  public ArgsException(String message) {super(message);}\n  public ArgsException(ErrorCode errorCode) {\n    this.errorCode = errorCode;\n  }\n  public ArgsException(ErrorCode errorCode, String errorParameter) {\n    this.errorCode = errorCode;    this.errorParameter = errorParameter;\n  }", "199Args Implementation\n  public ArgsException(ErrorCode errorCode, \n                       char errorArgumentId, String errorParameter) {    this.errorCode = errorCode;\n    this.errorParameter = errorParameter;\n    this.errorArgumentId = errorArgumentId;  }\n  public char getErrorArgumentId() {\n    return errorArgumentId;\n  }\n  public void setErrorArgumentId(char errorArgumentId) {\n    this.errorArgumentId = errorArgumentId;\n  }\n  public String getErrorParameter() {\n    return errorParameter;  }\n  public void setErrorParameter(String errorParameter) {\n    this.errorParameter = errorParameter;  }\n  public ErrorCode getErrorCode() {\n    return errorCode;  }\n  public void setErrorCode(ErrorCode errorCode) {\n    this.errorCode = errorCode;\n  }\n  public String errorMessage() {\n    switch (errorCode) {\n      case OK:\n        return \"TILT: Should not get here.\";      case UNEXPECTED_ARGUMENT:        return String.format(\"Argument -%c unexpected.\", errorArgumentId);\n      case MISSING_STRING:\n        return String.format(\"Could not find string parameter for -%c.\",                              errorArgumentId);      case INVALID_INTEGER:        return String.format(\"Argument -%c expects an integer but was '%s'.\", \n                             errorArgumentId, errorParameter);\n      case MISSING_INTEGER:        return String.format(\"Could not find integer parameter for -%c.\",                              errorArgumentId);      case INVALID_DOUBLE:\n        return String.format(\"Argument -%c expects a double but was '%s'.\", \n                             errorArgumentId, errorParameter);      case MISSING_DOUBLE:        return String.format(\"Could not find double parameter for -%c.\",                              errorArgumentId);\n      case INVALID_ARGUMENT_NAME:\n        return String.format(\"'%c' is not a valid argument name.\",                              errorArgumentId);\nListing 14-7 (continued)\nArgsException.java", "200 Chapter 14: Successive Re\ufb01nement\nIt\u2019s remarkable how much code is required to \ufb02esh out the details of this simple con-\ncept. One of the reasons for this is that we are using a particularly wordy language. Java,\nbeing a statically typed language, requires a lot of words in order to satisfy the type sys-\ntem. In a language like Ruby, Python, or Smalltalk, this program is much smaller.1\nPlease read the code over one more time. Pay special attention to the way things are\nnamed, the size of the functions, and the formatting of the code. If you are an experienced\nprogrammer, you may have some quibbles here and there with various parts of the style or\nstructure. Overall, however, I hope you conclude that this program is nicely written and\nhas a clean structure. \nFor example, it should be obvious how you would add a new argument type, such as a\ndate argument or a complex number argument, and that such an addition would require a\ntrivial amount of effort. In short, it would simply require a new derivative of Argument-\nMarshaler, a new getXXX function, and a new case statement in the parseSchemaElement\nfunction. There would also probably be a new ArgsException.ErrorCode and a new error\nmessage.\nHow Did I Do This?\nLet me set your mind at rest. I did not simply write this program from beginning to end in\nits current form. More importantly, I am not expecting you to be able to write clean and\nelegant programs in one pass. If we have learned anything over the last couple of decades,\nit is that programming is a craft more than it is a science. To write clean code, you must\n\ufb01rst write dirty code and then clean it.\nThis should not be a surprise to you. We learned this truth in grade school when our\nteachers tried (usually in vain) to get us to write rough drafts of our compositions. The\nprocess, they told us, was that we should write a rough draft, then a second draft, then sev-\neral subsequent drafts until we had our \ufb01nal version. Writing clean compositions, they\ntried to tell us, is a matter of successive re\ufb01nement.\n      case INVALID_ARGUMENT_FORMAT:\n        return String.format(\"'%s' is not a valid argument format.\",                              errorParameter);\n    }\n    return \"\";  }\n  public enum ErrorCode {\n    OK, INVALID_ARGUMENT_FORMAT, UNEXPECTED_ARGUMENT, INVALID_ARGUMENT_NAME,\n    MISSING_STRING,    MISSING_INTEGER, INVALID_INTEGER,    MISSING_DOUBLE, INVALID_DOUBLE}}\n1. I recently rewrote this module in Ruby. It was 1/7th the size and had a subtly better structure.\nListing 14-7 (continued)\nArgsException.java", "201Args: The Rough Draft\nMost freshman programmers (like most grade-schoolers) don\u2019t follow this advice par-\nticularly well. They believe that the primary goal is to get the program working. Once it\u2019s\n\u201cworking,\u201d they move on to the next task, leaving the \u201cworking\u201d program in whatever state\nthey \ufb01nally got it to \u201cwork.\u201d Most seasoned programmers know that this is professional\nsuicide.\nArgs: The Rough Draft\nListing 14-8 shows an earlier version of the Args class. It \u201cworks.\u201d And it\u2019s messy.\nListing 14-8 \nArgs.java (first draft)\nimport java.text.ParseException;\nimport java.util.*;\npublic class Args {\n  private String schema;  private String[] args;  private boolean valid = true;  private Set<Character> unexpectedArguments = new TreeSet<Character>();\n  private Map<Character, Boolean> booleanArgs = \n    new HashMap<Character, Boolean>();  private Map<Character, String> stringArgs = new HashMap<Character, String>();  private Map<Character, Integer> intArgs = new HashMap<Character, Integer>();\n  private Set<Character> argsFound = new HashSet<Character>();\n  private int currentArgument;  private char errorArgumentId = '\\0';  private String errorParameter = \"TILT\";  private ErrorCode errorCode = ErrorCode.OK;\n  private enum ErrorCode {\n    OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT}\n  public Args(String schema, String[] args) throws ParseException {\n    this.schema = schema;\n    this.args = args;    valid = parse();  }\n  private boolean parse() throws ParseException {\n    if (schema.length() == 0 && args.length == 0)      return true;    parseSchema();    try {\n      parseArguments();\n    } catch (ArgsException e) {    }    return valid;  }\n  private boolean parseSchema() throws ParseException {\n    for (String element : schema.split(\",\")) {", "202 Chapter 14: Successive Re\ufb01nement\n      if (element.length() > 0) {\n        String trimmedElement = element.trim();        parseSchemaElement(trimmedElement);\n      }\n    }    return true;  }\n  private void parseSchemaElement(String element) throws ParseException {\n    char elementId = element.charAt(0);    String elementTail = element.substring(1);    validateSchemaElementId(elementId);    if (isBooleanSchemaElement(elementTail))      parseBooleanSchemaElement(elementId);\n    else if (isStringSchemaElement(elementTail))\n      parseStringSchemaElement(elementId);    else if (isIntegerSchemaElement(elementTail)) {      parseIntegerSchemaElement(elementId);\n    } else {\n      throw new ParseException(        String.format(\"Argument: %c has invalid format: %s.\",                       elementId, elementTail), 0);    }\n  }\n  private void validateSchemaElementId(char elementId) throws ParseException {\n    if (!Character.isLetter(elementId)) {      throw new ParseException(\n        \"Bad character:\" + elementId + \"in Args format: \" + schema, 0);\n    }  }\n  private void parseBooleanSchemaElement(char elementId) {\n    booleanArgs.put(elementId, false);\n  }\n  private void parseIntegerSchemaElement(char elementId) {\n    intArgs.put(elementId, 0);\n  }\n  private void parseStringSchemaElement(char elementId) {\n    stringArgs.put(elementId, \"\");\n  }\n  private boolean isStringSchemaElement(String elementTail) {\n    return elementTail.equals(\"*\");  }\n  private boolean isBooleanSchemaElement(String elementTail) {\n    return elementTail.length() == 0;  }\n  private boolean isIntegerSchemaElement(String elementTail) {\n    return elementTail.equals(\"#\");\n  }\nListing 14-8 (continued)\nArgs.java (first draft)", "203Args: The Rough Draft\n  private boolean parseArguments() throws ArgsException {\nfor (currentArgument = 0; currentArgument < args.length; currentArgument++) \n    {\n      String arg = args[currentArgument];\n      parseArgument(arg);    }    return true;  }\n  private void parseArgument(String arg) throws ArgsException {\n    if (arg.startsWith(\"-\"))      parseElements(arg);  }\n  private void parseElements(String arg) throws ArgsException {\n    for (int i = 1; i < arg.length(); i++)      parseElement(arg.charAt(i));  }\n  private void parseElement(char argChar) throws ArgsException {\n    if (setArgument(argChar))      argsFound.add(argChar);    else {\n      unexpectedArguments.add(argChar);\n      errorCode = ErrorCode.UNEXPECTED_ARGUMENT;      valid = false;    }  }\n  private boolean setArgument(char argChar) throws ArgsException {\n    if (isBooleanArg(argChar))      setBooleanArg(argChar, true);    else if (isStringArg(argChar))\n      setStringArg(argChar);\n    else if (isIntArg(argChar))      setIntArg(argChar);    else\n      return false;\n    return true;\n  }\n  private boolean isIntArg(char argChar) {return intArgs.containsKey(argChar);}\n  private void setIntArg(char argChar) throws ArgsException {\n    currentArgument++;    String parameter = null;\n    try {\n      parameter = args[currentArgument];      intArgs.put(argChar, new Integer(parameter));    } catch (ArrayIndexOutOfBoundsException e) {      valid = false;      errorArgumentId = argChar;\n      errorCode = ErrorCode.MISSING_INTEGER;\nListing 14-8 (continued)\nArgs.java (first draft)", "204 Chapter 14: Successive Re\ufb01nement\n      throw new ArgsException();\n    } catch (NumberFormatException e) {      valid = false;\n      errorArgumentId = argChar;\n      errorParameter = parameter;      errorCode = ErrorCode.INVALID_INTEGER;      throw new ArgsException();    }  }\n  private void setStringArg(char argChar) throws ArgsException {\n    currentArgument++;    try {      stringArgs.put(argChar, args[currentArgument]);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      valid = false;      errorArgumentId = argChar;      errorCode = ErrorCode.MISSING_STRING;\n      throw new ArgsException();\n    }  }\n  private boolean isStringArg(char argChar) {\n    return stringArgs.containsKey(argChar);\n  }\n  private void setBooleanArg(char argChar, boolean value) {\n    booleanArgs.put(argChar, value);\n  }\n  private boolean isBooleanArg(char argChar) {\n    return booleanArgs.containsKey(argChar);  }\n  public int cardinality() {\n    return argsFound.size();  }\n  public String usage() {\n    if (schema.length() > 0)      return \"-[\" + schema + \"]\";    else      return \"\";\n  }\n  public String errorMessage() throws Exception {\n    switch (errorCode) {      case OK:\n        throw new Exception(\"TILT: Should not get here.\");\n      case UNEXPECTED_ARGUMENT:        return unexpectedArgumentMessage();      case MISSING_STRING:        return String.format(\"Could not find string parameter for -%c.\", \n                             errorArgumentId);\nListing 14-8 (continued)\nArgs.java (first draft)", "205Args: The Rough Draft\n      case INVALID_INTEGER:\n        return String.format(\"Argument -%c expects an integer but was '%s'.\",                              errorArgumentId, errorParameter);\n      case MISSING_INTEGER:\n        return String.format(\"Could not find integer parameter for -%c.\",                              errorArgumentId);    }    return \"\";  }\n  private String unexpectedArgumentMessage() {\n    StringBuffer message = new StringBuffer(\"Argument(s) -\");    for (char c : unexpectedArguments) {      message.append(c);\n    }\n    message.append(\" unexpected.\");\n    return message.toString();\n  }\n  private boolean falseIfNull(Boolean b) {\n    return b != null && b;  }\n  private int zeroIfNull(Integer i) {\n    return i == null ? 0 : i;  }\n  private String blankIfNull(String s) {\n    return s == null ? \"\" : s;  }\n  public String getString(char arg) {\n    return blankIfNull(stringArgs.get(arg));\n  }\n  public int getInt(char arg) {\n    return zeroIfNull(intArgs.get(arg));\n  }\n  public boolean getBoolean(char arg) {\n    return falseIfNull(booleanArgs.get(arg));  }\n  public boolean has(char arg) {\n    return argsFound.contains(arg);  }\n  public boolean isValid() {\n    return valid;  }\n  private class ArgsException extends Exception {\n  }\n}\nListing 14-8 (continued)\nArgs.java (first draft)", "206 Chapter 14: Successive Re\ufb01nement\nI hope your initial reaction to this mass of code is \u201cI\u2019m certainly glad he didn\u2019t leave it\nlike that!\u201d If you feel like this, then remember that\u2019s how other people are going to feel\nabout code that you leave in rough-draft form. \nActually \u201crough draft\u201d is probably the kindest thing you can say about this code. It\u2019s\nclearly a work in progress. The sheer number of instance variables is daunting. The odd\nstrings like \u201cTILT,\u201d the HashSets and TreeSets, and the try-catch-catchblocks all add up to\na festering pile.\nI had not wanted to write a festering pile. Indeed, I was trying to keep things reason-\nably well organized. You can probably tell that from my choice of function and variable\nnames and the fact that there is a crude structure to the program. But, clearly, I had let the\nproblem get away from me. \nThe mess built gradually. Earlier versions had not been nearly so nasty. For example,\nListing 14-9 shows an earlier version in which only Boolean arguments were working.\nListing 14-9 \nArgs.java (Boolean only)\npackage com.objectmentor.utilities.getopts;\nimport java.util.*;\npublic class Args {\n  private String schema;  private String[] args;  private boolean valid;\n  private Set<Character> unexpectedArguments = new TreeSet<Character>();\n  private Map<Character, Boolean> booleanArgs =     new HashMap<Character, Boolean>();  private int numberOfArguments = 0;\n  public Args(String schema, String[] args) {\n    this.schema = schema;    this.args = args;    valid = parse();\n  }\n  public boolean isValid() {\n    return valid;  }\n  private boolean parse() {\n    if (schema.length() == 0 && args.length == 0)      return true;    parseSchema();\n    parseArguments();\n    return unexpectedArguments.size() == 0;  }\n  private boolean parseSchema() {\n    for (String element : schema.split(\",\")) {\n      parseSchemaElement(element);    }", "207Args: The Rough Draft\n    return true;\n  }\n  private void parseSchemaElement(String element) {\n    if (element.length() == 1) {      parseBooleanSchemaElement(element);    }  }\n  private void parseBooleanSchemaElement(String element) {\n    char c = element.charAt(0);    if (Character.isLetter(c)) {      booleanArgs.put(c, false);\n    }\n  }\n  private boolean parseArguments() {\n    for (String arg : args)\n      parseArgument(arg);\n    return true;  }\n  private void parseArgument(String arg) {\n    if (arg.startsWith(\"-\"))\n      parseElements(arg);  }\n  private void parseElements(String arg) {\n    for (int i = 1; i < arg.length(); i++)      parseElement(arg.charAt(i));  }\n  private void parseElement(char argChar) {\n    if (isBoolean(argChar)) {      numberOfArguments++;      setBooleanArg(argChar, true);    } else\n      unexpectedArguments.add(argChar);\n  }\n  private void setBooleanArg(char argChar, boolean value) {\n    booleanArgs.put(argChar, value);\n  }\n  private boolean isBoolean(char argChar) {\n    return booleanArgs.containsKey(argChar);  }\n  public int cardinality() {\n    return numberOfArguments;  }\n  public String usage() {\n    if (schema.length() > 0)       return \"-[\"+schema+\"]\";\nListing 14-9 (continued)\nArgs.java (Boolean only)", "208 Chapter 14: Successive Re\ufb01nement\nAlthough you can \ufb01nd plenty to complain about in this code, it\u2019s really not that bad.\nIt\u2019s compact and simple and easy to understand. However, within this code it is easy to see\nthe seeds of the later festering pile. It\u2019s quite clear how this grew into the latter mess.\nNotice that the latter mess has only two more argument types than this: String and\ninteger. The addition of just two more argument types had a massively negative impact on\nthe code. It converted it from something that would have been reasonably maintainable\ninto something that I would expect to become riddled with bugs and warts. \nI added the two argument types incrementally. First, I added the String argument,\nwhich yielded this: \n    else\n      return \"\";  }\n  public String errorMessage() {\n    if (unexpectedArguments.size() > 0) {      return unexpectedArgumentMessage();    } else\n      return \"\";\n  }\n  private String unexpectedArgumentMessage() {\n    StringBuffer message = new StringBuffer(\"Argument(s) -\");\n    for (char c : unexpectedArguments) {\n      message.append(c);    }    message.append(\" unexpected.\");\n    return message.toString();\n  }\n  public boolean getBoolean(char arg) {\n    return booleanArgs.get(arg);\n  }\n}\nListing 14-10 \nArgs.java (Boolean and String)\npackage com.objectmentor.utilities.getopts;\nimport java.text.ParseException;\nimport java.util.*;\npublic class Args {\n  private String schema;  private String[] args;\n  private boolean valid = true;\n  private Set<Character> unexpectedArguments = new TreeSet<Character>();  private Map<Character, Boolean> booleanArgs =     new HashMap<Character, Boolean>();\nListing 14-9 (continued)\nArgs.java (Boolean only)", "209Args: The Rough Draft\n  private Map<Character, String> stringArgs = \n    new HashMap<Character, String>();  private Set<Character> argsFound = new HashSet<Character>();\n  private int currentArgument;\n  private char errorArgument = '\\0';\n  enum ErrorCode {\n    OK, MISSING_STRING}\n  private ErrorCode errorCode = ErrorCode.OK;\n  public Args(String schema, String[] args) throws ParseException {\n    this.schema = schema;\n    this.args = args;\n    valid = parse();  }\n  private boolean parse() throws ParseException {\n    if (schema.length() == 0 && args.length == 0)\n      return true;    parseSchema();    parseArguments();    return valid;\n  }\n  private boolean parseSchema() throws ParseException {\n    for (String element : schema.split(\",\")) {\n      if (element.length() > 0) {\n        String trimmedElement = element.trim();        parseSchemaElement(trimmedElement);      }    }\n    return true;\n  }\n  private void parseSchemaElement(String element) throws ParseException {\n    char elementId = element.charAt(0);\n    String elementTail = element.substring(1);\n    validateSchemaElementId(elementId);    if (isBooleanSchemaElement(elementTail))      parseBooleanSchemaElement(elementId);    else if (isStringSchemaElement(elementTail))\n      parseStringSchemaElement(elementId);\n  }\n  private void validateSchemaElementId(char elementId) throws ParseException {\n    if (!Character.isLetter(elementId)) {\n      throw new ParseException(\n        \"Bad character:\" + elementId + \"in Args format: \" + schema, 0);    }\n  }\n  private void parseStringSchemaElement(char elementId) {\n    stringArgs.put(elementId, \"\");  }\nListing 14-10 (continued)\nArgs.java (Boolean and String)", "210 Chapter 14: Successive Re\ufb01nement\n  private boolean isStringSchemaElement(String elementTail) {\n    return elementTail.equals(\"*\");  }\n  private boolean isBooleanSchemaElement(String elementTail) {\n    return elementTail.length() == 0;  }\n  private void parseBooleanSchemaElement(char elementId) {\n    booleanArgs.put(elementId, false);  }\n  private boolean parseArguments() {\nfor (currentArgument = 0; currentArgument < args.length; currentArgument++) \n    {      String arg = args[currentArgument];      parseArgument(arg);\n    }\n    return true;  }\n  private void parseArgument(String arg) {\n    if (arg.startsWith(\"-\"))\n      parseElements(arg);  }\n  private void parseElements(String arg) {\n    for (int i = 1; i < arg.length(); i++)\n      parseElement(arg.charAt(i));  }\n  private void parseElement(char argChar) {\n    if (setArgument(argChar))\n      argsFound.add(argChar);    else {      unexpectedArguments.add(argChar);\n      valid = false;\n    }  }\n  private boolean setArgument(char argChar) {\n    boolean set = true;\n    if (isBoolean(argChar))      setBooleanArg(argChar, true);    else if (isString(argChar))      setStringArg(argChar, \"\");\n    else\n      set = false;\n    return set;\n  }\n  private void setStringArg(char argChar, String s) {\n    currentArgument++;    try {\nListing 14-10 (continued)\nArgs.java (Boolean and String)", "211Args: The Rough Draft\n      stringArgs.put(argChar, args[currentArgument]);\n    } catch (ArrayIndexOutOfBoundsException e) {      valid = false;\n      errorArgument = argChar;\n      errorCode = ErrorCode.MISSING_STRING;    }  }\n  private boolean isString(char argChar) {\n    return stringArgs.containsKey(argChar);  }\n  private void setBooleanArg(char argChar, boolean value) {\n    booleanArgs.put(argChar, value);\n  }\n  private boolean isBoolean(char argChar) {\n    return booleanArgs.containsKey(argChar);\n  }\n  public int cardinality() {\n    return argsFound.size();  }\n  public String usage() {\n    if (schema.length() > 0)      return \"-[\" + schema + \"]\";    else\n      return \"\";\n  }\n  public String errorMessage() throws Exception {\n    if (unexpectedArguments.size() > 0) {\n      return unexpectedArgumentMessage();\n    } else      switch (errorCode) {        case MISSING_STRING:\n          return String.format(\"Could not find string parameter for -%c.\", \n                               errorArgument);        case OK:          throw new Exception(\"TILT: Should not get here.\");      }\n    return \"\";\n  }\n  private String unexpectedArgumentMessage() {\n    StringBuffer message = new StringBuffer(\"Argument(s) -\");\n    for (char c : unexpectedArguments) {\n      message.append(c);    }    message.append(\" unexpected.\");\n    return message.toString();\n  }\nListing 14-10 (continued)\nArgs.java (Boolean and String)", "212 Chapter 14: Successive Re\ufb01nement\nYou can see that this is starting to get out of hand. It\u2019s still not horrible, but the mess is\ncertainly starting to grow. It\u2019s a pile, but it\u2019s not festering quite yet. It took the addition of\nthe integer argument type to get this pile really fermenting and festering.\nSo I Stopped\nI had at least two more argument types to add, and I could tell that they would make things\nmuch worse. If I bulldozed my way forward, I could probably get them to work, but I\u2019 d\nleave behind a mess that was too large to \ufb01x. If the structure of this code was ever going to\nbe maintainable, now was the time to \ufb01x it.\nSo I stopped adding features and started refactoring. Having just added the String and\ninteger arguments, I knew that each argument type required new code in three major\nplaces. First, each argument type required some way to parse its schema element in order\nto select the HashMap for that type. Next, each argument type needed to be parsed in the\ncommand-line strings and converted to its true type. Finally, each argument type needed a\ngetXXX method so that it could be returned to the caller as its true type. \nMany different types, all with similar methods\u2014that sounds like a class to me. And so\nthe ArgumentMarshaler concept was born.\nOn Incrementalism\nOne of the best ways to ruin a program is to make massive changes to its structure in the name of\nimprovement. Some programs never recover from such \u201cimprovements.\u201d The problem is that\nit\u2019s very hard to get the program working the same way it worked before the \u201cimprovement.\u201d \n  public boolean getBoolean(char arg) {\n    return falseIfNull(booleanArgs.get(arg));  }\n  private boolean falseIfNull(Boolean b) {\n    return b == null ? false : b;  }\n  public String getString(char arg) {\n    return blankIfNull(stringArgs.get(arg));  }\n  private String blankIfNull(String s) {\n    return s == null ? \"\" : s;\n  }\n  public boolean has(char arg) {\n    return argsFound.contains(arg);\n  }\n  public boolean isValid() {\n    return valid;\n  }\n}\nListing 14-10 (continued)\nArgs.java (Boolean and String)", "213Args: The Rough Draft\nTo avoid this, I use the discipline of Test-Driven Development (TDD). One of the cen-\ntral doctrines of this approach is to keep the system running at all times. In other words,\nusing TDD, I am not allowed to make a change to the system that breaks that system.\nEvery change I make must keep the system working as it worked before.\nTo achieve this, I need a suite of automated tests that I can run on a whim and that ver-\ni\ufb01es that the behavior of the system is unchanged. For the Args class I had created a suite\nof unit and acceptance tests while I was building the festering pile. The unit tests were\nwritten in Java and administered by JUnit. The acceptance tests were written as wiki pages\nin FitNesse. I could run these tests any time I wanted, and if they passed, I was con\ufb01dent\nthat the system was working as I speci\ufb01ed.\nSo I proceeded to make a large number of very tiny changes. Each change moved the\nstructure of the system toward the ArgumentMarshaler concept. And yet each change kept\nthe system working. The \ufb01rst change I made was to add the skeleton of the\nArgumentMarshaller to the end of the festering pile (Listing 14-11).\nClearly, this wasn\u2019t going to break anything. So then I made the simplest modi\ufb01cation\nI could, one that would break as little as possible. I changed the HashMap for the Boolean\narguments to take an ArgumentMarshaler.\nprivate Map<Character, ArgumentMarshaler> booleanArgs = \n    new HashMap<Character, ArgumentMarshaler>();\nThis broke a few statements, which I quickly \ufb01xed.\n...\nprivate void parseBooleanSchemaElement(char elementId) {\n    booleanArgs.put(elementId, new BooleanArgumentMarshaler());\n  }\n..\nListing 14-11\nArgumentMarshaller appended to Args.java\nprivate class ArgumentMarshaler {\n    private boolean booleanValue = false;\n    public void setBoolean(boolean value) {\n      booleanValue = value;    }\n    public boolean getBoolean() {return booleanValue;}\n  }\n  private class BooleanArgumentMarshaler extends ArgumentMarshaler {\n  }\n  private class StringArgumentMarshaler extends ArgumentMarshaler {\n  }\n  private class IntegerArgumentMarshaler extends ArgumentMarshaler {\n  }\n}", "214 Chapter 14: Successive Re\ufb01nement\n  private void setBooleanArg(char argChar, boolean value) {\n    booleanArgs.get(argChar).setBoolean(value);\n  }\n...\n  public boolean getBoolean(char arg) {    return falseIfNull(booleanArgs.get(arg).getBoolean());\n  }\nNotice how these changes are in exactly the areas that I mentioned before: the parse,\nset, and get for the argument type. Unfortunately, small as this change was, some of the\ntests started failing. If you look carefully at getBoolean, you\u2019ll see that if you call it with\n'y,' but there is no y argument, then booleanArgs.get('y') will return null, and the func-\ntion will throw a NullPointerException. The falseIfNull function had been used to protect\nagainst this, but the change I made caused that function to become irrelevant.\nIncrementalism demanded that I get this working quickly before making any other\nchanges. Indeed, the \ufb01x was not too dif\ufb01cult. I just had to move the check for null. It was\nno longer the boolean being null that I needed to check; it was the ArgumentMarshaller.\nFirst, I removed the falseIfNull call in the getBoolean function. It was useless now, so\nI also eliminated the function itself. The tests still failed in the same way, so I was con\ufb01-\ndent that I hadn\u2019t introduced any new errors. \npublic boolean getBoolean(char arg) {\n    return booleanArgs.get(arg).getBoolean();  }\nNext, I split the function into two lines and put the ArgumentMarshaller into its own vari-\nable named argumentMarshaller. I didn\u2019t care for the long variable name; it was badly\nredundant and cluttered up the function. So I shortened it to am [N5]. \npublic boolean getBoolean(char arg) {\n    Args.ArgumentMarshaler am = booleanArgs.get(arg);\n    return am.getBoolean();\n  }\nAnd then I put in the null detection logic.\npublic boolean getBoolean(char arg) {\n    Args.ArgumentMarshaler am = booleanArgs.get(arg);    return am != null && am.getBoolean();\n  }\nString Arguments\nAdding String arguments was very similar to adding boolean arguments. I had to change\nthe HashMap and get the parse, set, and get functions working. There shouldn\u2019t be any sur-\nprises in what follows except, perhaps, that I seem to be putting all the marshalling imple-\nmentation in the ArgumentMarshaller base class instead of distributing it to the derivatives.\nprivate Map<Character, ArgumentMarshaler> stringArgs = \n      new HashMap<Character, ArgumentMarshaler>();\n...", "215String Arguments\n  private void parseStringSchemaElement(char elementId) {\n    stringArgs.put(elementId, new StringArgumentMarshaler());\n  }\n...\n  private void setStringArg(char argChar) throws ArgsException {    currentArgument++;    try {      stringArgs.get(argChar).setString(args[currentArgument]);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      valid = false;\n      errorArgumentId = argChar;      errorCode = ErrorCode.MISSING_STRING;      throw new ArgsException();    }  }...  public String getString(char arg) {\nArgs.ArgumentMarshaler am = stringArgs.get(arg);\n    return am == null ? \"\" : am.getString();\n  }\n...  private class ArgumentMarshaler {    private boolean booleanValue = false;    private String stringValue;\n    public void setBoolean(boolean value) {\n      booleanValue = value;    }\n    public boolean getBoolean() {\n      return booleanValue;    }\npublic void setString(String s) {\n      stringValue = s;    }\n    public String getString() {\n      return stringValue == null ? \"\" : stringValue;\n    }  }\nAgain, these changes were made one at a time and in such a way that the tests kept\nrunning, if not passing. When a test broke, I made sure to get it passing again before con-\ntinuing with the next change. \nBy now you should be able to see my intent. Once I get all the current marshalling\nbehavior into the ArgumentMarshaler base class, I\u2019m going to start pushing that behavior\ndown into the derivatives. This will allow me to keep everything running while I gradually\nchange the shape of this program.\nThe obvious next step was to move the int argument functionality into the\nArgumentMarshaler. Again, there weren\u2019t any surprises.\nprivate Map<Character, ArgumentMarshaler> intArgs = \n     new HashMap<Character, ArgumentMarshaler>();\n...", "216 Chapter 14: Successive Re\ufb01nement\n  private void parseIntegerSchemaElement(char elementId) {\n    intArgs.put(elementId, new IntegerArgumentMarshaler());\n  }\n...\n  private void setIntArg(char argChar) throws ArgsException {    currentArgument++;    String parameter = null;    try {      parameter = args[currentArgument];\n      intArgs.get(argChar).setInteger(Integer.parseInt(parameter));\n    } catch (ArrayIndexOutOfBoundsException e) {      valid = false;      errorArgumentId = argChar;      errorCode = ErrorCode.MISSING_INTEGER;      throw new ArgsException();    } catch (NumberFormatException e) {      valid = false;      errorArgumentId = argChar;      errorParameter = parameter;\n      errorCode = ErrorCode.INVALID_INTEGER;\n      throw new ArgsException();    }  }...\n  public int getInt(char arg) {\nArgs.ArgumentMarshaler am = intArgs.get(arg);\n    return am == null ? 0 : am.getInteger();\n  }\n...\n  private class ArgumentMarshaler {    private boolean booleanValue = false;    private String stringValue;\nprivate int integerValue;\n    public void setBoolean(boolean value) {\n      booleanValue = value;    }\n    public boolean getBoolean() {\n      return booleanValue;    }\n    public void setString(String s) {\n      stringValue = s;\n    }\n    public String getString() {\n      return stringValue == null ? \"\" : stringValue;\n    }\n    public void setInteger(int i) {\n      integerValue = i;    }\n    public int getInteger() {\n      return integerValue;    }  }", "217String Arguments\nWith all the marshalling moved to the ArgumentMarshaler, I started pushing functional-\nity into the derivatives. The \ufb01rst step was to move the setBoolean function into the\nBooleanArgumentMarshaller and make sure it got called correctly. So I created an abstract\nset method.\nprivate abstract class ArgumentMarshaler {\nprotected boolean booleanValue = false;\n    private String stringValue;\n    private int integerValue;\n    public void setBoolean(boolean value) {\n      booleanValue = value;    }\n    public boolean getBoolean() {\n      return booleanValue;    }\n    public void setString(String s) {\n      stringValue = s;    }\n    public String getString() {\n      return stringValue == null ? \"\" : stringValue;\n    }\n    public void setInteger(int i) {\n      integerValue = i;\n    }\n    public int getInteger() {\n      return integerValue;    }\npublic abstract void set(String s);\n  }\nThen I implemented the set method in BooleanArgumentMarshaller.\nprivate class BooleanArgumentMarshaler extends ArgumentMarshaler {\npublic void set(String s) {\n      booleanValue = true;\n    }\n  }\nAnd \ufb01nally I replaced the call to setBoolean with a call to set.\nprivate void setBooleanArg(char argChar, boolean value) {    booleanArgs.get(argChar).set(\"true\");\n  }\nThe tests all still passed. Because this change caused set to be deployed to the Boolean-\nArgumentMarshaler, I removed the setBoolean method from the ArgumentMarshaler base\nclass.\nNotice that the abstract set function takes a String argument, but the implementation\nin the BooleanArgumentMarshaller does not use it. I put that argument in there because I\nknew that the StringArgumentMarshaller and IntegerArgumentMarshaller would use it.", "218 Chapter 14: Successive Re\ufb01nement\nNext, I wanted to deploy the get method into BooleanArgumentMarshaler. Deploying\nget functions is always ugly because the return type has to be Object, and in this case\nneeds to be cast to a Boolean.\npublic boolean getBoolean(char arg) {\n    Args.ArgumentMarshaler am = booleanArgs.get(arg);    return am != null && (Boolean)am.get();\n  }\nJust to get this to compile, I added the get function to the ArgumentMarshaler.\nprivate abstract class ArgumentMarshaler {\n    ...\npublic Object get() {\n      return null;    }  }\nThis compiled and obviously failed the tests. Getting the tests working again was simply a\nmatter of making get abstract and implementing it in BooleanAgumentMarshaler.\nprivate abstract class ArgumentMarshaler {\n    protected boolean booleanValue = false;    ...\n    public abstract Object get();\n  }\n  private class BooleanArgumentMarshaler extends ArgumentMarshaler {\n    public void set(String s) {\n      booleanValue = true;    }\npublic Object get() {\n      return booleanValue;\n    }  }\nOnce again the tests passed. So both get and set deploy to the BooleanArgumentMarshaler!\nThis allowed me to remove the old getBoolean function from ArgumentMarshaler, move the\nprotected booleanValue variable down to BooleanArgumentMarshaler, and make it private.\nI did the same pattern of changes for Strings. I deployed both set and get, deleted the\nunused functions, and moved the variables.\nprivate void setStringArg(char argChar) throws ArgsException {\n    currentArgument++;    try {\n      stringArgs.get(argChar).set(args[currentArgument]);\n    } catch (ArrayIndexOutOfBoundsException e) {      valid = false;      errorArgumentId = argChar;      errorCode = ErrorCode.MISSING_STRING;\n      throw new ArgsException();\n    }  }", "219String Arguments\n...\n  public String getString(char arg) {    Args.ArgumentMarshaler am = stringArgs.get(arg);\n    return am == null ? \"\" : (String) am.get();\n  }...\nprivate abstract class ArgumentMarshaler {\n    private int integerValue;\n    public void setInteger(int i) {\n      integerValue = i;    }\n    public int getInteger() {\n      return integerValue;    }\n    public abstract void set(String s);\n    public abstract Object get();\n  }\n  private class BooleanArgumentMarshaler extends ArgumentMarshaler {\nprivate boolean booleanValue = false;\n    public void set(String s) {\n      booleanValue = true;    }\n    public Object get() {\n      return booleanValue;    }  }\n  private class StringArgumentMarshaler extends ArgumentMarshaler {\nprivate String stringValue = \"\";\n    public void set(String s) {\nstringValue = s;\n    }\n    public Object get() {\nreturn stringValue;\n    }  }\n  private class IntegerArgumentMarshaler extends ArgumentMarshaler {\n    public void set(String s) {\n    }\n    public Object get() {\n      return null;    }  }}", "220 Chapter 14: Successive Re\ufb01nement\nFinally, I repeated the process for integers. This was just a little more complicated\nbecause integers needed to be parsed, and the parse operation can throw an exception. But\nthe result is better because the whole concept of NumberFormatException got buried in the\nIntegerArgumentMarshaler.\nprivate boolean isIntArg(char argChar) {return intArgs.containsKey(argChar);}\n  private void setIntArg(char argChar) throws ArgsException {\n    currentArgument++;\n    String parameter = null;    try {      parameter = args[currentArgument];      intArgs.get(argChar).set(parameter);\n    } catch (ArrayIndexOutOfBoundsException e) {\n      valid = false;      errorArgumentId = argChar;      errorCode = ErrorCode.MISSING_INTEGER;      throw new ArgsException();\n    } catch (ArgsException e) {\n      valid = false;      errorArgumentId = argChar;      errorParameter = parameter;      errorCode = ErrorCode.INVALID_INTEGER;\n      throw e;\n    }  }...  private void setBooleanArg(char argChar) {\ntry {\n      booleanArgs.get(argChar).set(\"true\");\n} catch (ArgsException e) {\n    }\n  }\n...  public int getInt(char arg) {    Args.ArgumentMarshaler am = intArgs.get(arg);    return am == null ? 0 : (Integer) am.get();\n  }\n...  private abstract class ArgumentMarshaler {    public abstract void set(String s) throws ArgsException;    public abstract Object get();\n  }\n...  private class IntegerArgumentMarshaler extends ArgumentMarshaler {\nprivate int intValue = 0;\n    public void set(String s) throws ArgsException {\ntry {\n        intValue = Integer.parseInt(s);      } catch (NumberFormatException e) {        throw new ArgsException();\n      }\n    }\n    public Object get() {\nreturn intValue;\n    }\n  }", "221String Arguments\nOf course, the tests continued to pass. Next, I got rid of the three different maps up at\nthe top of the algorithm. This made the whole system much more generic. However, I\ncouldn\u2019t get rid of them just by deleting them because that would break the system.\nInstead, I added a new Map for the ArgumentMarshaler and then one by one changed the\nmethods to use it instead of the three original maps.\npublic class Args {\n...  private Map<Character, ArgumentMarshaler> booleanArgs = \n    new HashMap<Character, ArgumentMarshaler>();\n  private Map<Character, ArgumentMarshaler> stringArgs =     new HashMap<Character, ArgumentMarshaler>();  private Map<Character, ArgumentMarshaler> intArgs =     new HashMap<Character, ArgumentMarshaler>();\nprivate Map<Character, ArgumentMarshaler> marshalers = \nnew HashMap<Character, ArgumentMarshaler>();\n...  private void parseBooleanSchemaElement(char elementId) {\nArgumentMarshaler m = new BooleanArgumentMarshaler();\n    booleanArgs.put(elementId, m);\n    marshalers.put(elementId, m);  }\n  private void parseIntegerSchemaElement(char elementId) {\n    ArgumentMarshaler m = new IntegerArgumentMarshaler();\n    intArgs.put(elementId, m);    marshalers.put(elementId, m);  }\n  private void parseStringSchemaElement(char elementId) {\n    ArgumentMarshaler m = new StringArgumentMarshaler();    stringArgs.put(elementId, m);    marshalers.put(elementId, m);  }\nOf course the tests all still passed. Next, I changed isBooleanArg from this:\nprivate boolean isBooleanArg(char argChar) {\n    return booleanArgs.containsKey(argChar);  }\nto this:\nprivate boolean isBooleanArg(char argChar) {\nArgumentMarshaler m = marshalers.get(argChar);\n    return m instanceof BooleanArgumentMarshaler;\n  }\nThe tests still passed. So I made the same change to isIntArg and isStringArg.\nprivate boolean isIntArg(char argChar) {\nArgumentMarshaler m = marshalers.get(argChar);\n    return m instanceof IntegerArgumentMarshaler;\n  }\n  private boolean isStringArg(char argChar) {\nArgumentMarshaler m = marshalers.get(argChar);\n    return m instanceof StringArgumentMarshaler;\n  }", "222 Chapter 14: Successive Re\ufb01nement\nThe tests still passed. So I eliminated all the duplicate calls to marshalers.get as follows:\nprivate boolean setArgument(char argChar) throws ArgsException {\nArgumentMarshaler m = marshalers.get(argChar);\n    if (isBooleanArg(m))\n      setBooleanArg(argChar);\n    else if (isStringArg(m))\n      setStringArg(argChar);    else if (isIntArg(m))\n      setIntArg(argChar);    else\n      return false;\n    return true;\n  }\n  private boolean isIntArg(ArgumentMarshaler m) {\n    return m instanceof IntegerArgumentMarshaler;  }\n  private boolean isStringArg(ArgumentMarshaler m) {\n    return m instanceof StringArgumentMarshaler;\n  }\n  private boolean isBooleanArg(ArgumentMarshaler m) {\n    return m instanceof BooleanArgumentMarshaler;\n  }\nThis left no good reason for the three isxxxArg methods. So I inlined them:\nprivate boolean setArgument(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);    if (m instanceof BooleanArgumentMarshaler)\n      setBooleanArg(argChar);\n    else if (m instanceof StringArgumentMarshaler)\n      setStringArg(argChar);    else if (m instanceof IntegerArgumentMarshaler)\n      setIntArg(argChar);\n    else\n      return false;\n    return true;\n  }\nNext, I started using the marshalers map in the set functions, breaking the use of the other\nthree maps. I started with the booleans.\nprivate boolean setArgument(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);    if (m instanceof BooleanArgumentMarshaler)\n      setBooleanArg(m);\n    else if (m instanceof StringArgumentMarshaler)      setStringArg(argChar);    else if (m instanceof IntegerArgumentMarshaler)      setIntArg(argChar);\n    else\n      return false;", "223String Arguments\n    return true;\n  }...\n  private void setBooleanArg(ArgumentMarshaler m) {\n    try {\nm.set(\"true\"); // was: booleanArgs.get(argChar).set(\"true\");\n    } catch (ArgsException e) {    }  }\nThe tests still passed, so I did the same with Strings and Integers. This allowed me to inte-\ngrate some of the ugly exception management code into the setArgument function.\nprivate boolean setArgument(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);\ntry {\n      if (m instanceof BooleanArgumentMarshaler)\n        setBooleanArg(m);      else if (m instanceof StringArgumentMarshaler)        setStringArg(m);\n      else if (m instanceof IntegerArgumentMarshaler)\n        setIntArg(m);\n      else        return false;\n} catch (ArgsException e) {\nvalid = false;\n      errorArgumentId = argChar;      throw e;    }    return true;\n  }\n  private void setIntArg(ArgumentMarshaler m) throws ArgsException {\n    currentArgument++;    String parameter = null;\n    try {\n      parameter = args[currentArgument];\nm.set(parameter);\n    } catch (ArrayIndexOutOfBoundsException e) {      errorCode = ErrorCode.MISSING_INTEGER;\n      throw new ArgsException();\n    } catch (ArgsException e) {      errorParameter = parameter;      errorCode = ErrorCode.INVALID_INTEGER;\n      throw e;\n    }  }\n  private void setStringArg(ArgumentMarshaler m) throws ArgsException {\n    currentArgument++;\n    try {\nm.set(args[currentArgument]);\n    } catch (ArrayIndexOutOfBoundsException e) {      errorCode = ErrorCode.MISSING_STRING;      throw new ArgsException();\n    }\n  }", "224 Chapter 14: Successive Re\ufb01nement\nI was close to being able to remove the three old maps. First, I needed to change the\ngetBoolean function from this:\npublic boolean getBoolean(char arg) {\n    Args.ArgumentMarshaler am = booleanArgs.get(arg);    return am != null && (Boolean) am.get();\n  }\nto this:\npublic boolean getBoolean(char arg) {\n    Args.ArgumentMarshaler am = marshalers.get(arg);\nboolean b = false;\n try {\n      b = am != null && (Boolean) am.get();\n} catch (ClassCastException e) {\n      b = false;    }    return b;  }\nThis last change might have been a surprise. Why did I suddenly decide to deal with\nthe ClassCastException? The reason is that I have a set of unit tests and a separate set of\nacceptance tests written in FitNesse. It turns out that the FitNesse tests made sure that if\nyou called getBoolean on a nonboolean argument, you got a false. The unit tests did not.\nUp to this point I had only been running the unit tests.2\nThis last change allowed me to pull out another use of the boolean map:\nprivate void parseBooleanSchemaElement(char elementId) {\n    ArgumentMarshaler m = new BooleanArgumentMarshaler();    booleanArgs.put(elementId, m);\n    marshalers.put(elementId, m);  }\nAnd now we can delete the boolean map.\npublic class Args {...\nprivate Map<Character, ArgumentMarshaler> booleanArgs = \nnew HashMap<Character, ArgumentMarshaler>();\nprivate Map<Character, ArgumentMarshaler> stringArgs = new HashMap<Character, ArgumentMarshaler>();\n  private Map<Character, ArgumentMarshaler> intArgs = \nnew HashMap<Character, ArgumentMarshaler>();\n  private Map<Character, ArgumentMarshaler> marshalers = \nnew HashMap<Character, ArgumentMarshaler>();\n...\nNext, I migrated the String and Integer arguments in the same manner and did a little\ncleanup with the booleans.\nprivate void parseBooleanSchemaElement(char elementId) {\n    marshalers.put(elementId, new BooleanArgumentMarshaler());\n  }\n2. To prevent further surprises of this kind, I added a new unit test that invoked all the FitNesse tests.", "225String Arguments\n  private void parseIntegerSchemaElement(char elementId) {\n    marshalers.put(elementId, new IntegerArgumentMarshaler());\n  }\n  private void parseStringSchemaElement(char elementId) {\n    marshalers.put(elementId, new StringArgumentMarshaler());\n  }...\n  public String getString(char arg) {\n    Args.ArgumentMarshaler am = marshalers.get(arg);\ntry {\n      return am == null ? \"\" : (String) am.get();\n} catch (ClassCastException e) {\n     return \"\";\n    }\n  }\n  public int getInt(char arg) {\n    Args.ArgumentMarshaler am = marshalers.get(arg);\n    try {\n      return am == null ? 0 : (Integer) am.get();    } catch (Exception e) {      return 0;    }\n  }\n...public class Args {...\n  private Map<Character, ArgumentMarshaler> stringArgs = \nnew HashMap<Character, ArgumentMarshaler>();\n  private Map<Character, ArgumentMarshaler> intArgs = \nnew HashMap<Character, ArgumentMarshaler>();\nprivate Map<Character, ArgumentMarshaler> marshalers = \nnew HashMap<Character, ArgumentMarshaler>();\n...\nNext, I inlined the three parse methods because they didn\u2019t do much anymore:\nprivate void parseSchemaElement(String element) throws ParseException {\n    char elementId = element.charAt(0);    String elementTail = element.substring(1);\n    validateSchemaElementId(elementId);\n    if (isBooleanSchemaElement(elementTail))\nmarshalers.put(elementId, new BooleanArgumentMarshaler());\n    else if (isStringSchemaElement(elementTail))      marshalers.put(elementId, new StringArgumentMarshaler());\n    else if (isIntegerSchemaElement(elementTail)) {\n      marshalers.put(elementId, new IntegerArgumentMarshaler());    } else {      throw new ParseException(String.format(\n    \"Argument: %c has invalid format: %s.\", elementId, elementTail), 0);\n    }\n  }\nOkay, so now let\u2019s look at the whole picture again. Listing 14-12 shows the current\nform of the Args class.", "226 Chapter 14: Successive Re\ufb01nement\nListing 14-12 \nArgs.java (After first refactoring)\npackage com.objectmentor.utilities.getopts;\nimport java.text.ParseException;\nimport java.util.*;\npublic class Args {\n  private String schema;  private String[] args;\n  private boolean valid = true;\n  private Set<Character> unexpectedArguments = new TreeSet<Character>();  private Map<Character, ArgumentMarshaler> marshalers = \nnew HashMap<Character, ArgumentMarshaler>();\n  private Set<Character> argsFound = new HashSet<Character>();\n  private int currentArgument;\n  private char errorArgumentId = '\\0';  private String errorParameter = \"TILT\";  private ErrorCode errorCode = ErrorCode.OK;\n  private enum ErrorCode {\n    OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT}\n  public Args(String schema, String[] args) throws ParseException {\n    this.schema = schema;\n    this.args = args;\n    valid = parse();  }\n  private boolean parse() throws ParseException {\n    if (schema.length() == 0 && args.length == 0)\n      return true;    parseSchema();    try {\n      parseArguments();\n    } catch (ArgsException e) {    }    return valid;  }\n  private boolean parseSchema() throws ParseException {\n    for (String element : schema.split(\",\")) {      if (element.length() > 0) {        String trimmedElement = element.trim();\n        parseSchemaElement(trimmedElement);\n      }    }    return true;  }\n  private void parseSchemaElement(String element) throws ParseException {\n    char elementId = element.charAt(0);    String elementTail = element.substring(1);    validateSchemaElementId(elementId);\n    if (isBooleanSchemaElement(elementTail))\n      marshalers.put(elementId, new BooleanArgumentMarshaler());    else if (isStringSchemaElement(elementTail))      marshalers.put(elementId, new StringArgumentMarshaler());", "227String Arguments\n    else if (isIntegerSchemaElement(elementTail)) {\n      marshalers.put(elementId, new IntegerArgumentMarshaler());    } else {\n      throw new ParseException(String.format(\n    \"Argument: %c has invalid format: %s.\", elementId, elementTail), 0);\n    }  }\n  private void validateSchemaElementId(char elementId) throws ParseException {\n    if (!Character.isLetter(elementId)) {      throw new ParseException(\n    \"Bad character:\" + elementId + \"in Args format: \" + schema, 0);\n    }  }\n  private boolean isStringSchemaElement(String elementTail) {\n    return elementTail.equals(\"*\");  }\n  private boolean isBooleanSchemaElement(String elementTail) {\n    return elementTail.length() == 0;  }\n  private boolean isIntegerSchemaElement(String elementTail) {\n    return elementTail.equals(\"#\");  }\n  private boolean parseArguments() throws ArgsException {\n    for (currentArgument=0; currentArgument<args.length; currentArgument++) {\n      String arg = args[currentArgument];      parseArgument(arg);    }    return true;\n  }\n  private void parseArgument(String arg) throws ArgsException {\n    if (arg.startsWith(\"-\"))      parseElements(arg);\n  }\n  private void parseElements(String arg) throws ArgsException {\n    for (int i = 1; i < arg.length(); i++)      parseElement(arg.charAt(i));\n  }\n  private void parseElement(char argChar) throws ArgsException {\n    if (setArgument(argChar))      argsFound.add(argChar);\n    else {\n      unexpectedArguments.add(argChar);      errorCode = ErrorCode.UNEXPECTED_ARGUMENT;      valid = false;    }\n  }\nListing 14-12 (continued)\nArgs.java (After first refactoring)", "228 Chapter 14: Successive Re\ufb01nement\n  private boolean setArgument(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);    try {\n      if (m instanceof BooleanArgumentMarshaler)\n        setBooleanArg(m);      else if (m instanceof StringArgumentMarshaler)        setStringArg(m);      else if (m instanceof IntegerArgumentMarshaler)        setIntArg(m);\n      else\n        return false;    } catch (ArgsException e) {      valid = false;      errorArgumentId = argChar;\n      throw e;\n    }    return true;  }\n  private void setIntArg(ArgumentMarshaler m) throws ArgsException {\n    currentArgument++;    String parameter = null;    try {\n      parameter = args[currentArgument];\n      m.set(parameter);    } catch (ArrayIndexOutOfBoundsException e) {      errorCode = ErrorCode.MISSING_INTEGER;      throw new ArgsException();\n    } catch (ArgsException e) {\n      errorParameter = parameter;      errorCode = ErrorCode.INVALID_INTEGER;      throw e;    }\n  }\n  private void setStringArg(ArgumentMarshaler m) throws ArgsException {\n    currentArgument++;    try {\n      m.set(args[currentArgument]);\n    } catch (ArrayIndexOutOfBoundsException e) {      errorCode = ErrorCode.MISSING_STRING;      throw new ArgsException();\n    }\n  }\n  private void setBooleanArg(ArgumentMarshaler m) {\n    try {\n      m.set(\"true\");\n    } catch (ArgsException e) {    }  }\n  public int cardinality() {\n    return argsFound.size();\n  }\nListing 14-12 (continued)\nArgs.java (After first refactoring)", "229String Arguments\n  public String usage() {\n    if (schema.length() > 0)      return \"-[\" + schema + \"]\";\n    else\n      return \"\";  }\n  public String errorMessage() throws Exception {\n    switch (errorCode) {\n      case OK:        throw new Exception(\"TILT: Should not get here.\");      case UNEXPECTED_ARGUMENT:        return unexpectedArgumentMessage();      case MISSING_STRING:\n        return String.format(\"Could not find string parameter for -%c.\", \n                             errorArgumentId);      case INVALID_INTEGER:        return String.format(\"Argument -%c expects an integer but was '%s'.\", \n                             errorArgumentId, errorParameter);\n      case MISSING_INTEGER:        return String.format(\"Could not find integer parameter for -%c.\",                              errorArgumentId);    }\n    return \"\";\n  }\n  private String unexpectedArgumentMessage() {\n    StringBuffer message = new StringBuffer(\"Argument(s) -\");\n    for (char c : unexpectedArguments) {\n      message.append(c);    }    message.append(\" unexpected.\");\n    return message.toString();\n  }\n  public boolean getBoolean(char arg) {\n    Args.ArgumentMarshaler am = marshalers.get(arg);\n    boolean b = false;    try {      b = am != null && (Boolean) am.get();    } catch (ClassCastException e) {\n      b = false;\n    }    return b;  }\n  public String getString(char arg) {\n    Args.ArgumentMarshaler am = marshalers.get(arg);    try {      return am == null ? \"\" : (String) am.get();    } catch (ClassCastException e) {\n      return \"\";\n    }  }\nListing 14-12 (continued)\nArgs.java (After first refactoring)", "230 Chapter 14: Successive Re\ufb01nement\n  public int getInt(char arg) {\n    Args.ArgumentMarshaler am = marshalers.get(arg);    try {\n      return am == null ? 0 : (Integer) am.get();\n    } catch (Exception e) {      return 0;    }  }\n  public boolean has(char arg) {\n    return argsFound.contains(arg);  }\n  public boolean isValid() {\n    return valid;\n  }\n  private class ArgsException extends Exception {\n  }\n  private abstract class ArgumentMarshaler {\n    public abstract void set(String s) throws ArgsException;    public abstract Object get();\n  }\n  private class BooleanArgumentMarshaler extends ArgumentMarshaler {\n    private boolean booleanValue = false;\n    public void set(String s) {\n      booleanValue = true;    }\n    public Object get() {\n      return booleanValue;\n    }  }\n  private class StringArgumentMarshaler extends ArgumentMarshaler {\n    private String stringValue = \"\";\n    public void set(String s) {\n      stringValue = s;    }\n    public Object get() {\n      return stringValue;    }  }\n  private class IntegerArgumentMarshaler extends ArgumentMarshaler {\n    private int intValue = 0;\n    public void set(String s) throws ArgsException {\n      try {\n        intValue = Integer.parseInt(s);\nListing 14-12 (continued)\nArgs.java (After first refactoring)", "231String Arguments\nAfter all that work, this is a bit disappointing. The structure is a bit better, but we still\nhave all those variables up at the top; there\u2019s still a horrible type-case in setArgument; and\nall those set functions are really ugly. Not to mention all the error processing. We still\nhave a lot of work ahead of us.\nI\u2019d really like to get rid of that type-case up in setArgument [G23]. What I\u2019d like in\nsetArgument is a single call to ArgumentMarshaler.set. This means I need to push\nsetIntArg, setStringArg, and setBooleanArg down into the appropriate ArgumentMarshaler\nderivatives. But there is a problem.\nIf you look closely at setIntArg, you\u2019ll notice that it uses two instance variables: args\nand currentArg. To move setIntArg down into BooleanArgumentMarshaler, I\u2019ll have to pass\nboth args and currentArgs as function arguments. That\u2019s dirty [F1]. I\u2019d rather pass one\nargument instead of two. Fortunately, there is a simple solution. We can convert the args\narray into a list and pass an Iterator down to the set functions. The following took me\nten steps, passing all the tests after each. But I\u2019ll just show you the result. You should be\nable to \ufb01gure out what most of the tiny little steps were.\npublic class Args {\n  private String schema;  private String[] args;\n  private boolean valid = true;  private Set<Character> unexpectedArguments = new TreeSet<Character>();  private Map<Character, ArgumentMarshaler> marshalers = \nnew HashMap<Character, ArgumentMarshaler>();\n  private Set<Character> argsFound = new HashSet<Character>();  private Iterator<String> currentArgument;\n  private char errorArgumentId = '\\0';  private String errorParameter = \"TILT\";\n  private ErrorCode errorCode = ErrorCode.OK;\nprivate List<String> argsList;\n  private enum ErrorCode {\n    OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT}\n  public Args(String schema, String[] args) throws ParseException {\n    this.schema = schema;\nargsList = Arrays.asList(args);\n    valid = parse();\n  }\n      } catch (NumberFormatException e) {\n        throw new ArgsException();      }    }\n    public Object get() {\n      return intValue;    }  }\n}\nListing 14-12 (continued)\nArgs.java (After first refactoring)", "232 Chapter 14: Successive Re\ufb01nement\n  private boolean parse() throws ParseException {\n    if (schema.length() == 0 && argsList.size() == 0)\n      return true;\n    parseSchema();\n    try {      parseArguments();    } catch (ArgsException e) {    }    return valid;\n  }\n---  private boolean parseArguments() throws ArgsException {    for (currentArgument = argsList.iterator(); currentArgument.hasNext();) {\n      String arg = currentArgument.next();\n      parseArgument(arg);\n    }\n    return true;\n  }\n---\n  private void setIntArg(ArgumentMarshaler m) throws ArgsException {    String parameter = null;    try {      parameter = currentArgument.next();\n      m.set(parameter);\n    } catch (NoSuchElementException e) {\n      errorCode = ErrorCode.MISSING_INTEGER;      throw new ArgsException();    } catch (ArgsException e) {\n      errorParameter = parameter;\n      errorCode = ErrorCode.INVALID_INTEGER;      throw e;    }\n  }\n  private void setStringArg(ArgumentMarshaler m) throws ArgsException {\n    try {      m.set(currentArgument.next());\n    } catch (NoSuchElementException e) {\n      errorCode = ErrorCode.MISSING_STRING;      throw new ArgsException();    }  }\nThese were simple changes that kept all the tests passing. Now we can start moving the set\nfunctions down into the appropriate derivatives. First, I need to make the following change\nin setArgument:\nprivate boolean setArgument(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);    if (m == null)\n      return false;\n    try {      if (m instanceof BooleanArgumentMarshaler)        setBooleanArg(m);      else if (m instanceof StringArgumentMarshaler)\n        setStringArg(m);\n      else if (m instanceof IntegerArgumentMarshaler)        setIntArg(m);", "233String Arguments\n      else\n        return false;\n    } catch (ArgsException e) {\n      valid = false;      errorArgumentId = argChar;\n      throw e;\n    }    return true;  }\nThis change is important because we want to completely eliminate the if-else chain.\nTherefore, we needed to get the error condition out of it. \nNow we can start to move the set functions. The setBooleanArg function is trivial, so\nwe\u2019ll prepare that one \ufb01rst. Our goal is to change the setBooleanArg function to simply for-\nward to the BooleanArgumentMarshaler.\nprivate boolean setArgument(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);    if (m == null)\n      return false;\n    try {      if (m instanceof BooleanArgumentMarshaler)        setBooleanArg(m, currentArgument);\n      else if (m instanceof StringArgumentMarshaler)\n        setStringArg(m);\n      else if (m instanceof IntegerArgumentMarshaler)        setIntArg(m);\n    } catch (ArgsException e) {\n      valid = false;      errorArgumentId = argChar;      throw e;    }\n    return true;\n  }---  private void setBooleanArg(ArgumentMarshaler m, \nIterator<String> currentArgument) \n                             throws ArgsException {\ntry {\n      m.set(\"true\");\ncatch (ArgsException e) {\n   }\n  }\nDidn\u2019t we just put that exception processing in? Putting things in so you can take\nthem out again is pretty common in refactoring. The smallness of the steps and the need to\nkeep the tests running means that you move things around a lot. Refactoring is a lot like\nsolving a Rubik\u2019s cube. There are lots of little steps required to achieve a large goal. Each\nstep enables the next.\nWhy did we pass that iterator when setBooleanArgcertainly doesn\u2019t need it? Because\nsetIntArg and setStringArg will! And because I want to deploy all three of these functions\nthrough an abstract method in ArgumentMarshaller, I need to pass it to setBooleanArg.", "234 Chapter 14: Successive Re\ufb01nement\nSo now setBooleanArgis useless. If there were a set function in ArgumentMarshaler, we\ncould call it directly. So it\u2019s time to make that function! The \ufb01rst step is to add the new\nabstract method to ArgumentMarshaler.\nprivate abstract class ArgumentMarshaler {\n    public abstract void set(Iterator<String> currentArgument)                          throws ArgsException;\n    public abstract void set(String s) throws ArgsException;\n    public abstract Object get();  }\nOf course this breaks all the derivatives. So let\u2019 s implement the new method in each.\nprivate class BooleanArgumentMarshaler extends ArgumentMarshaler {\n    private boolean booleanValue = false;\npublic void set(Iterator<String> currentArgument) throws ArgsException {\nbooleanValue = true;\n    }\n    public void set(String s) {\n      booleanValue = true;\n    }\n    public Object get() {\n      return booleanValue;\n    }  }\n  private class StringArgumentMarshaler extends ArgumentMarshaler {\n    private String stringValue = \"\";\npublic void set(Iterator<String> currentArgument) throws ArgsException {\n    }\n    public void set(String s) {\n      stringValue = s;    }\n    public Object get() {\n      return stringValue;\n    }  }\n  private class IntegerArgumentMarshaler extends ArgumentMarshaler {\n    private int intValue = 0;\npublic void set(Iterator<String> currentArgument) throws ArgsException {\n    }\n    public void set(String s) throws ArgsException {\n      try {        intValue = Integer.parseInt(s);      } catch (NumberFormatException e) {\n        throw new ArgsException();\n      }    }", "235String Arguments\n    public Object get() {\n      return intValue;    }\n  }\nAnd now we can eliminate setBooleanArg!\nprivate boolean setArgument(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);    if (m == null)\n      return false;\n    try {      if (m instanceof BooleanArgumentMarshaler)\nm.set(currentArgument);\n      else if (m instanceof StringArgumentMarshaler)        setStringArg(m);\n      else if (m instanceof IntegerArgumentMarshaler)\n        setIntArg(m);\n    } catch (ArgsException e) {\n      valid = false;\n      errorArgumentId = argChar;\n      throw e;    }    return true;\n  }\nThe tests all pass, and the set function is deploying to BooleanArgumentMarshaler!\nNow we can do the same for Strings and Integers.\nprivate boolean setArgument(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);    if (m == null)\n      return false;\n    try {      if (m instanceof BooleanArgumentMarshaler)        m.set(currentArgument);      else if (m instanceof StringArgumentMarshaler)\n        m.set(currentArgument);\n      else if (m instanceof IntegerArgumentMarshaler)        m.set(currentArgument);\n    } catch (ArgsException e) {\n      valid = false;      errorArgumentId = argChar;      throw e;    }\n    return true;\n  }---  private class StringArgumentMarshaler extends ArgumentMarshaler {    private String stringValue = \"\";\n    public void set(Iterator<String> currentArgument) throws ArgsException {\n try {\n        stringValue = currentArgument.next();      } catch (NoSuchElementException e) {\n        errorCode = ErrorCode.MISSING_STRING;", "236 Chapter 14: Successive Re\ufb01nement\n   throw new ArgsException();\n      }    }\n    public void set(String s) {\n    }\n    public Object get() {\n      return stringValue;\n    }  }\n  private class IntegerArgumentMarshaler extends ArgumentMarshaler {\n    private int intValue = 0;\npublic void set(Iterator<String> currentArgument) throws ArgsException {\n  String parameter = null;\n    try {\n      parameter = currentArgument.next();\n      set(parameter);    } catch (NoSuchElementException e) {      errorCode = ErrorCode.MISSING_INTEGER;      throw new ArgsException();\n    } catch (ArgsException e) {\n      errorParameter = parameter;      errorCode = ErrorCode.INVALID_INTEGER;      throw e;\n    }\n}\n    public void set(String s) throws ArgsException {\n      try {\n        intValue = Integer.parseInt(s);\n      } catch (NumberFormatException e) {        throw new ArgsException();      }    }\n    public Object get() {\n      return intValue;    }  }\nAnd so the coup de grace: The type-case can be removed! Touche!\nprivate boolean setArgument(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);    if (m == null)\n      return false;\n    try {      m.set(currentArgument);      return true;    } catch (ArgsException e) {\n      valid = false;\n      errorArgumentId = argChar;      throw e;    }  }", "237String Arguments\nNow we can get rid of some crufty functions in IntegerArgumentMarshaler and clean it up\na bit.\nprivate class IntegerArgumentMarshaler extends ArgumentMarshaler {\n    private int intValue = 0\n    public void set(Iterator<String> currentArgument) throws ArgsException {\n      String parameter = null;      try {        parameter = currentArgument.next();\nintValue = Integer.parseInt(parameter);\n      } catch (NoSuchElementException e) {\n        errorCode = ErrorCode.MISSING_INTEGER;        throw new ArgsException();      } catch (NumberFormatException e) {\n        errorParameter = parameter;        errorCode = ErrorCode.INVALID_INTEGER;\n        throw new ArgsException();\n      }\n    }\n    public Object get() {\n      return intValue;    }  }\nWe can also turn ArgumentMarshaler into an interface. \nprivate interface ArgumentMarshaler {\n    void set(Iterator<String> currentArgument) throws ArgsException;    Object get();\n  }\nSo now let\u2019s see how easy it is to add a new argument type to our structure. It should\nrequire very few changes, and those changes should be isolated. First, we begin by adding\na new test case to check that the double argument works correctly.\npublic void testSimpleDoublePresent() throws Exception {\n    Args args = new Args(\"x##\", new String[] {\"-x\",\"42.3\"});    assertTrue(args.isValid());\n    assertEquals(1, args.cardinality());\n    assertTrue(args.has('x'));    assertEquals(42.3, args.getDouble('x'), .001);  }\nNow we clean up the schema parsing code and add the ## detection for the double\nargument type.\nprivate void parseSchemaElement(String element) throws ParseException {\n    char elementId = element.charAt(0);    String elementTail = element.substring(1);\n    validateSchemaElementId(elementId);\n    if (elementTail.length() == 0)\n      marshalers.put(elementId, new BooleanArgumentMarshaler());    else if (elementTail.equals(\"*\"))\n      marshalers.put(elementId, new StringArgumentMarshaler());\n    else if (elementTail.equals(\"#\"))\n      marshalers.put(elementId, new IntegerArgumentMarshaler());", "238 Chapter 14: Successive Re\ufb01nement\nelse if (elementTail.equals(\"##\"))\n      marshalers.put(elementId, new DoubleArgumentMarshaler());    else\n      throw new ParseException(String.format(\n        \"Argument: %c has invalid format: %s.\", elementId, elementTail), 0);  }\nNext, we write the DoubleArgumentMarshaler class.\nprivate class DoubleArgumentMarshaler implements ArgumentMarshaler {\n    private double doubleValue = 0;\n    public void set(Iterator<String> currentArgument) throws ArgsException {\n      String parameter = null;      try {        parameter = currentArgument.next();        doubleValue = Double.parseDouble(parameter);\n      } catch (NoSuchElementException e) {\n        errorCode = ErrorCode.MISSING_DOUBLE;        throw new ArgsException();      } catch (NumberFormatException e) {        errorParameter = parameter;\n        errorCode = ErrorCode.INVALID_DOUBLE;\n        throw new ArgsException();      }    }\n    public Object get() {\n      return doubleValue;    }  }\nThis forces us to add a new ErrorCode.\nprivate enum ErrorCode {    OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT, \nMISSING_DOUBLE, INVALID_DOUBLE}\nAnd we need a getDouble function.\npublic double getDouble(char arg) {\n    Args.ArgumentMarshaler am = marshalers.get(arg);    try {\n      return am == null ? 0 : (Double) am.get();\n    } catch (Exception e) {      return 0.0;    }  }\nAnd all the tests pass! That was pretty painless. So now let\u2019s make sure all the error\nprocessing works correctly. The next test case checks that an error is declared if an\nunparseable string is fed to a ## argument.\npublic void testInvalidDouble() throws Exception {\n    Args args = new Args(\"x##\", new String[] {\"-x\",\"Forty two\"});    assertFalse(args.isValid());\n    assertEquals(0, args.cardinality());\n    assertFalse(args.has('x'));    assertEquals(0, args.getInt('x'));", "239String Arguments\n    assertEquals(\"Argument -x expects a double but was 'Forty two'.\", \n                 args.errorMessage());  }\n---\n  public String errorMessage() throws Exception {    switch (errorCode) {      case OK:        throw new Exception(\"TILT: Should not get here.\");      case UNEXPECTED_ARGUMENT:\n        return unexpectedArgumentMessage();\n      case MISSING_STRING:        return String.format(\"Could not find string parameter for -%c.\",                              errorArgumentId);      case INVALID_INTEGER:        return String.format(\"Argument -%c expects an integer but was '%s'.\",                              errorArgumentId, errorParameter);      case MISSING_INTEGER:        return String.format(\"Could not find integer parameter for -%c.\",                              errorArgumentId);\n  case INVALID_DOUBLE:\n        return String.format(\"Argument -%c expects a double but was '%s'.\",                             errorArgumentId, errorParameter);      case MISSING_DOUBLE:        return String.format(\"Could not find double parameter for -%c.\", \n                             errorArgumentId);\n    }    return \"\";  }\nAnd the tests pass. The next test makes sure we detect a missing doubleargument properly. \npublic void testMissingDouble() throws Exception {\n    Args args = new Args(\"x##\", new String[]{\"-x\"});    assertFalse(args.isValid());\n    assertEquals(0, args.cardinality());\n    assertFalse(args.has('x'));    assertEquals(0.0, args.getDouble('x'), 0.01);    assertEquals(\"Could not find double parameter for -x.\",                  args.errorMessage());\n  }\nThis passes as expected. We wrote it simply for completeness. \nThe exception code is pretty ugly and doesn\u2019t really belong in the Args class. We are\nalso throwing out ParseException, which doesn\u2019t really belong to us. So let\u2019s merge all the\nexceptions into a single ArgsException class and move it into its own module.\npublic class ArgsException extends Exception {\n  private char errorArgumentId = '\\0';  private String errorParameter = \"TILT\";\n  private ErrorCode errorCode = ErrorCode.OK;\n  public ArgsException() {}\n  public ArgsException(String message) {super(message);}\n  public enum ErrorCode {\n    OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT,     MISSING_DOUBLE, INVALID_DOUBLE}}\n---", "240 Chapter 14: Successive Re\ufb01nement\npublic class Args {\n  ...  private char errorArgumentId = '\\0';\n  private String errorParameter = \"TILT\";\n  private ArgsException.ErrorCode errorCode = ArgsException.ErrorCode.OK;\n  private List<String> argsList;\n  public Args(String schema, String[] args) throws ArgsException {\n    this.schema = schema;\n    argsList = Arrays.asList(args);    valid = parse();  }\n  private boolean parse() throws ArgsException {\n    if (schema.length() == 0 && argsList.size() == 0)      return true;    parseSchema();    try {\n      parseArguments();\n    } catch (ArgsException e) {\n    }    return valid;  }\n  private boolean parseSchema() throws ArgsException {\n    ...  }\n  private void parseSchemaElement(String element) throws ArgsException {\n    ...    else      throw new ArgsException(\n        String.format(\"Argument: %c has invalid format: %s.\", \n                      elementId,elementTail));  }\n  private void validateSchemaElementId(char elementId) throws ArgsException {\n    if (!Character.isLetter(elementId)) {\n      throw new ArgsException(\n        \"Bad character:\" + elementId + \"in Args format: \" + schema);    }  }\n  ...\n  private void parseElement(char argChar) throws ArgsException {\n    if (setArgument(argChar))\n      argsFound.add(argChar);\n    else {      unexpectedArguments.add(argChar);      errorCode = ArgsException.ErrorCode.UNEXPECTED_ARGUMENT;\n      valid = false;\n    }\n  }\n  ...", "241String Arguments\n  private class StringArgumentMarshaler implements ArgumentMarshaler {\n    private String stringValue = \"\";\n    public void set(Iterator<String> currentArgument) throws ArgsException {\n      try {        stringValue = currentArgument.next();      } catch (NoSuchElementException e) {        errorCode = ArgsException.ErrorCode.MISSING_STRING;\n        throw new ArgsException();\n      }    }\n    public Object get() {\n      return stringValue;\n    }  }\n  private class IntegerArgumentMarshaler implements ArgumentMarshaler {\n    private int intValue = 0;\n    public void set(Iterator<String> currentArgument) throws ArgsException {\n      String parameter = null;      try {\n        parameter = currentArgument.next();\n        intValue = Integer.parseInt(parameter);      } catch (NoSuchElementException e) {        errorCode = ArgsException.ErrorCode.MISSING_INTEGER;        throw new ArgsException();\n      } catch (NumberFormatException e) {\n        errorParameter = parameter;        errorCode = ArgsException.ErrorCode.INVALID_INTEGER;\n        throw new ArgsException();\n      }\n    }\n    public Object get() {\n      return intValue;    }\n  }\n  private class DoubleArgumentMarshaler implements ArgumentMarshaler {\n    private double doubleValue = 0;\n    public void set(Iterator<String> currentArgument) throws ArgsException {\n      String parameter = null;      try {        parameter = currentArgument.next();        doubleValue = Double.parseDouble(parameter);\n      } catch (NoSuchElementException e) {\n        errorCode = ArgsException.ErrorCode.MISSING_DOUBLE;\n        throw new ArgsException();      } catch (NumberFormatException e) {        errorParameter = parameter;\n        errorCode = ArgsException.ErrorCode.INVALID_DOUBLE;\n        throw new ArgsException();      }    }", "242 Chapter 14: Successive Re\ufb01nement\n    public Object get() {\n      return doubleValue;    }\n  }\n}\nThis is nice. Now the only exception thrown by Args is ArgsException. Moving\nArgsException into its own module means that we can move a lot of the miscellaneous\nerror support code into that module and out of the Args module. It provides a natural and\nobvious place to put all that code and will really help us clean up the Args module going\nforward.\nSo now we have completely separated the exception and error code from the Args\nmodule. (See Listing 14-13 through Listing 14-16.) This was achieved through a series of\nabout 30 tiny steps, keeping the tests passing between each step. \nListing 14-13 \nArgsTest.java\npackage com.objectmentor.utilities.args;\nimport junit.framework.TestCase;\npublic class ArgsTest extends TestCase {\n  public void testCreateWithNoSchemaOrArguments() throws Exception {    Args args = new Args(\"\", new String[0]);    assertEquals(0, args.cardinality());\n  }\n  public void testWithNoSchemaButWithOneArgument() throws Exception {\n    try {      new Args(\"\", new String[]{\"-x\"});\n      fail();\n    } catch (ArgsException e) {      assertEquals(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT,                    e.getErrorCode());\n      assertEquals('x', e.getErrorArgumentId());\n    }  }\n  public void testWithNoSchemaButWithMultipleArguments() throws Exception {\n    try {\n      new Args(\"\", new String[]{\"-x\", \"-y\"});      fail();    } catch (ArgsException e) {      assertEquals(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT, \n                   e.getErrorCode());\n      assertEquals('x', e.getErrorArgumentId());    }\n  }\n  public void testNonLetterSchema() throws Exception {\n    try {      new Args(\"*\", new String[]{});      fail(\"Args constructor should have thrown exception\");\n    } catch (ArgsException e) {", "243String Arguments\n      assertEquals(ArgsException.ErrorCode.INVALID_ARGUMENT_NAME, \n                   e.getErrorCode());      assertEquals('*', e.getErrorArgumentId());\n    }\n  }\n  public void testInvalidArgumentFormat() throws Exception {\n    try {\n      new Args(\"f~\", new String[]{});\n      fail(\"Args constructor should have throws exception\");    } catch (ArgsException e) {      assertEquals(ArgsException.ErrorCode.INVALID_FORMAT, e.getErrorCode());      assertEquals('f', e.getErrorArgumentId());    }\n  }\n  public void testSimpleBooleanPresent() throws Exception {\n    Args args = new Args(\"x\", new String[]{\"-x\"});\n    assertEquals(1, args.cardinality());\n    assertEquals(true, args.getBoolean('x'));  }\n  public void testSimpleStringPresent() throws Exception {\n    Args args = new Args(\"x*\", new String[]{\"-x\", \"param\"});\n    assertEquals(1, args.cardinality());    assertTrue(args.has('x'));    assertEquals(\"param\", args.getString('x'));  }\n  public void testMissingStringArgument() throws Exception {\n    try {      new Args(\"x*\", new String[]{\"-x\"});      fail();\n    } catch (ArgsException e) {\n      assertEquals(ArgsException.ErrorCode.MISSING_STRING, e.getErrorCode());      assertEquals('x', e.getErrorArgumentId());    }\n  }\n  public void testSpacesInFormat() throws Exception {\n    Args args = new Args(\"x, y\", new String[]{\"-xy\"});    assertEquals(2, args.cardinality());\n    assertTrue(args.has('x'));\n    assertTrue(args.has('y'));  }\n  public void testSimpleIntPresent() throws Exception {\n    Args args = new Args(\"x#\", new String[]{\"-x\", \"42\"});\n    assertEquals(1, args.cardinality());    assertTrue(args.has('x'));    assertEquals(42, args.getInt('x'));  }\n  public void testInvalidInteger() throws Exception {\n    try {      new Args(\"x#\", new String[]{\"-x\", \"Forty two\"});\nListing 14-13 (continued)\nArgsTest.java", "244 Chapter 14: Successive Re\ufb01nement\n      fail();\n    } catch (ArgsException e) {      assertEquals(ArgsException.ErrorCode.INVALID_INTEGER, e.getErrorCode());\n      assertEquals('x', e.getErrorArgumentId());\n      assertEquals(\"Forty two\", e.getErrorParameter());    }\n  }\n  public void testMissingInteger() throws Exception {\n    try {      new Args(\"x#\", new String[]{\"-x\"});      fail();\n    } catch (ArgsException e) {\n      assertEquals(ArgsException.ErrorCode.MISSING_INTEGER, e.getErrorCode());      assertEquals('x', e.getErrorArgumentId());    }  }\n  public void testSimpleDoublePresent() throws Exception {\n    Args args = new Args(\"x##\", new String[]{\"-x\", \"42.3\"});    assertEquals(1, args.cardinality());    assertTrue(args.has('x'));\n    assertEquals(42.3, args.getDouble('x'), .001);\n  }\n  public void testInvalidDouble() throws Exception {\n    try {\n      new Args(\"x##\", new String[]{\"-x\", \"Forty two\"});\n      fail();    } catch (ArgsException e) {      assertEquals(ArgsException.ErrorCode.INVALID_DOUBLE, e.getErrorCode());\n      assertEquals('x', e.getErrorArgumentId());\n      assertEquals(\"Forty two\", e.getErrorParameter());    }  }\n  public void testMissingDouble() throws Exception {\n    try {      new Args(\"x##\", new String[]{\"-x\"});      fail();    } catch (ArgsException e) {\n      assertEquals(ArgsException.ErrorCode.MISSING_DOUBLE, e.getErrorCode());\n      assertEquals('x', e.getErrorArgumentId());    }  }}\nListing 14-14 \nArgsExceptionTest.java\npublic class ArgsExceptionTest extends TestCase {\n  public void testUnexpectedMessage() throws Exception {    ArgsException e = \nListing 14-13 (continued)\nArgsTest.java", "245String Arguments\n      new ArgsException(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT, \n                        'x', null);    assertEquals(\"Argument -x unexpected.\", e.errorMessage());\n  }\n  public void testMissingStringMessage() throws Exception {\nArgsException e = new ArgsException(ArgsException.ErrorCode.MISSING_STRING, \n                                        'x', null);\n    assertEquals(\"Could not find string parameter for -x.\", e.errorMessage());\n  }\n  public void testInvalidIntegerMessage() throws Exception {\n    ArgsException e = \n      new ArgsException(ArgsException.ErrorCode.INVALID_INTEGER, \n                        'x', \"Forty two\");    assertEquals(\"Argument -x expects an integer but was 'Forty two'.\",                  e.errorMessage());  }\n  public void testMissingIntegerMessage() throws Exception {\n    ArgsException e =       new ArgsException(ArgsException.ErrorCode.MISSING_INTEGER, 'x', null);    assertEquals(\"Could not find integer parameter for -x.\", e.errorMessage());\n  }\n  public void testInvalidDoubleMessage() throws Exception {\nArgsException e = new ArgsException(ArgsException.ErrorCode.INVALID_DOUBLE, \n                                        'x', \"Forty two\");\n    assertEquals(\"Argument -x expects a double but was 'Forty two'.\", \n                 e.errorMessage());  }\n  public void testMissingDoubleMessage() throws Exception {\nArgsException e = new ArgsException(ArgsException.ErrorCode.MISSING_DOUBLE, \n                                        'x', null);    assertEquals(\"Could not find double parameter for -x.\", e.errorMessage());  }\n}\nListing 14-15 \nArgsException.java\npublic class ArgsException extends Exception {\n  private char errorArgumentId = '\\0';  private String errorParameter = \"TILT\";\n  private ErrorCode errorCode = ErrorCode.OK;\n  public ArgsException() {}\n  public ArgsException(String message) {super(message);}\n  public ArgsException(ErrorCode errorCode) {\n    this.errorCode = errorCode;  }\nListing 14-14 (continued)\nArgsExceptionTest.java", "246 Chapter 14: Successive Re\ufb01nement\n  public ArgsException(ErrorCode errorCode, String errorParameter) {\n    this.errorCode = errorCode;    this.errorParameter = errorParameter;\n  }\n  public ArgsException(ErrorCode errorCode, char errorArgumentId, \n                       String errorParameter) {    this.errorCode = errorCode;\n    this.errorParameter = errorParameter;\n    this.errorArgumentId = errorArgumentId;  }\n  public char getErrorArgumentId() {\n    return errorArgumentId;\n  }\n  public void setErrorArgumentId(char errorArgumentId) {\n    this.errorArgumentId = errorArgumentId;\n  }\n  public String getErrorParameter() {\n    return errorParameter;  }\n  public void setErrorParameter(String errorParameter) {\n    this.errorParameter = errorParameter;  }\n  public ErrorCode getErrorCode() {\n    return errorCode;  }\n  public void setErrorCode(ErrorCode errorCode) {\n    this.errorCode = errorCode;\n  }\n  public String errorMessage() throws Exception {\n    switch (errorCode) {\n      case OK:\n        throw new Exception(\"TILT: Should not get here.\");      case UNEXPECTED_ARGUMENT:        return String.format(\"Argument -%c unexpected.\", errorArgumentId);\n      case MISSING_STRING:\n        return String.format(\"Could not find string parameter for -%c.\",                              errorArgumentId);      case INVALID_INTEGER:        return String.format(\"Argument -%c expects an integer but was '%s'.\", \n                             errorArgumentId, errorParameter);\n      case MISSING_INTEGER:        return String.format(\"Could not find integer parameter for -%c.\",                              errorArgumentId);      case INVALID_DOUBLE:        return String.format(\"Argument -%c expects a double but was '%s'.\", \n                             errorArgumentId, errorParameter);\nListing 14-15 (continued)\nArgsException.java", "247String Arguments\n      case MISSING_DOUBLE:\n        return String.format(\"Could not find double parameter for -%c.\",                              errorArgumentId);\n    }\n    return \"\";  }\n  public enum ErrorCode {\n    OK, INVALID_FORMAT, UNEXPECTED_ARGUMENT, INVALID_ARGUMENT_NAME,\n    MISSING_STRING,    MISSING_INTEGER, INVALID_INTEGER,    MISSING_DOUBLE, INVALID_DOUBLE}}\nListing 14-16 \nArgs.java\npublic class Args {\n  private String schema;  private Map<Character, ArgumentMarshaler> marshalers = \n    new HashMap<Character, ArgumentMarshaler>();\n  private Set<Character> argsFound = new HashSet<Character>();  private Iterator<String> currentArgument;  private List<String> argsList;\n  public Args(String schema, String[] args) throws ArgsException {\n    this.schema = schema;    argsList = Arrays.asList(args);    parse();\n  }\n  private void parse() throws ArgsException {\n    parseSchema();    parseArguments();\n  }\n  private boolean parseSchema() throws ArgsException {\n    for (String element : schema.split(\",\")) {\n      if (element.length() > 0) {        parseSchemaElement(element.trim());      }    }\n    return true;\n  }\n  private void parseSchemaElement(String element) throws ArgsException {\n    char elementId = element.charAt(0);\n    String elementTail = element.substring(1);\n    validateSchemaElementId(elementId);    if (elementTail.length() == 0)      marshalers.put(elementId, new BooleanArgumentMarshaler());    else if (elementTail.equals(\"*\"))\n      marshalers.put(elementId, new StringArgumentMarshaler());\nListing 14-15 (continued)\nArgsException.java", "248 Chapter 14: Successive Re\ufb01nement\n    else if (elementTail.equals(\"#\"))\n      marshalers.put(elementId, new IntegerArgumentMarshaler());    else if (elementTail.equals(\"##\"))\n      marshalers.put(elementId, new DoubleArgumentMarshaler());\n    else      throw new ArgsException(ArgsException.ErrorCode.INVALID_FORMAT,                               elementId, elementTail);  }\n  private void validateSchemaElementId(char elementId) throws ArgsException {\n    if (!Character.isLetter(elementId)) {      throw new ArgsException(ArgsException.ErrorCode.INVALID_ARGUMENT_NAME,                               elementId, null);    }\n  }\n  private void parseArguments() throws ArgsException {\n    for (currentArgument = argsList.iterator(); currentArgument.hasNext();) {\n      String arg = currentArgument.next();\n      parseArgument(arg);    }  }\n  private void parseArgument(String arg) throws ArgsException {\n    if (arg.startsWith(\"-\"))      parseElements(arg);  }\n  private void parseElements(String arg) throws ArgsException {\n    for (int i = 1; i < arg.length(); i++)      parseElement(arg.charAt(i));  }\n  private void parseElement(char argChar) throws ArgsException {\n    if (setArgument(argChar))      argsFound.add(argChar);    else {      throw new ArgsException(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT, \n                              argChar, null);\n    }  }\n  private boolean setArgument(char argChar) throws ArgsException {\n    ArgumentMarshaler m = marshalers.get(argChar);    if (m == null)      return false;    try {\n      m.set(currentArgument);\n      return true;    } catch (ArgsException e) {      e.setErrorArgumentId(argChar);      throw e;    }\n  }\nListing 14-16 (continued)\nArgs.java", "249String Arguments\n  public int cardinality() {\n    return argsFound.size();  }\n  public String usage() {\n    if (schema.length() > 0)      return \"-[\" + schema + \"]\";    else\n      return \"\";\n  }\n  public boolean getBoolean(char arg) {\n    ArgumentMarshaler am = marshalers.get(arg);\n    boolean b = false;\n    try {      b = am != null && (Boolean) am.get();    } catch (ClassCastException e) {      b = false;\n    }\n    return b;  }\n  public String getString(char arg) {\n    ArgumentMarshaler am = marshalers.get(arg);    try {      return am == null ? \"\" : (String) am.get();    } catch (ClassCastException e) {\n      return \"\";\n    }  }\n  public int getInt(char arg) {\n    ArgumentMarshaler am = marshalers.get(arg);\n    try {      return am == null ? 0 : (Integer) am.get();    } catch (Exception e) {      return 0;\n    }\n  }\n  public double getDouble(char arg) {\n    ArgumentMarshaler am = marshalers.get(arg);    try {      return am == null ? 0 : (Double) am.get();    } catch (Exception e) {\n      return 0.0;\n    }  }\n  public boolean has(char arg) {\n    return argsFound.contains(arg);\n  }}\nListing 14-16 (continued)\nArgs.java", "250 Chapter 14: Successive Re\ufb01nement\nThe majority of the changes to the Args class were deletions. A lot of code just got\nmoved out of Args and put into ArgsException. Nice. We also moved all the\nArgumentMarshallers into their own \ufb01les. Nicer!\nMuch of good software design is simply about partitioning\u2014creating appropriate\nplaces to put different kinds of code. This separation of concerns makes the code much\nsimpler to understand and maintain.\nOf special interest is the errorMessage method of ArgsException. Clearly it was a vio-\nlation of the SRP to put the error message formatting into Args. Args should be about the\nprocessing of arguments, not about the format of the error messages. However, does it\nreally make sense to put the error message formatting code into ArgsException?\nFrankly, it\u2019s a compromise. Users who don\u2019t like the error messages supplied by\nArgsException will have to write their own. But the convenience of having canned error\nmessages already prepared for you is not insigni\ufb01cant.\nBy now it should be clear that we are within striking distance of the \ufb01nal solution that\nappeared at the start of this chapter. I\u2019ll leave the \ufb01nal transformations to you as an exercise. \n Conclusion\nIt is not enough for code to work. Code that works is often badly broken. Programmers\nwho satisfy themselves with merely working code are behaving unprofessionally. They\nmay fear that they don\u2019t have time to improve the structure and design of their code, but I\ndisagree. Nothing has a more profound and long-term degrading effect upon a develop-\nment project than bad code. Bad schedules can be redone, bad requirements can be rede-\n\ufb01ned. Bad team dynamics can be repaired. But bad code rots and ferments, becoming an\ninexorable weight that drags the team down. Time and time again I have seen teams grind\nto a crawl because, in their haste, they created a malignant morass of code that forever\nthereafter dominated their destiny.\nOf course bad code can be cleaned up. But it\u2019s very expensive. As code rots, the mod-\nules insinuate themselves into each other, creating lots of hidden and tangled dependen-\ncies. Finding and breaking old dependencies is a long and arduous task. On the other hand,\nkeeping code clean is relatively easy. If you made a mess in a module in the morning, it is\neasy to clean it up in the afternoon. Better yet, if you made a mess \ufb01ve minutes ago, it\u2019s\nvery easy to clean it up right now.\nSo the solution is to continuously keep your code as clean and simple as it can be.\nNever let the rot get started.", "251\n15\nJUnit Internals\nJUnit is one of the most famous of all Java frameworks. As frameworks go, it is simple in\nconception, precise in de\ufb01nition, and elegant in implementation. But what does the code\nlook like? In this chapter we\u2019ll critique an example drawn from the JUnit framework.", "252 Chapter 15: JUnit Internals\nThe JUnit Framework\nJUnit has had many authors, but it began with Kent Beck and Eric Gamma together on a\nplane to Atlanta. Kent wanted to learn Java, and Eric wanted to learn about Kent\u2019 s Small-\ntalk testing framework. \u201cWhat could be more natural to a couple of geeks in cramped\nquarters than to pull out our laptops and start coding?\u201d1 After three hours of high-altitude\nwork, they had written the basics of JUnit.\nThe module we\u2019ll look at is the clever bit of code that helps identify string compari-\nson errors. This module is called ComparisonCompactor. Given two strings that differ,\nsuch as ABCDE and ABXDE, it will expose the difference by generating a string such as\n<...B[X]D...>.\nI could explain it further, but the test cases do a better job. So take a look at Listing 15-1\nand you will understand the requirements of this module in depth. While you are at it,\ncritique the structure of the tests. Could they be simpler or more obvious?\n1. JUnit Pocket Guide, Kent Beck, O\u2019Reilly, 2004, p. 43.\nListing 15-1 \nComparisonCompactorTest.java\npackage junit.tests.framework;\nimport junit.framework.ComparisonCompactor;\nimport junit.framework.TestCase;\npublic class ComparisonCompactorTest extends TestCase {\npublic void testMessage() {\nString failure= new ComparisonCompactor(0, \"b\", \"c\").compact(\"a\");assertTrue(\"a expected:<[b]> but was:<[c]>\".equals(failure));\n}\npublic void testStartSame() {\nString failure= new ComparisonCompactor(1, \"ba\", \"bc\").compact(null);assertEquals(\"expected:<b[a]> but was:<b[c]>\", failure);\n}\npublic void testEndSame() {\nString  failure= new ComparisonCompactor(1, \"ab\", \"cb\").compact(null);assertEquals(\"expected:<[a]b> but was:<[c]b>\", failure);\n}\npublic void testSame() {\nString failure= new ComparisonCompactor(1, \"ab\", \"ab\").compact(null);assertEquals(\"expected:<ab> but was:<ab>\", failure);\n}\npublic void testNoContextStartAndEndSame() {\nString failure= new ComparisonCompactor(0, \"abc\", \"adc\").compact(null);assertEquals(\"expected:<...[b]...> but was:<...[d]...>\", failure);\n}", "253The JUnit Framework\npublic void testStartAndEndContext() {\nString failure= new ComparisonCompactor(1, \"abc\", \"adc\").compact(null);assertEquals(\"expected:<a[b]c> but was:<a[d]c>\", failure);\n}\npublic void testStartAndEndContextWithEllipses() {\nString failure= \n       new ComparisonCompactor(1, \"abcde\", \"abfde\").compact(null);\nassertEquals(\"expected:<...b[c]d...> but was:<...b[f]d...>\", failure);\n}\npublic void testComparisonErrorStartSameComplete() {\nString failure= new ComparisonCompactor(2, \"ab\", \"abc\").compact(null);\nassertEquals(\"expected:<ab[]> but was:<ab[c]>\", failure);\n}\npublic void testComparisonErrorEndSameComplete() {\nString failure= new ComparisonCompactor(0, \"bc\", \"abc\").compact(null);\nassertEquals(\"expected:<[]...> but was:<[a]...>\", failure);\n}\npublic void testComparisonErrorEndSameCompleteContext() {\nString failure= new ComparisonCompactor(2, \"bc\", \"abc\").compact(null);\nassertEquals(\"expected:<[]bc> but was:<[a]bc>\", failure);\n}\npublic void testComparisonErrorOverlapingMatches() {\nString failure= new ComparisonCompactor(0, \"abc\", \"abbc\").compact(null);\nassertEquals(\"expected:<...[]...> but was:<...[b]...>\", failure);\n}\npublic void testComparisonErrorOverlapingMatchesContext() {\nString failure= new ComparisonCompactor(2, \"abc\", \"abbc\").compact(null);\nassertEquals(\"expected:<ab[]c> but was:<ab[b]c>\", failure);\n}\npublic void testComparisonErrorOverlapingMatches2() {\nString failure= new ComparisonCompactor(0, \"abcdde\", \n\"abcde\").compact(null);\nassertEquals(\"expected:<...[d]...> but was:<...[]...>\", failure);\n}\npublic void testComparisonErrorOverlapingMatches2Context() {\nString failure= \n       new ComparisonCompactor(2, \"abcdde\", \"abcde\").compact(null);\nassertEquals(\"expected:<...cd[d]e> but was:<...cd[]e>\", failure);\n}\npublic void testComparisonErrorWithActualNull() {\nString failure= new ComparisonCompactor(0, \"a\", null).compact(null);assertEquals(\"expected:<a> but was:<null>\", failure);\n}\npublic void testComparisonErrorWithActualNullContext() {\nString failure= new ComparisonCompactor(2, \"a\", null).compact(null);\nListing 15-1 (continued)\nComparisonCompactorTest.java", "254 Chapter 15: JUnit Internals\nI ran a code coverage analysis on the ComparisonCompactor using these tests. The code\nis 100 percent covered. Every line of code, every if statement and for loop, is executed by\nthe tests. This gives me a high degree of con\ufb01dence that the code works and a high degree\nof respect for the craftsmanship of the authors.\nThe code for ComparisonCompactor is in Listing 15-2. Take a moment to look over this\ncode. I think you\u2019ll \ufb01nd it to be nicely partitioned, reasonably expressive, and simple in\nstructure. Once you are done, then we\u2019ll pick the nits together.\nassertEquals(\"expected:<a> but was:<null>\", failure);\n}\npublic void testComparisonErrorWithExpectedNull() {\nString failure= new ComparisonCompactor(0, null, \"a\").compact(null);assertEquals(\"expected:<null> but was:<a>\", failure);\n}\npublic void testComparisonErrorWithExpectedNullContext() {\nString failure= new ComparisonCompactor(2, null, \"a\").compact(null);assertEquals(\"expected:<null> but was:<a>\", failure);\n}\npublic void testBug609972() {\nString failure= new ComparisonCompactor(10, \"S&P500\", \"0\").compact(null);assertEquals(\"expected:<[S&P50]0> but was:<[]0>\", failure);\n}\n}\nListing 15-2 \nComparisonCompactor.java (Original)\npackage junit.framework;\npublic class ComparisonCompactor {\n  private static final String ELLIPSIS = \"...\";\n  private static final String DELTA_END = \"]\";  private static final String DELTA_START = \"[\";\n  private int fContextLength;\n  private String fExpected;  private String fActual;  private int fPrefix;  private int fSuffix;\n  public ComparisonCompactor(int contextLength, \n                             String expected,                                String actual) {    fContextLength = contextLength;\n    fExpected = expected;\n    fActual = actual;  }\nListing 15-1 (continued)\nComparisonCompactorTest.java", "255The JUnit Framework\n  public String compact(String message) {\n    if (fExpected == null || fActual == null || areStringsEqual())      return Assert.format(message, fExpected, fActual);\n    findCommonPrefix();\n    findCommonSuffix();    String expected = compactString(fExpected);    String actual = compactString(fActual);\n    return Assert.format(message, expected, actual);\n  }\n  private String compactString(String source) {\n    String result = DELTA_START + \n                      source.substring(fPrefix, source.length() -\n                        fSuffix + 1) + DELTA_END;    if (fPrefix > 0)      result = computeCommonPrefix() + result;    if (fSuffix > 0)\n      result = result + computeCommonSuffix();\n    return result;  }\n  private void findCommonPrefix() {\n    fPrefix = 0;    int end = Math.min(fExpected.length(), fActual.length());    for (; fPrefix < end; fPrefix++) {      if (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix))\n        break;\n    }  }\n  private void findCommonSuffix() {\n    int expectedSuffix = fExpected.length() - 1;\n    int actualSuffix = fActual.length() - 1;    for (;          actualSuffix >= fPrefix && expectedSuffix >= fPrefix;           actualSuffix--, expectedSuffix--) {\n      if (fExpected.charAt(expectedSuffix) != fActual.charAt(actualSuffix))\n        break;    }    fSuffix = fExpected.length() - expectedSuffix;\n  }\n  private String computeCommonPrefix() {\n    return (fPrefix > fContextLength ? ELLIPSIS : \"\") +              fExpected.substring(Math.max(0, fPrefix - fContextLength), \n                                    fPrefix);\n  }\n  private String computeCommonSuffix() {\n    int end = Math.min(fExpected.length() - fSuffix + 1 + fContextLength, \n                         fExpected.length());\n    return fExpected.substring(fExpected.length() - fSuffix + 1, end) +            (fExpected.length() - fSuffix + 1 < fExpected.length() -             fContextLength ? ELLIPSIS : \"\");  }\nListing 15-2 (continued)\nComparisonCompactor.java (Original)", "256 Chapter 15: JUnit Internals\nY ou might have a few complaints about this module. There are some long expressions\nand some strange +1s and so forth. But overall this module is pretty good. After all, it\nmight have looked like Listing 15-3. \n  private boolean areStringsEqual() {\n    return fExpected.equals(fActual);  }\n}\nListing 15-3 \nComparisonCompator.java (defactored)\npackage junit.framework;\npublic class ComparisonCompactor {\n  private int ctxt;\n  private String s1;  private String s2;  private int pfx;  private int sfx;\n  public ComparisonCompactor(int ctxt, String s1, String s2) {\n    this.ctxt = ctxt;    this.s1 = s1;\n    this.s2 = s2;\n  }\n  public String compact(String msg) {\n    if (s1 == null || s2 == null || s1.equals(s2))\n      return Assert.format(msg, s1, s2);\n    pfx = 0;\n    for (; pfx < Math.min(s1.length(), s2.length()); pfx++) {      if (s1.charAt(pfx) != s2.charAt(pfx))\n        break;\n    }    int sfx1 = s1.length() - 1;    int sfx2 = s2.length() - 1;    for (; sfx2 >= pfx && sfx1 >= pfx; sfx2--, sfx1--) {\n      if (s1.charAt(sfx1) != s2.charAt(sfx2))\n        break;    }    sfx = s1.length() - sfx1;    String cmp1 = compactString(s1);\n    String cmp2 = compactString(s2);\n    return Assert.format(msg, cmp1, cmp2);  }\n  private String compactString(String s) {\n    String result =\n      \"[\" + s.substring(pfx, s.length() - sfx + 1) + \"]\";    if (pfx > 0)      result = (pfx > ctxt ? \"...\" : \"\") +        s1.substring(Math.max(0, pfx - ctxt), pfx) + result;\nListing 15-2 (continued)\nComparisonCompactor.java (Original)", "257The JUnit Framework\nEven though the authors left this module in very good shape, the Boy Scout Rule2 tells\nus we should leave it cleaner than we found it. So, how can we improve on the original\ncode in Listing 15-2? \nThe \ufb01rst thing I don\u2019t care for is the f pre\ufb01x for the member variables [N6]. Today\u2019 s\nenvironments make this kind of scope encoding redundant. So let\u2019 s eliminate all the f\u2019s .\n  private int contextLength;\n  private String expected;  private String actual;\n  private int prefix;\n  private int suffix;\nNext, we have an unencapsulated conditional at the beginning of the compact function\n[G28].\n  public String compact(String message) {\nif (expected == null || actual == null || areStringsEqual())\n      return Assert.format(message, expected, actual);\n    findCommonPrefix();\n    findCommonSuffix();\n    String expected = compactString(this.expected);    String actual = compactString(this.actual);    return Assert.format(message, expected, actual);   }\nThis conditional should be encapsulated to make our intent clear. So let\u2019 s extract a method\nthat explains it.\n  public String compact(String message) {\n    if (shouldNotCompact())\n      return Assert.format(message, expected, actual);\n    findCommonPrefix();\n    findCommonSuffix();    String expected = compactString(this.expected);    String actual = compactString(this.actual);    return Assert.format(message, expected, actual);\n  }\n    if (sfx > 0) {\n      int end = Math.min(s1.length() - sfx + 1 + ctxt, s1.length());      result = result + (s1.substring(s1.length() - sfx + 1, end) +        (s1.length() - sfx + 1 < s1.length() - ctxt ? \"...\" : \"\"));    }    return result;\n  }\n}\n2. See \u201cThe Boy Scout Rule\u201d on page 14.\nListing 15-3 (continued)\nComparisonCompator.java (defactored)", "258 Chapter 15: JUnit Internals\nprivate boolean shouldNotCompact() {\nreturn expected == null || actual == null || areStringsEqual();\n  }\nI don\u2019t much care for the this.expected and this.actual notation in the compact func-\ntion. This happened when we changed the name of fExpected to expected. Why are there\nvariables in this function that have the same names as the member variables? Don\u2019t they\nrepresent something else [N4]? We should make the names unambiguous.\n    String compactExpected = compactString(expected);\n    String compactActual = compactString(actual);\nNegatives are slightly harder to understand than positives [G29]. So let\u2019 s turn that if\nstatement on its head and invert the sense of the conditional.\n  public String compact(String message) {\n    if (canBeCompacted()) {\n      findCommonPrefix();      findCommonSuffix();\n      String compactExpected = compactString(expected);\n      String compactActual = compactString(actual);\nreturn Assert.format(message, compactExpected, compactActual);\n    } else {      return Assert.format(message, expected, actual);\n    }\n  }\n  private boolean canBeCompacted() {\nreturn expected != null && actual != null && !areStringsEqual();\n  }\nThe name of the function is strange [N7]. Although it does compact the strings, it\nactually might not compact the strings if canBeCompacted returns false. So naming this\nfunction compact hides the side effect of the error check. Notice also that the function\nreturns a formatted message, not just the compacted strings. So the name of the function\nshould really be formatCompactedComparison. That makes it read a lot better when taken\nwith the function argument:\n  public String formatCompactedComparison(String message) {\nThe body of the if statement is where the true compacting of the expected and actual\nstrings is done. We should extract that as a method named compactExpectedAndActual. How-\never, we want the formatCompactedComparison function to do all the formatting. The\ncompact... function should do nothing but compacting [G30]. So let\u2019 s split it up as follows:\n...\n  private String compactExpected;  private String compactActual;\n...\n  public String formatCompactedComparison(String message) {\n    if (canBeCompacted()) {\n      compactExpectedAndActual();\n      return Assert.format(message, compactExpected, compactActual);    } else {", "259The JUnit Framework\n      return Assert.format(message, expected, actual);\n    }  }\n  private void compactExpectedAndActual() {\n    findCommonPrefix();    findCommonSuffix();\n    compactExpected = compactString(expected);\n    compactActual = compactString(actual);  }\nNotice that this required us to promote compactExpected and compactActual to member\nvariables. I don\u2019t like the way that the last two lines of the new function return variables,\nbut the \ufb01rst two don\u2019t. They aren\u2019t using consistent conventions [G11]. So we should\nchangefindCommonPrefix and findCommonSuffix to return the pre\ufb01x and suf\ufb01x values.\n  private void compactExpectedAndActual() {\nprefixIndex = findCommonPrefix();\nsuffixIndex = findCommonSuffix();\n    compactExpected = compactString(expected);    compactActual = compactString(actual);\n  }\n  private int findCommonPrefix() {\nint prefixIndex = 0;\n    int end = Math.min(expected.length(), actual.length());\n    for (; prefixIndex < end; prefixIndex++) {\n      if (expected.charAt(prefixIndex) != actual.charAt(prefixIndex))\n        break;    }\n    return prefixIndex;\n  }\n  private int findCommonSuffix() {\n    int expectedSuffix = expected.length() - 1;\n    int actualSuffix = actual.length() - 1;\n    for (; actualSuffix >= prefixIndex && expectedSuffix >= prefixIndex;\n         actualSuffix--, expectedSuffix--) {      if (expected.charAt(expectedSuffix) != actual.charAt(actualSuffix))        break;\n    }\nreturn expected.length() - expectedSuffix;\n  }\nWe should also change the names of the member variables to be a little more accurate\n[N1]; after all, they are both indices. \nCareful inspection of findCommonSuffix exposes a hidden temporal coupling [G31]; it\ndepends on the fact that prefixIndex is calculated by findCommonPrefix. If these two func-\ntions were called out of order, there would be a dif\ufb01cult debugging session ahead. So, to\nexpose this temporal coupling, let\u2019 s have findCommonSuffix take the prefixIndex as an\nargument.\n  private void compactExpectedAndActual() {\n    prefixIndex = findCommonPrefix();    suffixIndex = findCommonSuffix(prefixIndex);", "260 Chapter 15: JUnit Internals\n    compactExpected = compactString(expected);\n    compactActual = compactString(actual);  }\n  private int findCommonSuffix(int prefixIndex) {\n    int expectedSuffix = expected.length() - 1;    int actualSuffix = actual.length() - 1;    for (; actualSuffix >= prefixIndex && expectedSuffix >= prefixIndex; \n         actualSuffix--, expectedSuffix--) {\n      if (expected.charAt(expectedSuffix) != actual.charAt(actualSuffix))        break;    }    return expected.length() - expectedSuffix;  }\nI\u2019m not really happy with this. The passing of the prefixIndex argument is a bit arbitrary\n[G32]. It works to establish the ordering but does nothing to explain the need for that\nordering. Another programmer might undo what we have done because there\u2019 s no indica-\ntion that the parameter is really needed. So let\u2019 s take a different tack.\n  private void compactExpectedAndActual() {\nfindCommonPrefixAndSuffix();\n    compactExpected = compactString(expected);\n    compactActual = compactString(actual);\n  }\n  private void findCommonPrefixAndSuffix() {\nfindCommonPrefix();\n    int expectedSuffix = expected.length() - 1;\n    int actualSuffix = actual.length() - 1;    for (;         actualSuffix >= prefixIndex && expectedSuffix >= prefixIndex;\n         actualSuffix--, expectedSuffix--\n      ) {      if (expected.charAt(expectedSuffix) != actual.charAt(actualSuffix))        break;    }\n    suffixIndex = expected.length() - expectedSuffix;\n  }\n  private void findCommonPrefix() {\n    prefixIndex = 0;\n    int end = Math.min(expected.length(), actual.length());\n    for (; prefixIndex < end; prefixIndex++)      if (expected.charAt(prefixIndex) != actual.charAt(prefixIndex))        break;  }\nWe put findCommonPrefix and findCommonSuffix back the way they were, changing the\nname of findCommonSuffix to findCommonPrefixAndSuffix and having it call findCommon-\nPrefix before doing anything else. That establishes the temporal nature of the two func-\ntions in a much more dramatic way than the previous solution. It also points out how ugly\nfindCommonPrefixAndSuffix is. Let\u2019 s clean it up now.\n  private void findCommonPrefixAndSuffix() {\n    findCommonPrefix();    int suffixLength = 1;", "261The JUnit Framework\nfor (; !suffixOverlapsPrefix(suffixLength); suffixLength++) {\n      if (charFromEnd(expected, suffixLength) !=            charFromEnd(actual, suffixLength))\n        break;\n    }    suffixIndex = suffixLength;  }\n  private char charFromEnd(String s, int i) {\n    return s.charAt(s.length()-i);}\n  private boolean suffixOverlapsPrefix(int suffixLength) {\n    return actual.length() - suffixLength < prefixLength ||\n      expected.length() - suffixLength < prefixLength;\n  }\nThis is much better. It exposes that the suffixIndex is really the length of the suf\ufb01x\nand is not well named. The same is true of the prefixIndex, though in that case \u201cindex\u201d and\n\u201clength\u201d are synonymous. Even so, it is more consistent to use \u201clength.\u201d The problem is\nthat the suffixIndex variable is not zero based; it is 1 based and so is not a true length. This\nis also the reason that there are all those +1s in computeCommonSuffix[G33]. So let\u2019 s \ufb01x that.\nThe result is in Listing 15-4.\nListing 15-4 \nComparisonCompactor.java (interim)\npublic class ComparisonCompactor {\n...  private int suffixLength;\n...\n  private void findCommonPrefixAndSuffix() {    findCommonPrefix();    suffixLength = 0;    for (; !suffixOverlapsPrefix(suffixLength); suffixLength++) {\n      if (charFromEnd(expected, suffixLength) != \n          charFromEnd(actual, suffixLength))        break;    }\n  }\n  private char charFromEnd(String s, int i) {\n    return s.charAt(s.length() - i - 1);\n  }\n  private boolean suffixOverlapsPrefix(int suffixLength) {\n    return actual.length() - suffixLength <= prefixLength ||\n      expected.length() - suffixLength <= prefixLength;\n  }\n...\n  private String compactString(String source) {    String result =       DELTA_START + \n      source.substring(prefixLength, source.length() - suffixLength) + \n      DELTA_END;    if (prefixLength > 0)      result = computeCommonPrefix() + result;", "262 Chapter 15: JUnit Internals\nWe replaced the +1s in computeCommonSuffix with a -1 in charFromEnd, where it makes\nperfect sense, and two <= operators in suffixOverlapsPrefix, where they also make perfect\nsense. This allowed us to change the name of suffixIndex to suffixLength, greatly enhanc-\ning the readability of the code.\nThere is a problem however. As I was eliminating the +1s, I noticed the following line\nin compactString:\nif (suffixLength > 0)\nTake a look at it in Listing 15-4. By rights, because suffixLength is now one less than it\nused to be, I should change the > operator to a >= operator. But that makes no sense. It\nmakes sense now! This means that it didn\u2019t use to make sense and was probably a bug.\nWell, not quite a bug. Upon further analysis we see that the if statement now prevents a\nzero length suf\ufb01x from being appended. Before we made the change, the if statement was\nnonfunctional because suffixIndex could never be less than one!\nThis calls into question both if statements in compactString! It looks as though they\ncould both be eliminated. So let\u2019 s comment them out and run the tests. They passed! So\nlet\u2019 s restructure compactString to eliminate the extraneous if statements and make the\nfunction much simpler [G9].\nprivate String compactString(String source) {\n    return      computeCommonPrefix() +\n      DELTA_START +\n      source.substring(prefixLength, source.length() - suffixLength) +      DELTA_END +      computeCommonSuffix();  }\nThis is much better! Now we see that the compactString function is simply composing the\nfragments together. We can probably make this even clearer. Indeed, there are lots of little\n    if (suffixLength > 0)\n      result = result + computeCommonSuffix();    return result;\n  }\n...\n  private String computeCommonSuffix() {    int end = Math.min(expected.length() - suffixLength +\n      contextLength, expected.length()\n    );    return       expected.substring(expected.length() - suffixLength, end) +\n      (expected.length() - suffixLength < \n        expected.length() - contextLength ? \n        ELLIPSIS : \"\");\n  }\nListing 15-4 (continued)\nComparisonCompactor.java (interim)", "263The JUnit Framework\ncleanups we could do. But rather than drag you through the rest of the changes, I\u2019ll just\nshow you the result in Listing 15-5. \nListing 15-5 \nComparisonCompactor.java (final)\npackage junit.framework;\npublic class ComparisonCompactor {\n  private static final String ELLIPSIS = \"...\";\n  private static final String DELTA_END = \"]\";  private static final String DELTA_START = \"[\";\n  private int contextLength;\n  private String expected;  private String actual;  private int prefixLength;\n  private int suffixLength;\n  public ComparisonCompactor(\n    int contextLength, String expected, String actual  ) {\n    this.contextLength = contextLength;\n    this.expected = expected;    this.actual = actual;  }\n  public String formatCompactedComparison(String message) {\n    String compactExpected = expected;    String compactActual = actual;    if (shouldBeCompacted()) {      findCommonPrefixAndSuffix();\n      compactExpected = compact(expected);\n      compactActual = compact(actual);    }     return Assert.format(message, compactExpected, compactActual);\n  }\n  private boolean shouldBeCompacted() {\n    return !shouldNotBeCompacted();  }\n  private boolean shouldNotBeCompacted() {\n    return expected == null ||           actual == null ||           expected.equals(actual);\n  }\n  private void findCommonPrefixAndSuffix() {\n    findCommonPrefix();    suffixLength = 0;\n    for (; !suffixOverlapsPrefix(); suffixLength++) {\n      if (charFromEnd(expected, suffixLength) !=          charFromEnd(actual, suffixLength)      )", "264 Chapter 15: JUnit Internals\n        break;\n    }  }\n  private char charFromEnd(String s, int i) {\n    return s.charAt(s.length() - i - 1);  }\n  private boolean suffixOverlapsPrefix() {\n    return actual.length() - suffixLength <= prefixLength ||      expected.length() - suffixLength <= prefixLength;  }\n  private void findCommonPrefix() {\n    prefixLength = 0;    int end = Math.min(expected.length(), actual.length());    for (; prefixLength < end; prefixLength++)      if (expected.charAt(prefixLength) != actual.charAt(prefixLength))\n        break;\n  }\n  private String compact(String s) {\n    return new StringBuilder()\n      .append(startingEllipsis())      .append(startingContext())      .append(DELTA_START)      .append(delta(s))\n      .append(DELTA_END)\n      .append(endingContext())      .append(endingEllipsis())      .toString();  }\n  private String startingEllipsis() {\n    return prefixLength > contextLength ? ELLIPSIS : \"\";  }\n  private String startingContext() {\n    int contextStart = Math.max(0, prefixLength - contextLength);    int contextEnd = prefixLength;    return expected.substring(contextStart, contextEnd);  }\n  private String delta(String s) {\n    int deltaStart = prefixLength;    int deltaEnd = s.length() - suffixLength;    return s.substring(deltaStart, deltaEnd);\n  }\n  private String endingContext() {\n    int contextStart = expected.length() - suffixLength;    int contextEnd =\n      Math.min(contextStart + contextLength, expected.length());\n    return expected.substring(contextStart, contextEnd);  }\nListing 15-5 (continued)\nComparisonCompactor.java (final)", "265Conclusion\nThis is actually quite pretty. The module is separated into a group of analysis func-\ntions and another group of synthesis functions. They are topologically sorted so that the\nde\ufb01nition of each function appears just after it is used. All the analysis functions appear\n\ufb01rst, and all the synthesis functions appear last.\nIf you look carefully, you will notice that I reversed several of the decisions I made\nearlier in this chapter. For example, I inlined some extracted methods back into\nformatCompactedComparison, and I changed the sense of the shouldNotBeCompacted expres-\nsion. This is typical. Often one refactoring leads to another that leads to the undoing of the\n\ufb01rst. Refactoring is an iterative process full of trial and error, inevitably converging on\nsomething that we feel is worthy of a professional.\nConclusion\nAnd so we have satis\ufb01ed the Boy Scout Rule. We have left this module a bit cleaner than\nwe found it. Not that it wasn\u2019t clean already. The authors had done an excellent job with it.\nBut no module is immune from improvement, and each of us has the responsibility to\nleave the code a little better than we found it.\n  private String endingEllipsis() {\n    return (suffixLength > contextLength ? ELLIPSIS : \"\");  }\n}\nListing 15-5 (continued)\nComparisonCompactor.java (final)", "This page intentionally left blank", "267\n16\nRefactoring SerialDate\nIf you go to http://www.jfree.org/jcommon/index.php, you will \ufb01nd the JCommon library.\nDeep within that library there is a package named org.jfree.date. Within that package\nthere is a class named SerialDate. We are going to explore that class.\nThe author of SerialDate is David Gilbert. David is clearly an experienced and com-\npetent programmer. As we shall see, he shows a signi\ufb01cant degree of professionalism and\ndiscipline within his code. For all intents and purposes, this is \u201cgood code.\u201d And I am\ngoing to rip it to pieces.", "268 Chapter 16: Refactoring SerialDate\nThis is not an activity of malice. Nor do I think that I am so much better than David\nthat I somehow have a right to pass judgment on his code. Indeed, if you were to \ufb01nd some\nof my code, I\u2019m sure you could \ufb01nd plenty of things to complain about. \nNo, this is not an activity of nastiness or arrogance. What I am about to do is nothing\nmore and nothing less than a professional review. It is something that we should all be\ncomfortable doing. And it is something we should welcome when it is done for us. It is\nonly through critiques like these that we will learn. Doctors do it. Pilots do it. Lawyers do\nit. And we programmers need to learn how to do it too.\nOne more thing about David Gilbert: David is more than just a good programmer.\nDavid had the courage and good will to offer his code to the community at large for free.\nHe placed it out in the open for all to see and invited public usage and public scrutiny. This\nwas well done!\nSerialDate (Listing B-1, page 349) is a class that represents a date in Java. Why have\na class that represents a date, when Java already has java.util.Date and\njava.util.Calendar, and others? The author wrote this class in response to a pain that I\nhave often felt myself. The comment in his opening Javadoc (line 67) explains it well. We\ncould quibble about his intention, but I have certainly had to deal with this issue, and I\nwelcome a class that is about dates instead of times.\nFirst, Make It Work\nThere are some unit tests in a class named SerialDateTests (Listing B-2, page 366). The\ntests all pass. Unfortunately a quick inspection of the tests shows that they don\u2019t test every-\nthing [T1]. For example, doing a \u201cFind Usages\u201d search on the method MonthCodeToQuarter\n(line 334) indicates that it is not used [F4]. Therefore, the unit tests don\u2019t test it.\nSo I \ufb01red up Clover to see what the unit tests covered and what they didn\u2019t. Clover\nreported that the unit tests executed only 91 of the 185 executable statements in SerialDate\n(~50 percent) [T2]. The coverage map looks like a patchwork quilt, with big gobs of unex-\necuted code littered all through the class. \nIt was my goal to completely understand and also refactor this class. I couldn\u2019t do that\nwithout much greater test coverage. So I wrote my own suite of completely independent\nunit tests (Listing B-4, page 374). \nAs you look through these tests, you will note that many of them are commented out.\nThese tests didn\u2019t pass. They represent behavior that I think SerialDate should have. So as\nI refactor SerialDate, I\u2019ll be working to make these tests pass too.\nEven with some of the tests commented out, Clover reports that the new unit tests are\nexecuting 170 (92 percent) out of the 185 executable statements. This is pretty good, and I\nthink we\u2019ll be able to get this number higher.\nThe \ufb01rst few commented-out tests (lines 23-63) were a bit of conceit on my part. The\nprogram was not designed to pass these tests, but the behavior seemed obvious [G2] to me.", "269First, Make It Work\nI\u2019m not sure why the testWeekdayCodeToString method was written in the \ufb01rst place, but\nbecause it is there, it seems obvious that it should not be case sensitive. Writing these tests\nwas trivial [T3]. Making them pass was even easier; I just changed lines 259 and 263 to\nuseequalsIgnoreCase.\nI left the tests at line 32 and line 45 commented out because it\u2019 s not clear to me that\nthe \u201ctues\u201d and \u201cthurs\u201d abbreviations ought to be supported.\nThe tests on line 153 and line 154 don\u2019t pass. Clearly, they should [G2]. We can easily\n\ufb01x this, and the tests on line 163 through line 213, by making the following changes to the\nstringToMonthCode function.\nThe commented test on line 318 exposes a bug in the getFollowingDayOfWeek method\n(line 672). December 25th, 2004, was a Saturday. The following Saturday was January 1st,\n2005. However, when we run the test, we see that getFollowingDayOfWeek returns Decem-\nber 25th as the Saturday that follows December 25th. Clearly, this is wrong [G3],[T1]. We\nsee the problem in line 685. It is a typical boundary condition error [T5]. It should read as\nfollows:\nIt is interesting to note that this function was the target of an earlier repair. The change\nhistory (line 43) shows that \u201cbugs\u201d were \ufb01xed in getPreviousDayOfWeek, getFollowing-\nDayOfWeek, and getNearestDayOfWeek [T6]. \nThe testGetNearestDayOfWeek unit test (line 329), which tests the getNearestDayOfWeek\nmethod (line 705), did not start out as long and exhaustive as it currently is. I added a lot\nof test cases to it because my initial test cases did not all pass [T6]. Y ou can see the pattern\nof failure by looking at which test cases are commented out. That pattern is revealing [T7].\nIt shows that the algorithm fails if the nearest day is in the future. Clearly there is some\nkind of boundary condition error [T5].\nThe pattern of test coverage reported by Clover is also interesting [T8]. Line 719\nnever gets executed! This means that the if statement in line 718 is always false. Sure\nenough, a look at the code shows that this must be true. The adjust variable is always neg-\native and so cannot be greater or equal to 4. So this algorithm is just wrong.\n 457         if ((result < 1) || (result > 12)) {\n                 result = -1; 458             for (int i = 0; i < monthNames.length; i++) {\n 459                 if (s.equalsIgnoreCase(shortMonthNames[i])) {\n 460                     result = i + 1; 461                     break; 462                 } 463                 if (s.equalsIgnoreCase(monthNames[i])) {\n 464                     result = i + 1;\n 465                     break; 466                 } 467             }\n 468         }\n 685         if (baseDOW >= targetWeekday) {", "270 Chapter 16: Refactoring SerialDate\nThe right algorithm is shown below:\nFinally, the tests at line 417 and line 429 can be made to pass simply by throwing an\nIllegalArgumentException instead of returning an error string from weekInMonthToString\nand relativeToString.\nWith these changes all the unit tests pass, and I believe SerialDate now works. So now\nit\u2019 s time to make it \u201cright.\u201d\nThen Make It Right\nWe are going to walk from the top to the bottom of SerialDate, improving it as we go\nalong. Although you won\u2019t see this in the discussion, I will be running all of the JCommon\nunit tests, including my improved unit test for SerialDate, after every change I make. So\nrest assured that every change you see here works for all of JCommon.\nStarting at line 1, we see a ream of comments with license information, copyrights,\nauthors, and change history. I acknowledge that there are certain legalities that need to be\naddressed, and so the copyrights and licenses must stay. On the other hand, the change his-\ntory is a leftover from the 1960s. We have source code control tools that do this for us now.\nThis history should be deleted [C1].\nThe import list starting at line 61 could be shortened by using java.text.* and\njava.util.*. [J1]\nI wince at the HTML formatting in the Javadoc (line 67). Having a source \ufb01le with\nmore than one language in it troubles me. This comment has four languages in it: Java,\nEnglish, Javadoc, and html [G1]. With that many languages in use, it\u2019 s hard to keep things\nstraight. For example, the nice positioning of line 71 and line 72 are lost when the Javadoc\nis generated, and yet who wants to see <ul> and <li> in the source code? A better strategy\nmight be to just surround the whole comment with <pre> so that the formatting that is\napparent in the source code is preserved within the Javadoc.1\nLine 86 is the class declaration. Why is this class named SerialDate? What is the sig-\nni\ufb01cance of the world \u201cserial\u201d? Is it because the class is derived from Serializable? That\ndoesn\u2019t seem likely. \n      int delta = targetDOW - base.getDayOfWeek();\n      int positiveDelta = delta + 7;      int adjust = positiveDelta % 7;\n      if (adjust > 3)\n        adjust -= 7;\n      return SerialDate.addDays(adjust, base);\n1. An even better solution would have been for Javadoc to present all comments as preformatted, so that comments appear the \nsame in both code and document.", "271Then Make It Right\nI won\u2019t keep you guessing. I know why (or at least I think I know why) the word\n\u201cserial\u201d was used. The clue is in the constants SERIAL_LOWER_BOUND and\nSERIAL_UPPER_BOUND on line 98 and line 101. An even better clue is in the comment\nthat begins on line 830. This class is named SerialDate because it is implemented using a\n\u201cserial number,\u201d which happens to be the number of days since December 30th, 1899. \nI have two problems with this. First, the term \u201cserial number\u201d is not really correct.\nThis may be a quibble, but the representation is more of a relative offset than a serial num-\nber. The term \u201cserial number\u201d has more to do with product identi\ufb01cation markers than\ndates. So I don\u2019t \ufb01nd this name particularly descriptive [N1]. A more descriptive term\nmight be \u201cordinal.\u201d\nThe second problem is more signi\ufb01cant. The name SerialDate implies an implementa-\ntion. This class is an abstract class. There is no need to imply anything at all about the\nimplementation. Indeed, there is good reason to hide the implementation! So I \ufb01nd this\nname to be at the wrong level of abstraction [N2]. In my opinion, the name of this class\nshould simply be Date.\nUnfortunately, there are already too many classes in the Java library named Date, so\nthis is probably not the best name to choose. Because this class is all about days, instead of\ntime, I considered naming it Day, but this name is also heavily used in other places. In the\nend, I chose DayDate as the best compromise.\nFrom now on in this discussion I will use the term DayDate. I leave it to you to remem-\nber that the listings you are looking at still use SerialDate.\nI understand why DayDate inherits from Comparable and Serializable. But why does it\ninherit from MonthConstants? The class MonthConstants (Listing B-3, page 372) is just a\nbunch of static \ufb01nal constants that de\ufb01ne the months. Inheriting from classes with con-\nstants is an old trick that Java programmers used so that they could avoid using expres-\nsions like MonthConstants.January, but it\u2019 s a bad idea [J2]. MonthConstants should really be\nan enum.\npublic abstract class DayDate implements Comparable,\n                                         Serializable {  public static enum Month {\n    JANUARY(1),\n    FEBRUARY(2),    MARCH(3),    APRIL(4),    MAY(5),\n    JUNE(6),\n    JULY(7),    AUGUST(8),    SEPTEMBER(9),    OCTOBER(10),\n    NOVEMBER(11),\n    DECEMBER(12);\n    Month(int index) {\n      this.index = index;\n    }", "272 Chapter 16: Refactoring SerialDate\nChanging MonthConstants to this enum forces quite a few changes to the DayDate class\nand all it\u2019 s users. It took me an hour to make all the changes. However, any function that\nused to take an int for a month, now takes a Month enumerator. This means we can get rid\nof the isValidMonthCode method (line 326), and all the month code error checking such as\nthat in monthCodeToQuarter (line 356) [G5]. \nNext, we have line 91, serialVersionUID. This variable is used to control the serializer.\nIf we change it, then any DayDate written with an older version of the software won\u2019t be\nreadable anymore and will result in an InvalidClassException. If you don\u2019t declare the\nserialVersionUID variable, then the compiler automatically generates one for you, and it\nwill be different every time you make a change to the module. I know that all the docu-\nments recommend manual control of this variable, but it seems to me that automatic con-\ntrol of serialization is a lot safer [G4]. After all, I\u2019 d much rather debug an\nInvalidClassException than the odd behavior that would ensue if I forgot to change the\nserialVersionUID. So I\u2019m going to delete the variable\u2014at least for the time being.2\nI \ufb01nd the comment on line 93 redundant. Redundant comments are just places to col-\nlect lies and misinformation [C2]. So I\u2019m going to get rid of it and its ilk.\nThe comments at line 97 and line 100 talk about serial numbers, which I discussed\nearlier [C1]. The variables they describe are the earliest and latest possible dates that\nDayDate can describe. This can be made a bit clearer [N1].\nIt\u2019 s not clear to me why EARLIEST_DATE_ORDINAL is 2 instead of 0. There is a hint in the\ncomment on line 829 that suggests that this has something to do with the way dates are\nrepresented in Microsoft Excel. There is a much deeper insight provided in a derivative of\nDayDate called SpreadsheetDate(Listing B-5, page 382). The comment on line 71 describes\nthe issue nicely.\nThe problem I have with this is that the issue seems to be related to the implementa-\ntion of SpreadsheetDate and has nothing to do with DayDate. I conclude from this that\n    public static Month make(int monthIndex) {\n      for (Month m : Month.values()) {        if (m.index == monthIndex)\n          return m;\n      }      throw new IllegalArgumentException(\"Invalid month index \" + monthIndex);    }    public final int index;  }\n2. Several of the reviewers of this text have taken exception to this decision. They contend that in an open source framework itis\nbetter to assert manual control over the serial ID so that minor changes to the software don\u2019t cause old serialized dates to be\ninvalid. This is a fair point. However, at least the failure, inconvenient though it might be, has a clear-cut cause. On the other\nhand, if the author of the class forgets to update the ID, then the failure mode is unde\ufb01ned and might very well be silent. I \nthink the real moral of this story is that you should not expect to deserialize across versions.\n  public static final int EARLIEST_DATE_ORDINAL = 2;     // 1/1/1900\n  public static final int LATEST_DATE_ORDINAL = 2958465; // 12/31/9999", "273Then Make It Right\nEARLIEST_DATE_ORDINAL and LATEST_DATE_ORDINAL do not really belong in DayDate and\nshould be moved to SpreadsheetDate [G6].\nIndeed, a search of the code shows that these variables are used only within\nSpreadsheetDate. Nothing in DayDate, nor in any other class in the JCommon framework, uses\nthem. Therefore, I\u2019ll move them down into SpreadsheetDate.\nThe next variables, MINIMUM_YEAR_SUPPORTED, and MAXIMUM_YEAR_SUPPORTED (line 104\nand line 107), provide something of a dilemma. It seems clear that if DayDate is an abstract\nclass that provides no foreshadowing of implementation, then it should not inform us\nabout a minimum or maximum year. Again, I am tempted to move these variables down\nintoSpreadsheetDate [G6]. However, a quick search of the users of these variables shows\nthat one other class uses them: RelativeDayOfWeekRule(Listing B-6, page 390). We see that\nusage at line 177 and line 178 in the getDate function, where they are used to check that\nthe argument to getDate is a valid year. The dilemma is that a user of an abstract class\nneeds information about its implementation. \nWhat we need to do is provide this information without polluting DayDate itself.\nUsually, we would get implementation information from an instance of a derivative.\nHowever, the getDate function is not passed an instance of a DayDate. It does, however,\nreturn such an instance, which means that somewhere it must be creating it. Line 187\nthrough line 205 provide the hint. The DayDate instance is being created by one of the\nthree functions, getPreviousDayOfWeek, getNearestDayOfWeek, or getFollowingDayOfWeek.\nLooking back at the DayDate listing, we see that these functions (lines 638\u2013724) all return\na date created by addDays (line 571), which calls createInstance (line 808), which creates\na SpreadsheetDate! [G7].\nIt\u2019 s generally a bad idea for base classes to know about their derivatives. To \ufb01x this, we\nshould use the ABSTRACT FACTORY3 pattern and create a DayDateFactory. This factory will\ncreate the instances of DayDate that we need and can also answer questions about the\nimplementation, such as the maximum and minimum dates.\n3. [GOF].\npublic abstract class DayDateFactory {\n  private static DayDateFactory factory = new SpreadsheetDateFactory();  public static void setInstance(DayDateFactory factory) {\n    DayDateFactory.factory = factory;\n  }\n  protected abstract DayDate _makeDate(int ordinal);\n  protected abstract DayDate _makeDate(int day, DayDate.Month month, int year);\n  protected abstract DayDate _makeDate(int day, int month, int year);\n  protected abstract DayDate _makeDate(java.util.Date date);  protected abstract int _getMinimumYear();  protected abstract int _getMaximumYear();\n  public static DayDate makeDate(int ordinal) {\n    return factory._makeDate(ordinal);  }", "274 Chapter 16: Refactoring SerialDate\nThis factory class replaces the createInstance methods with makeDate methods, which\nimproves the names quite a bit [N1]. It defaults to a SpreadsheetDateFactory but can be\nchanged at any time to use a different factory. The static methods that delegate to abstract\nmethods use a combination of the SINGLETON,4 DECORATOR,5 and ABSTRACT FACTORY\npatterns that I have found to be useful.\nThe SpreadsheetDateFactory looks like this.\n  public static DayDate makeDate(int day, DayDate.Month month, int year) {\n    return factory._makeDate(day, month, year);  }\n  public static DayDate makeDate(int day, int month, int year) {\n    return factory._makeDate(day, month, year);  }\n  public static DayDate makeDate(java.util.Date date) {\n    return factory._makeDate(date);  }\n  public static int getMinimumYear() {\n    return factory._getMinimumYear();\n  }\n  public static int getMaximumYear() {\n    return factory._getMaximumYear();\n  }\n}\n4. Ibid.\n5. Ibid.\npublic class SpreadsheetDateFactory extends DayDateFactory {\n  public DayDate _makeDate(int ordinal) {    return new SpreadsheetDate(ordinal);\n  }\n  public DayDate _makeDate(int day, DayDate.Month month, int year) {\n    return new SpreadsheetDate(day, month, year);  }\n  public DayDate _makeDate(int day, int month, int year) {\n    return new SpreadsheetDate(day, month, year);  }\n  public DayDate _makeDate(Date date) {\n    final GregorianCalendar calendar = new GregorianCalendar();    calendar.setTime(date);    return new SpreadsheetDate(      calendar.get(Calendar.DATE),\n      DayDate.Month.make(calendar.get(Calendar.MONTH) + 1),\n      calendar.get(Calendar.YEAR));  }", "275Then Make It Right\nAs you can see, I have already moved the MINIMUM_YEAR_SUPPORTED and\nMAXIMUM_YEAR_SUPPORTED variables into SpreadsheetDate, where they belong [G6].\nThe next issue in DayDate are the day constants beginning at line 109. These should\nreally be another enum [J3]. We\u2019ve seen this pattern before, so I won\u2019t repeat it here. Y ou\u2019ll\nsee it in the \ufb01nal listings.\nNext, we see a series of tables starting with LAST_DAY_OF_MONTH at line 140. My \ufb01rst\nissue with these tables is that the comments that describe them are redundant [C3]. Their\nnames are suf\ufb01cient. So I\u2019m going to delete the comments.\nThere seems to be no good reason that this table isn\u2019t private [G8], because there is a\nstatic function lastDayOfMonth that provides the same data.\nThe next table, AGGREGATE_DAYS_TO_END_OF_MONTH, is a bit more mysterious because it is\nnot used anywhere in the JCommon framework [G9]. So I deleted it.\nThe same goes for LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH.\nThe next table, AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH , is used only in Spread-\nsheetDate (line 434 and line 473). This begs the question of whether it should be moved\nto SpreadsheetDate. The argument for not moving it is that the table is not speci\ufb01c to any\nparticular implementation [G6]. On the other hand, no implementation other than\nSpreadsheetDate actually exists, and so the table should be moved close to where it is\nused [G10].\nWhat settles the argument for me is that to be consistent [G11], we should make the\ntable private and expose it through a function like julianDateOfLastDayOfMonth. Nobody\nseems to need a function like that. Moreover, the table can be moved back to DayDate easily\nif any new implementation of DayDate needs it. So I moved it.\nThe same goes for the table, LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH.\nNext, we see three sets of constants that can be turned into enums (lines 162\u2013205).\nThe \ufb01rst of the three selects a week within a month. I changed it into an enum named\nWeekInMonth.\n  protected int _getMinimumYear() {\n    return SpreadsheetDate.MINIMUM_YEAR_SUPPORTED;  }\n  protected int _getMaximumYear() {\n    return SpreadsheetDate.MAXIMUM_YEAR_SUPPORTED;  }}\npublic enum WeekInMonth {\n    FIRST(1), SECOND(2), THIRD(3), FOURTH(4), LAST(0);\n    public final int index;\n    WeekInMonth(int index) {\n      this.index = index;    }\n  }", "276 Chapter 16: Refactoring SerialDate\nThe second set of constants (lines 177\u2013187) is a bit more obscure. The INCLUDE_NONE,\nINCLUDE_FIRST, INCLUDE_SECOND, and INCLUDE_BOTH constants are used to describe whether\nthe de\ufb01ning end-point dates of a range should be included in that range. Mathematically,\nthis is described using the terms \u201copen interval,\u201d \u201chalf-open interval,\u201d and \u201cclosed inter-\nval.\u201d I think it is clearer using the mathematical nomenclature [N3], so I changed it to an\nenum named DateInterval with CLOSED, CLOSED_LEFT, CLOSED_RIGHT, and OPEN enumerators. \nThe third set of constants (lines 18\u2013205) describe whether a search for a particular\nday of the week should result in the last, next, or nearest instance. Deciding what to call\nthis is dif\ufb01cult at best. In the end, I settled for WeekdayRange with LAST, NEXT, and NEAREST\nenumerators.\nY ou might not agree with the names I\u2019ve chosen. They make sense to me, but they\nmay not make sense to you. The point is that they are now in a form that makes them easy\nto change [J3]. They aren\u2019t passed as integers anymore; they are passed as symbols. I can\nuse the \u201cchange name\u201d function of my IDE to change the names, or the types, without\nworrying that I missed some -1 or 2 somewhere in the code or that some int argument dec-\nlaration is left poorly described.\nThe description \ufb01eld at line 208 does not seem to be used by anyone. I deleted it along\nwith its accessor and mutator [G9].\nI also deleted the degenerate default constructor at line 213 [G12]. The compiler will\ngenerate it for us. \nWe can skip over the isValidWeekdayCode method (lines 216\u2013238) because we deleted\nit when we created the Day enumeration.\nThis brings us to the stringToWeekdayCode method (lines 242\u2013270). Javadocs that\ndon\u2019t add much to the method signature are just clutter [C3],[G12]. The only value this\nJavadoc adds is the description of the -1 return value. However, because we changed to the\nDay enumeration, the comment is actually wrong [C2]. The method now throws an\nIllegalArgumentException. So I deleted the Javadoc.\nI also deleted all the final keywords in arguments and variable declarations. As far as\nI could tell, they added no real value but did add to the clutter [G12]. Eliminating final\n\ufb02ies in the face of some conventional wisdom. For example, Robert Simmons 6 strongly\nrecommends us to \u201c. . . spread final all over your code.\u201d Clearly I disagree. I think that\nthere are a few good uses for final, such as the occasional final constant, but otherwise\nthe keyword adds little value and creates a lot of clutter. Perhaps I feel this way because the\nkinds of errors that final might catch are already caught by the unit tests I write.\nI didn\u2019t care for the duplicate if statements [G5] inside the for loop (line 259 and\nline 263), so I connected them into a single if statement using the || operator. I also used\nthe Day enumeration to direct the for loop and made a few other cosmetic changes.\nIt occurred to me that this method does not really belong in DayDate. It\u2019 s really the\nparse function of Day. So I moved it into the Day enumeration. However, that made the Day\n6. [Simmons04], p. 73.", "277Then Make It Right\nenumeration pretty large. Because the concept of Day does not depend on DayDate, I moved\nthe Day enumeration outside of the DayDate class into its own source \ufb01le [G13].\nI also moved the next function, weekdayCodeToString (lines 272\u2013286) into the Day\nenumeration and called it toString.\nThere are two getMonths functions (lines 288\u2013316). The \ufb01rst calls the second. The\nsecond is never called by anyone but the \ufb01rst. Therefore, I collapsed the two into one and\nvastly simpli\ufb01ed them [G9],[G12],[F4]. Finally, I changed the name to be a bit more self-\ndescriptive [N1]. \npublic enum Day {\n  MONDAY(Calendar.MONDAY),  TUESDAY(Calendar.TUESDAY),\n  WEDNESDAY(Calendar.WEDNESDAY),s\n  THURSDAY(Calendar.THURSDAY),  FRIDAY(Calendar.FRIDAY),  SATURDAY(Calendar.SATURDAY),  SUNDAY(Calendar.SUNDAY);\n  public final int index;\n  private static DateFormatSymbols dateSymbols = new DateFormatSymbols();\n  Day(int day) {\n    index = day;\n  }\n  public static Day make(int index) throws IllegalArgumentException {\n    for (Day d : Day.values())\n      if (d.index == index)\n        return d;    throw new IllegalArgumentException(      String.format(\"Illegal day index: %d.\", index));  }\n  public static Day parse(String s) throws IllegalArgumentException {\n    String[] shortWeekdayNames =      dateSymbols.getShortWeekdays();    String[] weekDayNames =\n      dateSymbols.getWeekdays();\n    s = s.trim();\n    for (Day day : Day.values()) {      if (s.equalsIgnoreCase(shortWeekdayNames[day.index]) ||\n          s.equalsIgnoreCase(weekDayNames[day.index])) {\n        return day;      }    }\n    throw new IllegalArgumentException(\n      String.format(\"%s is not a valid weekday string\", s));  }\n  public String toString() {\n    return dateSymbols.getWeekdays()[index];\n  }}", "278 Chapter 16: Refactoring SerialDate\nThe isValidMonthCode function (lines 326\u2013346) was made irrelevant by the Month\nenum, so I deleted it [G9].\nThe monthCodeToQuarter function (lines 356\u2013375) smells of F EATURE E NVY7 [G14]\nand probably belongs in the Month enum as a method named quarter. So I replaced it. \nThis made the Month enum big enough to be in its own class. So I moved it out of\nDayDate to be consistent with the Day enum [G11],[G13].\nThe next two methods are named monthCodeToString (lines 377\u2013426). Again, we see\nthe pattern of one method calling its twin with a \ufb02ag. It is usually a bad idea to pass a \ufb02ag\nas an argument to a function, especially when that \ufb02ag simply selects the format of the out-\nput[G15]. I renamed, simpli\ufb01ed, and restructured these functions and moved them into the\nMonth enum [N1],[N3],[C3],[G14].\nThe next method is stringToMonthCode (lines 428\u2013472). I renamed it, moved it into the\nMonth enum, and simpli\ufb01ed it [N1],[N3],[C3],[G14],[G12].\n  public static String[] getMonthNames() {\n    return dateFormatSymbols.getMonths();  }\n7. [Refactoring].\n    public int quarter() {      return 1 + (index-1)/3;    }\n  public String toString() {\n    return dateFormatSymbols.getMonths()[index - 1];\n  }\n  public String toShortString() {\n    return dateFormatSymbols.getShortMonths()[index - 1];\n  }\n  public static Month parse(String s) {\n    s = s.trim();\n    for (Month m : Month.values())      if (m.matches(s))        return m;\n    try {\n      return make(Integer.parseInt(s));    }    catch (NumberFormatException e) {}    throw new IllegalArgumentException(\"Invalid month \" + s);\n  }", "279Then Make It Right\nThe isLeapYear method (lines 495\u2013517) can be made a bit more expressive [G16].\nThe next function, leapYearCount (lines 519\u2013536) doesn\u2019t really belong in DayDate.\nNobody calls it except for two methods in SpreadsheetDate. So I pushed it down [G6].\nThe lastDayOfMonth function (lines 538\u2013560) makes use of the LAST_DAY_OF_MONTH\narray. This array really belongs in the Month enum [G17], so I moved it there. I also simpli-\n\ufb01ed the function and made it a bit more expressive [G16].\nNow things start to get a bit more interesting. The next function is addDays (lines 562\u2013\n576). First of all, because this function operates on the variables of DayDate, it should not\nbe static [G18]. So I changed it to an instance method. Second, it calls the function\ntoSerial. This function should be renamed toOrdinal [N1]. Finally, the method can be\nsimpli\ufb01ed.\nThe same goes for addMonths (lines 578\u2013602). It should be an instance method [G18].\nThe algorithm is a bit complicated, so I used EXPLAINING TEMPORARY VARIABLES8 [G19]\nto make it more transparent. I also renamed the method getYYY to getYear [N1].\n  private boolean matches(String s) {\n    return s.equalsIgnoreCase(toString()) ||           s.equalsIgnoreCase(toShortString());\n  }\n  public static boolean isLeapYear(int year) {\n    boolean fourth = year % 4 == 0;    boolean hundredth = year % 100 == 0;    boolean fourHundredth = year % 400 == 0;    return fourth && (!hundredth || fourHundredth);\n  }\n  public static int lastDayOfMonth(Month month, int year) {\n    if (month == Month.FEBRUARY && isLeapYear(year))      return month.lastDay() + 1;\n     else\n      return month.lastDay();  }\n  public DayDate addDays(int days) {\n    return DayDateFactory.makeDate(toOrdinal() + days);  }\n8. [Beck97].\n  public DayDate addMonths(int months) {\nint thisMonthAsOrdinal = 12 * getYear() + getMonth().index - 1;\n    int resultMonthAsOrdinal = thisMonthAsOrdinal + months;\n    int resultYear = resultMonthAsOrdinal / 12;\nMonth resultMonth = Month.make(resultMonthAsOrdinal % 12 + 1);", "280 Chapter 16: Refactoring SerialDate\nThe addYears function (lines 604\u2013626) provides no surprises over the others.\nThere is a little itch at the back of my mind that is bothering me about changing\nthese methods from static to instance. Does the expression date.addDays(5) make it\nclear that the date object does not change and that a new instance of DayDate is returned?\nOr does it erroneously imply that we are adding \ufb01ve days to the date object? Y ou might\nnot think that is a big problem, but a bit of code that looks like the following can be very\ndeceiving [G20].\nDayDate date = DateFactory.makeDate(5, Month.DECEMBER, 1952);\ndate.addDays(7); // bump date by one week.\nSomeone reading this code would very likely just accept that addDays is changing the\ndate object. So we need a name that breaks this ambiguity [N4]. So I changed the names to\nplusDays and plusMonths. It seems to me that the intent of the method is captured nicely by\nDayDate date = oldDate.plusDays(5);\nwhereas the following doesn\u2019t read \ufb02uidly enough for a reader to simply accept that the\ndate object is changed:\ndate.plusDays(5);\nThe algorithms continue to get more interesting. getPreviousDayOfWeek (lines 628\u2013\n660) works but is a bit complicated. After some thought about what was really going on\n[G21], I was able to simplify it and use E XPLAINING TEMPORARY VARIABLES [G19] to\nmake it clearer. I also changed it from a static method to an instance method [G18], and\ngot rid of the duplicate instance method [G5] (lines 997\u20131008).\nThe exact same analysis and result occurred for getFollowingDayOfWeek(lines 662\u2013693).\n    int lastDayOfResultMonth = lastDayOfMonth(resultMonth, resultYear);\n    int resultDay = Math.min(getDayOfMonth(), lastDayOfResultMonth);    return DayDateFactory.makeDate(resultDay, resultMonth, resultYear);\n  }\n  public DayDate plusYears(int years) {\n    int resultYear = getYear() + years;\n    int lastDayOfMonthInResultYear = lastDayOfMonth(getMonth(), resultYear);\n    int resultDay = Math.min(getDayOfMonth(), lastDayOfMonthInResultYear);    return DayDateFactory.makeDate(resultDay, getMonth(), resultYear);  }\n  public DayDate getPreviousDayOfWeek(Day targetDayOfWeek) {\n    int offsetToTarget = targetDayOfWeek.index - getDayOfWeek().index;\n    if (offsetToTarget >= 0)\n      offsetToTarget -= 7;    return plusDays(offsetToTarget);  }\npublic DayDate getFollowingDayOfWeek(Day targetDayOfWeek) {\n    int offsetToTarget = targetDayOfWeek.index - getDayOfWeek().index;\n    if (offsetToTarget <= 0)", "281Then Make It Right\nThe next function is getNearestDayOfWeek (lines 695\u2013726), which we corrected back\non page 270. But the changes I made back then aren\u2019t consistent with the current pattern in\nthe last two functions [G11]. So I made it consistent and used some EXPLAINING TEMPO-\nRARY VARIABLES [G19] to clarify the algorithm.\nThe getEndOfCurrentMonth method (lines 728\u2013740) is a little strange because it is an\ninstance method that envies [G14] its own class by taking a DayDate argument. I made it a\ntrue instance method and clari\ufb01ed a few names.\nRefactoring weekInMonthToString (lines 742\u2013761) turned out to be very interesting\nindeed. Using the refactoring tools of my IDE, I \ufb01rst moved the method to the WeekInMonth\nenum that I created back on page 275. Then I renamed the method to toString. Next, I\nchanged it from a static method to an instance method. All the tests still passed. (Can you\nguess where I am going?) \nNext, I deleted the method entirely! Five asserts failed (lines 411\u2013415, Listing B-4,\npage 374). I changed these lines to use the names of the enumerators ( FIRST,\nSECOND, . . .). All the tests passed. Can you see why? Can you also see why each of these\nsteps was necessary? The refactoring tool made sure that all previous callers of\nweekInMonthToString now called toString on the weekInMonth enumerator because all enu-\nmerators implement toString to simply return their names. . . .\nUnfortunately, I was a bit too clever. As elegant as that wonderful chain of refactor-\nings was, I \ufb01nally realized that the only users of this function were the tests I had just mod-\ni\ufb01ed, so I deleted the tests.\nFool me once, shame on you. Fool me twice, shame on me! So after determining that\nnobody other than the tests called relativeToString (lines 765\u2013781), I simply deleted the\nfunction and its tests. \n      offsetToTarget += 7;\n    return plusDays(offsetToTarget);  }\npublic DayDate getNearestDayOfWeek(final Day targetDay) {\n    int offsetToThisWeeksTarget = targetDay.index - getDayOfWeek().index;\nint offsetToFutureTarget = (offsetToThisWeeksTarget + 7) % 7;\n    int offsetToPreviousTarget = offsetToFutureTarget - 7;\n    if (offsetToFutureTarget > 3)\n      return plusDays(offsetToPreviousTarget);    else\n      return plusDays(offsetToFutureTarget);\n  }\npublic DayDate getEndOfMonth() {\n    Month month = getMonth();\n    int year = getYear();\n    int lastDay = lastDayOfMonth(month, year);    return DayDateFactory.makeDate(lastDay, month, year);  }", "282 Chapter 16: Refactoring SerialDate\nWe have \ufb01nally made it to the abstract methods of this abstract class. And the \ufb01rst one\nis as appropriate as they come: toSerial (lines 838\u2013844). Back on page 279 I had changed\nthe name to toOrdinal. Having looked at it in this context, I decided the name should be\nchanged to getOrdinalDay.\nThe next abstract method is toDate (lines 838\u2013844). It converts a DayDate to a\njava.util.Date. Why is this method abstract? If we look at its implementation in\nSpreadsheetDate (lines 198\u2013207, Listing B-5, page 382), we see that it doesn\u2019t depend on\nanything in the implementation of that class [G6]. So I pushed it up.\nThe getYYYY, getMonth, and getDayOfMonth methods are nicely abstract. However, the\ngetDayOfWeek method is another one that should be pulled up from SpreadSheetDate\nbecause it doesn\u2019t depend on anything that can\u2019t be found in DayDate [G6]. Or does it?\nIf you look carefully (line 247, Listing B-5, page 382), you\u2019ll see that the algorithm\nimplicitly depends on the origin of the ordinal day (in other words, the day of the week of\nday 0). So even though this function has no physical dependencies that couldn\u2019t be moved\ntoDayDate, it does have a logical dependency.\nLogical dependencies like this bother me [G22]. If something logical depends on\nthe implementation, then something physical should too. Also, it seems to me that the\nalgorithm itself could be generic with a much smaller portion of it dependent on the\nimplementation[G6].\nSo I created an abstract method in DayDate named getDayOfWeekForOrdinalZero and\nimplemented it in SpreadsheetDate to return Day.SATURDAY. Then I moved the getDayOfWeek\nmethod up to DayDate and changed it to call getOrdinalDay and getDayOfWeekForOrdinal-\nZero.\nAs a side note, look carefully at the comment on line 895 through line 899. Was this\nrepetition really necessary? As usual, I deleted this comment along with all the others. \nThe next method is compare (lines 902\u2013913). Again, this method is inappropriately\nabstract [G6], so I pulled the implementation up into DayDate. Also, the name does not\ncommunicate enough [N1]. This method actually returns the difference in days since the\nargument. So I changed the name to daysSince. Also, I noted that there weren\u2019t any tests\nfor this method, so I wrote them.\nThe next six functions (lines 915\u2013980) are all abstract methods that should be imple-\nmented in DayDate. So I pulled them all up from SpreadsheetDate.\nThe last function, isInRange (lines 982\u2013995) also needs to be pulled up and refac-\ntored. The switch statement is a bit ugly [G23] and can be replaced by moving the cases\ninto the DateInterval enum. \npublic Day getDayOfWeek() {\n    Day startingDay = getDayOfWeekForOrdinalZero();    int startingOffset = startingDay.index - Day.SUNDAY.index;\n return Day.make((getOrdinalDay() + startingOffset) % 7 + 1);\n  }", "283Then Make It Right\nThat brings us to the end of DayDate. So now we\u2019ll make one more pass over the whole\nclass to see how well it \ufb02ows.\nFirst, the opening comment is long out of date, so I shortened and improved it [C2].\nNext, I moved all the remaining enums out into their own \ufb01les [G12].\nNext, I moved the static variable (dateFormatSymbols) and three static methods\n(getMonthNames, isLeapYear, lastDayOfMonth) into a new class named DateUtil [G6].\nI moved the abstract methods up to the top where they belong [G24].\nI changed Month.make to Month.fromInt [N1] and did the same for all the other enums.\nI also created a toInt() accessor for all the enums and made the index \ufb01eld private.\nThere was some interesting duplication [G5] in plusYears and plusMonths that I was\nable to eliminate by extracting a new method named correctLastDayOfMonth, making the\nall three methods much clearer. \nI got rid of the magic number 1 [G25], replacing it with Month.JANUARY.toInt() or\nDay.SUNDAY.toInt(), as appropriate. I spent a little time with SpreadsheetDate, cleaning up\nthe algorithms a bit. The end result is contained in Listing B-7, page 394, through\nListing B-16, page 405.\npublic enum DateInterval {\n    OPEN {      public boolean isIn(int d, int left, int right) {\n        return d > left && d < right;\n      }    },    CLOSED_LEFT {      public boolean isIn(int d, int left, int right) {        return d >= left && d < right;\n      }\n    },    CLOSED_RIGHT {      public boolean isIn(int d, int left, int right) {        return d > left && d <= right;\n      }\n    },    CLOSED {      public boolean isIn(int d, int left, int right) {        return d >= left && d <= right;\n      }\n    };\n    public abstract boolean isIn(int d, int left, int right);\n  }\npublic boolean isInRange(DayDate d1, DayDate d2, DateInterval interval) {\n int left = Math.min(d1.getOrdinalDay(), d2.getOrdinalDay());\nint right = Math.max(d1.getOrdinalDay(), d2.getOrdinalDay());\n    return interval.isIn(getOrdinalDay(), left, right);  }", "284 Chapter 16: Refactoring SerialDate\nInterestingly the code coverage in DayDate has decreased to 84.9 percent! This is not\nbecause less functionality is being tested; rather it is because the class has shrunk so much\nthat the few uncovered lines have a greater weight. DayDate now has 45 out of 53 execut-\nable statements covered by tests. The uncovered lines are so trivial that they weren\u2019t worth\ntesting.\nConclusion\nSo once again we\u2019ve followed the Boy Scout Rule. We\u2019ve checked the code in a bit cleaner\nthan when we checked it out. It took a little time, but it was worth it. Test coverage was\nincreased, some bugs were \ufb01xed, the code was clari\ufb01ed and shrunk. The next person to\nlook at this code will hopefully \ufb01nd it easier to deal with than we did. That person will also\nprobably be able to clean it up a bit more than we did. \nBibliography\n[GOF]:  Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al.,\nAddison-Wesley, 1996.\n[Simmons04]:  Hardcore Java, Robert Simmons, Jr., O\u2019Reilly, 2004.\n[Refactoring]:  Refactoring: Improving the Design of Existing Code, Martin Fowler et al.,\nAddison-Wesley, 1999. \n[Beck97]:  Smalltalk Best Practice Patterns, Kent Beck, Prentice Hall, 1997.", "285\n17\nSmells and Heuristics\nIn his wonderful book Refactoring,1 Martin Fowler identi\ufb01ed many different \u201cCode\nSmells.\u201d The list that follows includes many of Martin\u2019 s smells and adds many more of my\nown. It also includes other pearls and heuristics that I use to practice my trade.\n1. [Refactoring].", "286 Chapter 17: Smells and Heuristics\nI compiled this list by walking through several different programs and refactoring\nthem. As I made each change, I asked myself why I made that change and then wrote the\nreason down here. The result is a rather long list of things that smell bad to me when I read\ncode.\nThis list is meant to be read from top to bottom and also to be used as a reference.\nThere is a cross-reference for each heuristic that shows you where it is referenced in the\nrest of the text in \u201cAppendix C\u201d on page 409.\nComments\nC1: Inappropriate Information\nIt is inappropriate for a comment to hold information better held in a different kind of sys-\ntem such as your source code control system, your issue tracking system, or any other\nrecord-keeping system. Change histories, for example, just clutter up source \ufb01les with\nvolumes of historical and uninteresting text. In general, meta-data such as authors, last-\nmodi\ufb01ed-date, SPR number, and so on should not appear in comments. Comments should\nbe reserved for technical notes about the code and design.\nC2: Obsolete Comment\nA comment that has gotten old, irrelevant, and incorrect is obsolete. Comments get old\nquickly. It is best not to write a comment that will become obsolete. If you \ufb01nd an obsolete\ncomment, it is best to update it or get rid of it as quickly as possible. Obsolete comments\ntend to migrate away from the code they once described. They become \ufb02oating islands of\nirrelevance and misdirection in the code. \nC3: Redundant Comment\nA comment is redundant if it describes something that adequately describes itself. For\nexample:\n  i++; // increment i\nAnother example is a Javadoc that says nothing more than (or even less than) the function\nsignature:\n  /**\n   * @param sellRequest   * @return\n   * @throws ManagedComponentException\n   */  public SellResponse beginSellItem(SellRequest sellRequest)     throws ManagedComponentException\nComments should say things that the code cannot say for itself.", "287Environment\nC4: Poorly Written Comment\nA comment worth writing is worth writing well. If you are going to write a comment,\ntake the time to make sure it is the best comment you can write. Choose your words\ncarefully. Use correct grammar and punctuation. Don\u2019t ramble. Don\u2019t state the obvious.\nBe brief.\nC5: Commented-Out Code\nIt makes me crazy to see stretches of code that are commented out. Who knows how old it\nis? Who knows whether or not it\u2019 s meaningful? Y et no one will delete it because everyone\nassumes someone else needs it or has plans for it.\nThat code sits there and rots, getting less and less relevant with every passing day. It\ncalls functions that no longer exist. It uses variables whose names have changed. It follows\nconventions that are long obsolete. It pollutes the modules that contain it and distracts the\npeople who try to read it. Commented-out code is an abomination.\nWhen you see commented-out code, delete it! Don\u2019t worry, the source code control\nsystem still remembers it. If anyone really needs it, he or she can go back and check out a\nprevious version. Don\u2019t suffer commented-out code to survive.\nEnvironment\nE1: Build Requires More Than One Step\nBuilding a project should be a single trivial operation. Y ou should not have to check many\nlittle pieces out from source code control. Y ou should not need a sequence of arcane com-\nmands or context dependent scripts in order to build the individual elements. Y ou should\nnot have to search near and far for all the various little extra JARs, XML \ufb01les, and other\nartifacts that the system requires. Y ou should be able to check out the system with one sim-\nple command and then issue one other simple command to build it.\nsvn get mySystem\ncd mySystemant all\nE2: Tests Require More Than One Step\nY ou should be able to run all the unit tests with just one command. In the best case you\ncan run all the tests by clicking on one button in your IDE. In the worst case you should\nbe able to issue a single simple command in a shell. Being able to run all the tests is so\nfundamental and so important that it should be quick, easy, and obvious to do.", "288 Chapter 17: Smells and Heuristics\nFunctions\nF1: Too Many Arguments\nFunctions should have a small number of arguments. No argument is best, followed by\none, two, and three. More than three is very questionable and should be avoided with prej-\nudice. (See \u201cFunction Arguments\u201d on page 40.)\nF2: Output Arguments\nOutput arguments are counterintuitive. Readers expect arguments to be inputs, not out-\nputs. If your function must change the state of something, have it change the state of the\nobject it is called on. (See \u201cOutput Arguments\u201d on page 45.)\nF3: Flag Arguments\nBoolean arguments loudly declare that the function does more than one thing. They are\nconfusing and should be eliminated. (See \u201cFlag Arguments\u201d on page 41.)\nF4: Dead Function\nMethods that are never called should be discarded. Keeping dead code around is wasteful.\nDon\u2019t be afraid to delete the function. Remember, your source code control system still\nremembers it.\nGeneral\nG1: Multiple Languages in One Source File\nToday\u2019 s modern programming environments make it possible to put many different languages\ninto a single source \ufb01le. For example, a Java source \ufb01le might contain snippets of XML,\nHTML, Y AML, JavaDoc, English, JavaScript, and so on. For another example, in addition to\nHTML a JSP \ufb01le might contain Java, a tag library syntax, English comments, Javadocs,\nXML, JavaScript, and so forth. This is confusing at best and carelessly sloppy at worst. \nThe ideal is for a source \ufb01le to contain one, and only one, language. Realistically, we\nwill probably have to use more than one. But we should take pains to minimize both the\nnumber and extent of extra languages in our source \ufb01les.\nG2: Obvious Behavior Is Unimplemented\nFollowing \u201cThe Principle of Least Surprise,\u201d2 any function or class should implement the\nbehaviors that another programmer could reasonably expect. For example, consider a\nfunction that translates the name of a day to an enum that represents the day.\n2. Or \u201cThe Principle of Least Astonishment\u201d: http://en.wikipedia.org/wiki/\nPrinciple_of_least_astonishment", "289General\nDay day = DayDate.StringToDay(String dayName);\nWe would expect the string \"Monday\" to be translated to Day.MONDAY. We would also expect\nthe common abbreviations to be translated, and we would expect the function to ignore\ncase.\nWhen an obvious behavior is not implemented, readers and users of the code can no\nlonger depend on their intuition about function names. They lose their trust in the original\nauthor and must fall back on reading the details of the code. \nG3: Incorrect Behavior at the Boundaries\nIt seems obvious to say that code should behave correctly. The problem is that we seldom\nrealize just how complicated correct behavior is. Developers often write functions that\nthey think will work, and then trust their intuition rather than going to the effort to prove\nthat their code works in all the corner and boundary cases.\nThere is no replacement for due diligence. Every boundary condition, every corner\ncase, every quirk and exception represents something that can confound an elegant and\nintuitive algorithm. Don\u2019t rely on your intuition . Look for every boundary condition and\nwrite a test for it.\nG4: Overridden Safeties\nChernobyl melted down because the plant manager overrode each of the safety mecha-\nnisms one by one. The safeties were making it inconvenient to run an experiment. The\nresult was that the experiment did not get run, and the world saw it\u2019 s \ufb01rst major civilian\nnuclear catastrophe.\nIt is risky to override safeties. Exerting manual control over serialVersionUID may be\nnecessary, but it is always risky. Turning off certain compiler warnings (or all warnings!)\nmay help you get the build to succeed, but at the risk of endless debugging sessions. Turn-\ning off failing tests and telling yourself you\u2019ll get them to pass later is as bad as pretending\nyour credit cards are free money.\nG5: Duplication\nThis is one of the most important rules in this book, and you should take it very seriously.\nVirtually every author who writes about software design mentions this rule. Dave Thomas\nand Andy Hunt called it the DR Y3 principle (Don\u2019t Repeat Y ourself). Kent Beck made it\none of the core principles of Extreme Programming and called it: \u201cOnce, and only once.\u201d\nRon Jeffries ranks this rule second, just below getting all the tests to pass. \nEvery time you see duplication in the code, it represents a missed opportunity for\nabstraction. That duplication could probably become a subroutine or perhaps another\nclass outright. By folding the duplication into such an abstraction, you increase the vocab-\nulary of the language of your design. Other programmers can use the abstract facilities\n3. [PRAG].", "290 Chapter 17: Smells and Heuristics\nyou create. Coding becomes faster and less error prone because you have raised the\nabstraction level.\nThe most obvious form of duplication is when you have clumps of identical code that\nlook like some programmers went wild with the mouse, pasting the same code over and\nover again. These should be replaced with simple methods. \nA more subtle form is the switch/case or if/else chain that appears again and again in\nvarious modules, always testing for the same set of conditions. These should be replaced\nwith polymorphism.\nStill more subtle are the modules that have similar algorithms, but that don\u2019t share\nsimilar lines of code. This is still duplication and should be addressed by using the T EM-\nPLATE METHOD,4 or STRATEGY5 pattern. \nIndeed, most of the design patterns that have appeared in the last \ufb01fteen years are sim-\nply well-known ways to eliminate duplication. So too the Codd Normal Forms are a strat-\negy for eliminating duplication in database schemae. OO itself is a strategy for organizing\nmodules and eliminating duplication. Not surprisingly, so is structured programming. \nI think the point has been made. Find and eliminate duplication wherever you can.\nG6: Code at Wrong Level of Abstraction\nIt is important to create abstractions that separate higher level general concepts from lower\nlevel detailed concepts. Sometimes we do this by creating abstract classes to hold the\nhigher level concepts and derivatives to hold the lower level concepts. When we do this,\nwe need to make sure that the separation is complete. We want all the lower level concepts\nto be in the derivatives and all the higher level concepts to be in the base class.\nFor example, constants, variables, or utility functions that pertain only to the detailed\nimplementation should not be present in the base class. The base class should know noth-\ning about them. \nThis rule also pertains to source \ufb01les, components, and modules. Good software\ndesign requires that we separate concepts at different levels and place them in different\ncontainers. Sometimes these containers are base classes or derivatives and sometimes they\nare source \ufb01les, modules, or components. Whatever the case may be, the separation needs\nto be complete. We don\u2019t want lower and higher level concepts mixed together. \nConsider the following code:\npublic interface Stack {\n  Object pop() throws EmptyException;  void push(Object o) throws FullException;\n  double percentFull();\n4. [GOF].\n5. [GOF].", "291General\n  class EmptyException extends Exception {}\n  class FullException extends Exception {}}\nThe percentFull function is at the wrong level of abstraction. Although there are\nmany implementations of Stack where the concept of fullness is reasonable, there are other\nimplementations that simply could not know how full they are. So the function would be\nbetter placed in a derivative interface such as BoundedStack.\nPerhaps you are thinking that the implementation could just return zero if the stack\nwere boundless. The problem with that is that no stack is truly boundless. Y ou cannot\nreally prevent an OutOfMemoryException by checking for \nstack.percentFull() < 50.0.\nImplementing the function to return 0 would be telling a lie.\nThe point is that you cannot lie or fake your way out of a misplaced abstraction. Iso-\nlating abstractions is one of the hardest things that software developers do, and there is no\nquick \ufb01x when you get it wrong.\nG7: Base Classes Depending on Their Derivatives\nThe most common reason for partitioning concepts into base and derivative classes is so\nthat the higher level base class concepts can be independent of the lower level derivative\nclass concepts. Therefore, when we see base classes mentioning the names of their deriva-\ntives, we suspect a problem. In general, base classes should know nothing about their\nderivatives.\nThere are exceptions to this rule, of course. Sometimes the number of derivatives is\nstrictly \ufb01xed, and the base class has code that selects between the derivatives. We see this a\nlot in \ufb01nite state machine implementations. However, in that case the derivatives and base\nclass are strongly coupled and always deploy together in the same jar \ufb01le. In the general\ncase we want to be able to deploy derivatives and bases in different jar \ufb01les. \nDeploying derivatives and bases in different jar \ufb01les and making sure the base jar \ufb01les\nknow nothing about the contents of the derivative jar \ufb01les allow us to deploy our systems\nin discrete and independent components. When such components are modi\ufb01ed, they can\nbe redeployed without having to redeploy the base components. This means that the\nimpact of a change is greatly lessened, and maintaining systems in the \ufb01eld is made much\nsimpler.\nG8: Too Much Information\nWell-de\ufb01ned modules have very small interfaces that allow you to do a lot with a little.\nPoorly de\ufb01ned modules have wide and deep interfaces that force you to use many different\ngestures to get simple things done. A well-de\ufb01ned interface does not offer very many func-\ntions to depend upon, so coupling is low. A poorly de\ufb01ned interface provides lots of func-\ntions that you must call, so coupling is high.", "292 Chapter 17: Smells and Heuristics\nGood software developers learn to limit what they expose at the interfaces of their\nclasses and modules. The fewer methods a class has, the better. The fewer variables a func-\ntion knows about, the better. The fewer instance variables a class has, the better. \nHide your data. Hide your utility functions. Hide your constants and your temporaries.\nDon\u2019t create classes with lots of methods or lots of instance variables. Don\u2019t create lots of\nprotected variables and functions for your subclasses. Concentrate on keeping interfaces\nvery tight and very small. Help keep coupling low by limiting information.\nG9: Dead Code\nDead code is code that isn\u2019t executed. Y ou \ufb01nd it in the body of an if statement that checks\nfor a condition that can\u2019t happen. Y ou \ufb01nd it in the catch block of a try that never throws.\nY ou \ufb01nd it in little utility methods that are never called or switch/case conditions that\nnever occur. \nThe problem with dead code is that after awhile it starts to smell. The older it is, the\nstronger and sourer the odor becomes. This is because dead code is not completely\nupdated when designs change. It still compiles, but it does not follow newer conventions or\nrules. It was written at a time when the system was different. When you \ufb01nd dead code, do\nthe right thing. Give it a decent burial. Delete it from the system.\nG10: V ertical Separation\nVariables and function should be de\ufb01ned close to where they are used. Local variables\nshould be declared just above their \ufb01rst usage and should have a small vertical scope. We\ndon\u2019t want local variables declared hundreds of lines distant from their usages.\nPrivate functions should be de\ufb01ned just below their \ufb01rst usage. Private functions\nbelong to the scope of the whole class, but we\u2019 d still like to limit the vertical distance\nbetween the invocations and de\ufb01nitions. Finding a private function should just be a matter\nof scanning downward from the \ufb01rst usage.\nG11: Inconsistency\nIf you do something a certain way, do all similar things in the same way. This goes back\nto the principle of least surprise. Be careful with the conventions you choose, and once\nchosen, be careful to continue to follow them. \nIf within a particular function you use a variable named response to hold an\nHttpServletResponse, then use the same variable name consistently in the other functions\nthat use HttpServletResponse objects. If you name a method processVerificationRequest,\nthen use a similar name, such as processDeletionRequest, for the methods that process\nother kinds of requests.\nSimple consistency like this, when reliably applied, can make code much easier to\nread and modify.", "293General\nG12: Clutter\nOf what use is a default constructor with no implementation? All it serves to do is clutter\nup the code with meaningless artifacts. Variables that aren\u2019t used, functions that are never\ncalled, comments that add no information, and so forth. All these things are clutter and\nshould be removed. Keep your source \ufb01les clean, well organized, and free of clutter.\nG13: Arti\ufb01cial Coupling\nThings that don\u2019t depend upon each other should not be arti\ufb01cially coupled. For example,\ngeneral enums should not be contained within more speci\ufb01c classes because this forces the\nwhole application to know about these more speci\ufb01c classes. The same goes for general\npurpose static functions being declared in speci\ufb01c classes.\nIn general an arti\ufb01cial coupling is a coupling between two modules that serves no\ndirect purpose. It is a result of putting a variable, constant, or function in a temporarily\nconvenient, though inappropriate, location. This is lazy and careless.\nTake the time to \ufb01gure out where functions, constants, and variables ought to be\ndeclared. Don\u2019t just toss them in the most convenient place at hand and then leave them\nthere.\nG14: F eature Envy\nThis is one of Martin Fowler\u2019 s code smells.6 The methods of a class should be interested in\nthe variables and functions of the class they belong to, and not the variables and functions\nof other classes. When a method uses accessors and mutators of some other object to\nmanipulate the data within that object, then it envies the scope of the class of that other\nobject. It wishes that it were inside that other class so that it could have direct access to the\nvariables it is manipulating. For example:\npublic class HourlyPayCalculator {\npublic Money calculateWeeklyPay(HourlyEmployee e) {\nint tenthRate = e.getTenthRate().getPennies();\nint tenthsWorked = e.getTenthsWorked();\nint straightTime = Math.min(400, tenthsWorked);int overTime = Math.max(0, tenthsWorked - straightTime);int straightPay = straightTime * tenthRate;int overtimePay = (int)Math.round(overTime*tenthRate*1.5); \nreturn new Money(straightPay + overtimePay);\n  }}\nThe calculateWeeklyPay method reaches into the HourlyEmployee object to get the data on\nwhich it operates. The calculateWeeklyPay method envies the scope of HourlyEmployee. It\n\u201cwishes\u201d that it could be inside HourlyEmployee.\n6. [Refactoring].", "294 Chapter 17: Smells and Heuristics\nAll else being equal, we want to eliminate Feature Envy because it exposes the internals\nof one class to another. Sometimes, however, Feature Envy is a necessary evil. Consider the\nfollowing:\npublic class HourlyEmployeeReport {\n  private HourlyEmployee employee ;\n  public HourlyEmployeeReport(HourlyEmployee e) {\n    this.employee = e;  }\n  String reportHours() {\n    return String.format(\n      \"Name: %s\\tHours:%d.%1d\\n\",      employee.getName(),       employee.getTenthsWorked()/10,      employee.getTenthsWorked()%10);  }}\nClearly, the reportHours method envies the HourlyEmployee class. On the other hand, we\ndon\u2019t want HourlyEmployee to have to know about the format of the report. Moving that for-\nmat string into the HourlyEmployee class would violate several principles of object oriented\ndesign.7 It would couple HourlyEmployee to the format of the report, exposing it to changes\nin that format.\nG15: Selector Arguments\nThere is hardly anything more abominable than a dangling false argument at the end of a\nfunction call. What does it mean? What would it change if it were true? Not only is the\npurpose of a selector argument dif\ufb01cult to remember, each selector argument combines\nmany functions into one. Selector arguments are just a lazy way to avoid splitting a large\nfunction into several smaller functions. Consider:\n  public int calculateWeeklyPay(boolean overtime) {\n    int tenthRate = getTenthRate();    int tenthsWorked = getTenthsWorked();\n    int straightTime = Math.min(400, tenthsWorked);\n    int overTime = Math.max(0, tenthsWorked - straightTime);    int straightPay = straightTime * tenthRate;    double overtimeRate = overtime ? 1.5 : 1.0 * tenthRate;    int overtimePay = (int)Math.round(overTime*overtimeRate);\n    return straightPay + overtimePay;\n  }\nY ou call this function with a true if overtime is paid as time and a half, and with a\nfalse if overtime is paid as straight time. It\u2019 s bad enough that you must remember what\ncalculateWeeklyPay(false) means whenever you happen to stumble across it. But the\n7. Speci\ufb01cally, the Single Responsibility Principle, the Open Closed Principle, and the Common Closure Principle. See [PPP].", "295General\nreal shame of a function like this is that the author missed the opportunity to write the\nfollowing:\n  public int straightPay() {\n    return getTenthsWorked() * getTenthRate();  }\n  public int overTimePay() {\n    int overTimeTenths = Math.max(0, getTenthsWorked() - 400);    int overTimePay = overTimeBonus(overTimeTenths);    return straightPay() + overTimePay;\n  }\n  private int overTimeBonus(int overTimeTenths) {\n    double bonus = 0.5 * getTenthRate() * overTimeTenths;    return (int) Math.round(bonus);\n  }\nOf course, selectors need not be boolean. They can be enums, integers, or any other\ntype of argument that is used to select the behavior of the function. In general it is better to\nhave many functions than to pass some code into a function to select the behavior.\nG16: Obscured Intent\nWe want code to be as expressive as possible. Run-on expressions, Hungarian notation,\nand magic numbers all obscure the author\u2019 s intent. For example, here is the overTimePay\nfunction as it might have appeared:\n  public int m_otCalc() {\n    return iThsWkd * iThsRte +      (int) Math.round(0.5 * iThsRte *\n        Math.max(0, iThsWkd - 400)\n      );  }\nSmall and dense as this might appear, it\u2019 s also virtually impenetrable. It is worth tak-\ning the time to make the intent of our code visible to our readers.\nG17: Misplaced Responsibility\nOne of the most important decisions a software developer can make is where to put code.\nFor example, where should the PI constant go? Should it be in the Math class? Perhaps it\nbelongs in the Trigonometry class? Or maybe in the Circle class?\nThe principle of least surprise comes into play here. Code should be placed where a\nreader would naturally expect it to be. The PI constant should go where the trig functions\nare declared. The OVERTIME_RATE constant should be declared in the HourlyPay-\nCalculator class. \nSometimes we get \u201cclever\u201d about where to put certain functionality. We\u2019ll put it in a\nfunction that\u2019 s convenient for us, but not necessarily intuitive to the reader. For example,\nperhaps we need to print a report with the total of hours that an employee worked. We", "296 Chapter 17: Smells and Heuristics\ncould sum up those hours in the code that prints the report, or we could try to keep a run-\nning total in the code that accepts time cards. \nOne way to make this decision is to look at the names of the functions. Let\u2019 s say that\nour report module has a function named getTotalHours. Let\u2019 s also say that the module that\naccepts time cards has a saveTimeCardfunction. Which of these two functions, by it\u2019 s name,\nimplies that it calculates the total? The answer should be obvious.\nClearly, there are sometimes performance reasons why the total should be calculated\nas time cards are accepted rather than when the report is printed. That\u2019 s \ufb01ne, but the names\nof the functions ought to re\ufb02ect this. For example, there should be a computeRunning-\nTotalOfHours function in the timecard module. \nG18: Inappropriate Static\nMath.max(double a, double b) is a good static method. It does not operate on a single\ninstance; indeed, it would be silly to have to say new Math().max(a,b) or even a.max(b).\nAll the data that max uses comes from its two arguments, and not from any \u201cowning\u201d\nobject. More to the point, there is almost no chance that we\u2019 d want Math.max to be\npolymorphic.\nSometimes, however, we write static functions that should not be static. For example,\nconsider:\nHourlyPayCalculator.calculatePay(employee, overtimeRate). \nAgain, this seems like a reasonable static function. It doesn\u2019t operate on any particular\nobject and gets all it\u2019 s data from it\u2019 s arguments. However, there is a reasonable chance that\nwe\u2019ll want this function to be polymorphic. We may wish to implement several different\nalgorithms for calculating hourly pay, for example, OvertimeHourlyPayCalculator and\nStraightTimeHourlyPayCalculator. So in this case the function should not be static. It\nshould be a nonstatic member function of Employee.\nIn general you should prefer nonstatic methods to static methods. When in doubt,\nmake the function nonstatic. If you really want a function to be static, make sure that there\nis no chance that you\u2019ll want it to behave polymorphically.\nG19: Use Explanatory V ariables\nKent Beck wrote about this in his great book Smalltalk Best Practice Patterns8 and again\nmore recently in his equally great book Implementation Patterns.9 One of the more power-\nful ways to make a program readable is to break the calculations up into intermediate val-\nues that are held in variables with meaningful names. \n8. [Beck97], p. 108.\n9. [Beck07].", "297General\nConsider this example from FitNesse:\nMatcher match = headerPattern.matcher(line);\nif(match.find()){\n  String key = match.group(1);\n  String value = match.group(2);  headers.put(key.toLowerCase(), value);}\nThe simple use of explanatory variables makes it clear that the \ufb01rst matched group is\nthe key, and the second matched group is the value.\nIt is hard to overdo this. More explanatory variables are generally better than fewer. It\nis remarkable how an opaque module can suddenly become transparent simply by break-\ning the calculations up into well-named intermediate values.\nG20: Function Names Should Say What They Do\nLook at this code:\nDate newDate = date.add(5); \nWould you expect this to add \ufb01ve days to the date? Or is it weeks, or hours? Is the date\ninstance changed or does the function just return a new Date without changing the old one?\nYou can\u2019t tell from the call what the function does.\nIf the function adds \ufb01ve days to the date and changes the date, then it should be called\naddDaysTo or increaseByDays. If, on the other hand, the function returns a new date that is\n\ufb01ve days later but does not change the date instance, it should be called daysLater or\ndaysSince.\nIf you have to look at the implementation (or documentation) of the function to know\nwhat it does, then you should work to \ufb01nd a better name or rearrange the functionality so\nthat it can be placed in functions with better names.\nG21: Understand the Algorithm\nLots of very funny code is written because people don\u2019t take the time to understand the\nalgorithm. They get something to work by plugging in enough if statements and \ufb02ags,\nwithout really stopping to consider what is really going on. \nProgramming is often an exploration. Y ou think you know the right algorithm for\nsomething, but then you wind up \ufb01ddling with it, prodding and poking at it, until you get it\nto \u201cwork.\u201d How do you know it \u201cworks\u201d? Because it passes the test cases you can think of.\nThere is nothing wrong with this approach. Indeed, often it is the only way to get a\nfunction to do what you think it should. However, it is not suf\ufb01cient to leave the quotation\nmarks around the word \u201cwork.\u201d", "298 Chapter 17: Smells and Heuristics\nBefore you consider yourself to be done with a function, make sure you understand\nhow it works. It is not good enough that it passes all the tests. Y ou must know10 that the\nsolution is correct. \nOften the best way to gain this knowledge and understanding is to refactor the func-\ntion into something that is so clean and expressive that it is obvious how it works.\nG22: Make Logical Dependencies Physical\nIf one module depends upon another, that dependency should be physical, not just logical.\nThe dependent module should not make assumptions (in other words, logical dependen-\ncies) about the module it depends upon. Rather it should explicitly ask that module for all\nthe information it depends upon.\nFor example, imagine that you are writing a function that prints a plain text report of\nhours worked by employees. One class named HourlyReporter gathers all the data into a\nconvenient form and then passes it to HourlyReportFormatter to print it. (See Listing 17-1.)\n10. There is a difference between knowing how the code works and knowing whether the algorithm will do the job required of it. \nBeing unsure that an algorithm is appropriate is often a fact of life. Being unsure what your code does is just laziness.\nListing 17-1 \nHourlyReporter.java\npublic class HourlyReporter {\n  private HourlyReportFormatter formatter;  private List<LineItem> page;\n  private final int PAGE_SIZE = 55;\n  public HourlyReporter(HourlyReportFormatter formatter) {\n    this.formatter = formatter;    page = new ArrayList<LineItem>();\n  }\n  public void generateReport(List<HourlyEmployee> employees) {\n    for (HourlyEmployee e : employees) {\n      addLineItemToPage(e);\n      if (page.size() == PAGE_SIZE)        printAndClearItemList();    }    if (page.size() > 0)\n      printAndClearItemList();\n  }\n  private void printAndClearItemList() {\n    formatter.format(page);    page.clear();  }\n  private void addLineItemToPage(HourlyEmployee e) {\n    LineItem item = new LineItem();    item.name = e.getName();    item.hours = e.getTenthsWorked() / 10;", "299General\nThis code has a logical dependency that has not been physicalized. Can you spot it? It\nis the constant PAGE_SIZE. Why should the HourlyReporter know the size of the page? Page\nsize should be the responsibility of the HourlyReportFormatter.\nThe fact that P AGE_SIZE is declared in HourlyReporter represents a misplaced\nresponsibility [G17] that causes HourlyReporter to assume that it knows what the page size\nought to be. Such an assumption is a logical dependency. HourlyReporter depends on the\nfact that HourlyReportFormatter can deal with page sizes of 55. If some implementation of\nHourlyReportFormatter could not deal with such sizes, then there would be an error.\nWe can physicalize this dependency by creating a new method in HourlyReport-\nFormatter named getMaxPageSize(). HourlyReporter will then call that function rather than\nusing the PAGE_SIZE constant.\nG23: Prefer Polymorphism to If/Else or Switch/Case\nThis might seem a strange suggestion given the topic of Chapter 6. After all, in that chapter I\nmake the point that switch statements are probably appropriate in the parts of the system\nwhere adding new functions is more likely than adding new types.\nFirst, most people use switch statements because it\u2019 s the obvious brute force solution,\nnot because it\u2019 s the right solution for the situation. So this heuristic is here to remind us to\nconsider polymorphism before using a switch. \nSecond, the cases where functions are more volatile than types are relatively rare. So\nevery switch statement should be suspect. \nI use the following \u201cONE SWITCH\u201d rule: There may be no more than one switch state-\nment for a given type of selection. The cases in that switch statement must create polymor-\nphic objects that take the place of other such switch statements in the rest of the system.\nG24: F ollow Standard Conventions\nEvery team should follow a coding standard based on common industry norms. This cod-\ning standard should specify things like where to declare instance variables; how to name\nclasses, methods, and variables; where to put braces; and so on. The team should not need\na document to describe these conventions because their code provides the examples.\n    item.tenths = e.getTenthsWorked() % 10;\n    page.add(item);  }\n  public class LineItem {\n    public String name;    public int hours;\n    public int tenths;\n  }}\nListing 17-1 (continued)\nHourlyReporter.java", "300 Chapter 17: Smells and Heuristics\nEveryone on the team should follow these conventions. This means that each team\nmember must be mature enough to realize that it doesn\u2019t matter a whit where you put your\nbraces so long as you all agree on where to put them. \nIf you would like to know what conventions I follow, you\u2019ll see them in the refactored\ncode in Listing B-7 on page 394, through Listing B-14.\nG25: Replace Magic Numbers with Named Constants\nThis is probably one of the oldest rules in software development. I remember reading it in the\nlate sixties in introductory COBOL, FORTRAN, and PL/1 manuals. In general it is a bad\nidea to have raw numbers in your code. Y ou should hide them behind well-named constants. \nFor example, the number 86,400 should be hidden behind the constant\nSECONDS_PER_DAY. If you are printing 55 lines per page, then the constant 55 should be hid-\nden behind the constant LINES_PER_PAGE.\nSome constants are so easy to recognize that they don\u2019t always need a named constant\nto hide behind so long as they are used in conjunction with very self-explanatory code. For\nexample:\ndouble milesWalked = feetWalked/5280.0;\nint dailyPay = hourlyRate * 8;double circumference = radius * Math.PI * 2;\nDo we really need the constants FEET_PER_MILE, WORK_HOURS_PER_DAY, and TWO in the\nabove examples? Clearly, the last case is absurd. There are some formulae in which con-\nstants are simply better written as raw numbers. Y ou might quibble about the\nWORK_HOURS_PER_DAY case because the laws or conventions might change. On the other\nhand, that formula reads so nicely with the 8 in it that I would be reluctant to add 17 extra\ncharacters to the readers\u2019 burden. And in the FEET_PER_MILE case, the number 5280 is so\nvery well known and so unique a constant that readers would recognize it even if it stood\nalone on a page with no context surrounding it. \nConstants like 3.141592653589793 are also very well known and easily recognizable.\nHowever, the chance for error is too great to leave them raw. Every time someone sees\n3.1415927535890793, they know that it is p, and so they fail to scrutinize it. (Did you\ncatch the single-digit error?) We also don\u2019t want people using 3.14, 3.14159, 3.142, and so\nforth. Therefore, it is a good thing that Math.PI has already been de\ufb01ned for us. \nThe term \u201cMagic Number\u201d does not apply only to numbers. It applies to any token\nthat has a value that is not self-describing. For example:\nassertEquals(7777, Employee.find(\u201cJohn Doe\u201d).employeeNumber());\nThere are two magic numbers in this assertion. The \ufb01rst is obviously 7777, though\nwhat it might mean is not obvious. The second magic number is \"John Doe,\" and again the\nintent is not clear.\nIt turns out that \"John Doe\" is the name of employee #7777 in a well-known test data-\nbase created by our team. Everyone in the team knows that when you connect to this", "301General\ndatabase, it will have several employees already cooked into it with well-known values\nand attributes. It also turns out that \"John Doe\" represents the sole hourly employee in\nthat test database. So this test should really read:\nassertEquals(\n  HOURLY_EMPLOYEE_ID,  Employee.find(HOURLY_EMPLOYEE_NAME).employeeNumber());\nG26: Be Precise\nExpecting the \ufb01rst match to be the only match to a query is probably naive. Using \ufb02oating\npoint numbers to represent currency is almost criminal. Avoiding locks and/or transaction\nmanagement because you don\u2019t think concurrent update is likely is lazy at best. Declaring\na variable to be an ArrayList when a List will due is overly constraining. Making all vari-\nables protected by default is not constraining enough. \nWhen you make a decision in your code, make sure you make it precisely. Know why\nyou have made it and how you will deal with any exceptions. Don\u2019t be lazy about the pre-\ncision of your decisions. If you decide to call a function that might return null, make sure\nyou check for null. If you query for what you think is the only record in the database,\nmake sure your code checks to be sure there aren\u2019t others. If you need to deal with cur-\nrency, use integers11 and deal with rounding appropriately. If there is the possibility of\nconcurrent update, make sure you implement some kind of locking mechanism. \nAmbiguities and imprecision in code are either a result of disagreements or laziness.\nIn either case they should be eliminated. \nG27: Structure over Convention\nEnforce design decisions with structure over convention. Naming conventions are good,\nbut they are inferior to structures that force compliance. For example, switch/cases with\nnicely named enumerations are inferior to base classes with abstract methods. No one is\nforced to implement the switch/case statement the same way each time; but the base\nclasses do enforce that concrete classes have all abstract methods implemented. \nG28: Encapsulate Conditionals\nBoolean logic is hard enough to understand without having to see it in the context of an if\nor while statement. Extract functions that explain the intent of the conditional.\nFor example:\nif (shouldBeDeleted(timer))\nis preferable to\nif (timer.hasExpired() && !timer.isRecurrent())\n11. Or better yet, a Money class that uses integers.", "302 Chapter 17: Smells and Heuristics\nG29: Avoid Negative Conditionals\nNegatives are just a bit harder to understand than positives. So, when possible, condition-\nals should be expressed as positives. For example:\nif (buffer.shouldCompact())\nis preferable to\nif (!buffer.shouldNotCompact())\nG30: Functions Should Do One Thing\nIt is often tempting to create functions that have multiple sections that perform a series of\noperations. Functions of this kind do more than one thing, and should be converted into\nmany smaller functions, each of which does one thing.\nFor example:\n  public void pay() {\n    for (Employee e : employees) {      if (e.isPayday()) {\n        Money pay = e.calculatePay();\n        e.deliverPay(pay);      }    }  }\nThis bit of code does three things. It loops over all the employees, checks to see whether\neach employee ought to be paid, and then pays the employee. This code would be better\nwritten as:\n  public void pay() {\n    for (Employee e : employees)      payIfNecessary(e);\n  }\n  private void payIfNecessary(Employee e) {\n    if (e.isPayday())      calculateAndDeliverPay(e);\n  }\n  private void calculateAndDeliverPay(Employee e) {\n    Money pay = e.calculatePay();    e.deliverPay(pay);\n  }\nEach of these functions does one thing. (See \u201cDo One Thing\u201d on page 35.)\nG31: Hidden Temporal Couplings\nTemporal couplings are often necessary, but you should not hide the coupling. Structure\nthe arguments of your functions such that the order in which they should be called is obvi-\nous. Consider the following:", "303General\npublic class MoogDiver {\n  Gradient gradient;  List<Spline> splines;\n  public void dive(String reason) {\n    saturateGradient();    reticulateSplines();    diveForMoog(reason);  }\n  ...\n}\nThe order of the three functions is important. Y ou must saturate the gradient before you\ncan reticulate the splines, and only then can you dive for the moog. Unfortunately, the code\ndoes not enforce this temporal coupling. Another programmer could call reticulate-\nSplines before saturateGradient was called, leading to an UnsaturatedGradientException.\nA better solution is:\npublic class MoogDiver {\n  Gradient gradient;  List<Spline> splines;\n  public void dive(String reason) {\n    Gradient gradient = saturateGradient();    List<Spline> splines = reticulateSplines(gradient);    diveForMoog(splines, reason);\n  }\n  ...}\nThis exposes the temporal coupling by creating a bucket brigade. Each function produces a\nresult that the next function needs, so there is no reasonable way to call them out of order.\nY ou might complain that this increases the complexity of the functions, and you\u2019 d be\nright. But that extra syntactic complexity exposes the true temporal complexity of the situation. \nNote that I left the instance variables in place. I presume that they are needed by pri-\nvate methods in the class. Even so, I want the arguments in place to make the temporal\ncoupling explicit.\nG32: Don\u2019t Be Arbitrary\nHave a reason for the way you structure your code, and make sure that reason is communi-\ncated by the structure of the code. If a structure appears arbitrary, others will feel empowered\nto change it. If a structure appears consistently throughout the system, others will use it\nand preserve the convention. For example, I was recently merging changes to FitNesse and\ndiscovered that one of our committers had done this:\npublic class AliasLinkWidget extends ParentWidget\n{  public static class VariableExpandingWidgetRoot {\n    ...\n  ...\n}", "304 Chapter 17: Smells and Heuristics\nThe problem with this was that VariableExpandingWidgetRoot had no need to be\ninside the scope of AliasLinkWidget . Moreover, other unrelated classes made use of\nAliasLinkWidget.VariableExpandingWidgetRoot . These classes had no need to know\nabout AliasLinkWidget .\nPerhaps the programmer had plopped the VariableExpandingWidgetRoot into\nAliasWidget as a matter of convenience, or perhaps he thought it really needed to be\nscoped inside AliasWidget. Whatever the reason, the result wound up being arbitrary. Pub-\nlic classes that are not utilities of some other class should not be scoped inside another\nclass. The convention is to make them public at the top level of their package.\nG33: Encapsulate Boundary Conditions\nBoundary conditions are hard to keep track of. Put the processing for them in one place.\nDon\u2019t let them leak all over the code. We don\u2019t want swarms of +1s and -1s scattered hither\nand yon. Consider this simple example from FIT:\nif(level + 1 < tags.length)\n{  parts = new Parse(body, tags, level + 1, offset + endTag);\n  body = null;\n}\nNotice that level+1 appears twice. This is a boundary condition that should be encapsu-\nlated within a variable named something like nextLevel.\nint nextLevel = level + 1;\nif(nextLevel < tags.length){\nparts = new Parse(body, tags, nextLevel, offset + endTag);\nbody = null;\n}\nG34: Functions Should Descend Only One Level of Abstraction\nThe statements within a function should all be written at the same level of abstraction,\nwhich should be one level below the operation described by the name of the function. This\nmay be the hardest of these heuristics to interpret and follow. Though the idea is plain\nenough, humans are just far too good at seamlessly mixing levels of abstraction. Consider,\nfor example, the following code taken from FitNesse:\npublic String render() throws Exception\n{\nStringBuffer html = new StringBuffer(\"<hr\");\nif(size > 0)\n  html.append(\" size=\\\"\").append(size + 1).append(\"\\\"\");html.append(\">\");\nreturn html.toString();\n}", "305General\nA moment\u2019 s study and you can see what\u2019 s going on. This function constructs the HTML\ntag that draws a horizontal rule across the page. The height of that rule is speci\ufb01ed in the\nsize variable. \nNow look again. This method is mixing at least two levels of abstraction. The \ufb01rst is\nthe notion that a horizontal rule has a size. The second is the syntax of the HR tag itself.\nThis code comes from the HruleWidget module in FitNesse. This module detects a row of\nfour or more dashes and converts it into the appropriate HR tag. The more dashes, the\nlarger the size.\nI refactored this bit of code as follows. Note that I changed the name of the size \ufb01eld\nto re\ufb02ect its true purpose. It held the number of extra dashes.\npublic String render() throws Exception\n{\nHtmlTag hr = new HtmlTag(\"hr\");\nif (extraDashes > 0)\nhr.addAttribute(\"size\", hrSize(extraDashes));\nreturn hr.html();\n}\nprivate String hrSize(int height)\n{\nint hrSize = height + 1;return String.format(\"%d\", hrSize);\n}\nThis change separates the two levels of abstraction nicely. The render function simply con-\nstructs an HR tag, without having to know anything about the HTML syntax of that tag.\nTheHtmlTag module takes care of all the nasty syntax issues. \nIndeed, by making this change I caught a subtle error. The original code did not put\nthe closing slash on the HR tag, as the XHTML standard would have it. (In other words, it\nemitted<hr> instead of <hr/>.) The HtmlTag module had been changed to conform to\nXHTML long ago.\nSeparating levels of abstraction is one of the most important functions of refactor-\ning, and it\u2019 s one of the hardest to do well. As an example, look at the code below. This\nwas my \ufb01rst attempt at separating the abstraction levels in the HruleWidget.render\nmethod.\npublic String render() throws Exception\n{\nHtmlTag hr = new HtmlTag(\"hr\");\nif (size > 0) {\nhr.addAttribute(\"size\", \"\"+(size+1));\n}return hr.html();\n}\nMy goal, at this point, was to create the necessary separation and get the tests to pass.\nI accomplished that goal easily, but the result was a function that still had mixed levels\nof abstraction. In this case the mixed levels were the construction of the HR tag and the", "306 Chapter 17: Smells and Heuristics\ninterpretation and formatting of the size variable. This points out that when you break a\nfunction along lines of abstraction, you often uncover new lines of abstraction that were\nobscured by the previous structure. \nG35: Keep Con\ufb01gurable Data at High Levels\nIf you have a constant such as a default or con\ufb01guration value that is known and expected\nat a high level of abstraction, do not bury it in a low-level function. Expose it as an argu-\nment to that low-level function called from the high-level function. Consider the following\ncode from FitNesse:\npublic static void main(String[] args) throws Exception\n{  Arguments arguments = parseCommandLine(args);\n  ...\n}\npublic class Arguments\n{\n  public static final String DEFAULT_PATH = \".\";\n  public static final String DEFAULT_ROOT = \"FitNesseRoot\";  public static final int DEFAULT_PORT = 80;  public static final int DEFAULT_VERSION_DAYS = 14;\n  ...\n}\nThe command-line arguments are parsed in the very \ufb01rst executable line of FitNesse. The\ndefault values of those arguments are speci\ufb01ed at the top of the Argument class. Y ou don\u2019t\nhave to go looking in low levels of the system for statements like this one:\nif (arguments.port == 0) // use 80 by default\nThe con\ufb01guration constants reside at a very high level and are easy to change. They get\npassed down to the rest of the application. The lower levels of the application do not own\nthe values of these constants.\nG36: Avoid Transitive Navigation\nIn general we don\u2019t want a single module to know much about its collaborators. More spe-\nci\ufb01cally, if A collaborates with B, and B collaborates with C, we don\u2019t want modules that use\nA to know about C. (For example, we don\u2019t want a.getB().getC().doSomething();.)\nThis is sometimes called the Law of Demeter. The Pragmatic Programmers call it\n\u201cWriting Shy Code.\u201d12 In either case it comes down to making sure that modules know\nonly about their immediate collaborators and do not know the navigation map of the whole\nsystem.\nIf many modules used some form of the statement a.getB().getC(), then it would be\ndif\ufb01cult to change the design and architecture to interpose a Q between B and C. Y ou\u2019 d\n12. [PRAG], p. 138.", "307Java\nhave to \ufb01nd every instance of a.getB().getC() and convert it to a.getB().getQ().getC().\nThis is how architectures become rigid. Too many modules know too much about the\narchitecture.\nRather we want our immediate collaborators to offer all the services we need. We\nshould not have to roam through the object graph of the system, hunting for the method we\nwant to call. Rather we should simply be able to say:\nmyCollaborator.doSomething().\nJava\nJ1: Avoid Long Import Lists by Using Wildcards\nIf you use two or more classes from a package, then import the whole package with\nimport package.*;\nLong lists of imports are daunting to the reader. We don\u2019t want to clutter up the tops of our\nmodules with 80 lines of imports. Rather we want the imports to be a concise statement\nabout which packages we collaborate with.\nSpeci\ufb01c imports are hard dependencies, whereas wildcard imports are not. If you spe-\nci\ufb01cally import a class, then that class must exist. But if you import a package with a wild-\ncard, no particular classes need to exist. The import statement simply adds the package to\nthe search path when hunting for names. So no true dependency is created by such\nimports, and they therefore serve to keep our modules less coupled.\nThere are times when the long list of speci\ufb01c imports can be useful. For example, if\nyou are dealing with legacy code and you want to \ufb01nd out what classes you need to build\nmocks and stubs for, you can walk down the list of speci\ufb01c imports to \ufb01nd out the true\nquali\ufb01ed names of all those classes and then put the appropriate stubs in place. However,\nthis use for speci\ufb01c imports is very rare. Furthermore, most modern IDEs will allow you\nto convert the wildcarded imports to a list of speci\ufb01c imports with a single command. So\neven in the legacy case it\u2019 s better to import wildcards.\nWildcard imports can sometimes cause name con\ufb02icts and ambiguities. T wo classes\nwith the same name, but in different packages, will need to be speci\ufb01cally imported, or at\nleast speci\ufb01cally quali\ufb01ed when used. This can be a nuisance but is rare enough that using\nwildcard imports is still generally better than speci\ufb01c imports.\nJ2: Don\u2019t Inherit Constants\nI have seen this several times and it always makes me grimace. A programmer puts some\nconstants in an interface and then gains access to those constants by inheriting that inter-\nface. Take a look at the following code:\npublic class HourlyEmployee extends Employee {\n  private int tenthsWorked;  private double hourlyRate;", "308 Chapter 17: Smells and Heuristics\n  public Money calculatePay() {\n    int straightTime = Math.min(tenthsWorked, TENTHS_PER_WEEK);    int overTime = tenthsWorked - straightTime;\n    return new Money(\n      hourlyRate * (tenthsWorked + OVERTIME_RATE * overTime)    );  }  ...}\nWhere did the constants TENTHS_PER_WEEK and OVERTIME_RATE come from? They might have\ncome from class Employee; so let\u2019 s take a look at that: \npublic abstract class Employee implements PayrollConstants {\n  public abstract boolean isPayday();  public abstract Money calculatePay();\n  public abstract void deliverPay(Money pay);\n}\nNope, not there. But then where? Look closely at class Employee. It implements\nPayrollConstants.\npublic interface PayrollConstants {  public static final int TENTHS_PER_WEEK = 400;  public static final double OVERTIME_RATE = 1.5;\n}\nThis is a hideous practice! The constants are hidden at the top of the inheritance hierarchy.\nIck! Don\u2019t use inheritance as a way to cheat the scoping rules of the language. Use a static\nimport instead.\nimport static PayrollConstants.*;\npublic class HourlyEmployee extends Employee {\n  private int tenthsWorked;\n  private double hourlyRate;\n  public Money calculatePay() {\n    int straightTime = Math.min(tenthsWorked, TENTHS_PER_WEEK);\n    int overTime = tenthsWorked - straightTime;\n    return new Money(      hourlyRate * (tenthsWorked + OVERTIME_RATE * overTime)    );\n  }\n  ...}\nJ3: Constants versus Enums\nNow that enums have been added to the language (Java 5), use them! Don\u2019t keep using the\nold trick of public static final ints. The meaning of ints can get lost. The meaning of\nenums cannot, because they belong to an enumeration that is named.\nWhat\u2019 s more, study the syntax for enums carefully. They can have methods and \ufb01elds.\nThis makes them very powerful tools that allow much more expression and \ufb02exibility than\nints. Consider this variation on the payroll code:", "309Names\npublic class HourlyEmployee extends Employee {\n  private int tenthsWorked;\nHourlyPayGrade grade;\n  public Money calculatePay() {\n    int straightTime = Math.min(tenthsWorked, TENTHS_PER_WEEK);    int overTime = tenthsWorked - straightTime;    return new Money(\ngrade.rate() * (tenthsWorked + OVERTIME_RATE * overTime)\n    );  }  ...}\npublic enum HourlyPayGrade {\n  APPRENTICE {    public double rate() {      return 1.0;\n    }\n  },  LEUTENANT_JOURNEYMAN {    public double rate() {      return 1.2;\n    }\n  },  JOURNEYMAN {    public double rate() {      return 1.5;\n    }\n  },  MASTER {    public double rate() {\n      return 2.0;\n    }  };\n  public abstract double rate();\n}\nNames\nN1: Choose Descriptive Names\nDon\u2019t be too quick to choose a name. Make sure the name is descriptive. Remember that\nmeanings tend to drift as software evolves, so frequently reevaluate the appropriateness of\nthe names you choose. \nThis is not just a \u201cfeel-good\u201d recommendation. Names in software are 90 percent of\nwhat make software readable. Y ou need to take the time to choose them wisely and keep\nthem relevant. Names are too important to treat carelessly.\nConsider the code below. What does it do? If I show you the code with well-chosen\nnames, it will make perfect sense to you, but like this it\u2019 s just a hodge-podge of symbols\nand magic numbers.", "310 Chapter 17: Smells and Heuristics\npublic int x() {\n    int q = 0;    int z = 0;\n    for (int kk = 0; kk < 10; kk++) {\n      if (l[z] == 10)      {        q += 10 + (l[z + 1] + l[z + 2]);        z += 1;      }\n      else if (l[z] + l[z + 1] == 10)\n      {        q += 10 + l[z + 2];        z += 2;      } else {        q += l[z] + l[z + 1];        z += 2;      }    }    return q;\n  }\nHere is the code the way it should be written. This snippet is actually less complete\nthan the one above. Y et you can infer immediately what it is trying to do, and you could\nvery likely write the missing functions based on that inferred meaning. The magic num-\nbers are no longer magic, and the structure of the algorithm is compellingly descriptive.\n  public int score() {\n    int score = 0;    int frame = 0;\n    for (int frameNumber = 0; frameNumber < 10; frameNumber++) {\n      if (isStrike(frame)) {        score += 10 + nextTwoBallsForStrike(frame);        frame += 1;      } else if (isSpare(frame)) {\n        score += 10 + nextBallForSpare(frame);\n        frame += 2;      } else {        score += twoBallsInFrame(frame);\n        frame += 2;\n      }    }    return score;  }\nThe power of carefully chosen names is that they overload the structure of the code\nwith description. That overloading sets the readers\u2019 expectations about what the other\nfunctions in the module do. Y ou can infer the implementation of isStrike() by looking at\nthe code above. When you read the isStrike method, it will be \u201cpretty much what you\nexpected.\u201d13\n  private boolean isStrike(int frame) {\n    return rolls[frame] == 10;  }\n13. See Ward Cunningham\u2019 s quote on page 11.", "311Names\nN2: Choose Names at the Appropriate Level of Abstraction\nDon\u2019t pick names that communicate implementation; choose names the re\ufb02ect the level of\nabstraction of the class or function you are working in. This is hard to do. Again, people\nare just too good at mixing levels of abstractions. Each time you make a pass over your\ncode, you will likely \ufb01nd some variable that is named at too low a level. Y ou should take\nthe opportunity to change those names when you \ufb01nd them. Making code readable\nrequires a dedication to continuous improvement. Consider the Modem interface below:\npublic interface Modem {\n  boolean dial(String phoneNumber);  boolean disconnect();\n  boolean send(char c);\n  char recv();  String getConnectedPhoneNumber();}\nAt \ufb01rst this looks \ufb01ne. The functions all seem appropriate. Indeed, for many applications\nthey are. But now consider an application in which some modems aren\u2019t connected by\ndialling. Rather they are connected permanently by hard wiring them together (think of the\ncable modems that provide Internet access to most homes nowadays). Perhaps some are\nconnected by sending a port number to a switch over a USB connection. Clearly the notion\nof phone numbers is at the wrong level of abstraction. A better naming strategy for this\nscenario might be:\npublic interface Modem {\n  boolean connect(String connectionLocator);  boolean disconnect();\n  boolean send(char c);\n  char recv();  String getConnectedLocator();}\nNow the names don\u2019t make any commitments about phone numbers. They can still be used\nfor phone numbers, or they could be used for any other kind of connection strategy. \nN3: Use Standard Nomenclature Where Possible\nNames are easier to understand if they are based on existing convention or usage. For exam-\nple, if you are using the DECORATOR pattern, you should use the word Decorator in the names\nof the decorating classes. For example, AutoHangupModemDecoratormight be the name of a\nclass that decorates a Modem with the ability to automatically hang up at the end of a session.\nPatterns are just one kind of standard. In Java, for example, functions that convert\nobjects to string representations are often named toString. It is better to follow conven-\ntions like these than to invent your own. \nTeams will often invent their own standard system of names for a particular project.\nEric Evans refers to this as a ubiquitous language for the project.14 Y our code should use\n14. [DDD].", "312 Chapter 17: Smells and Heuristics\nthe terms from this language extensively. In short, the more you can use names that are\noverloaded with special meanings that are relevant to your project, the easier it will be for\nreaders to know what your code is talking about.\nN4: Unambiguous Names\nChoose names that make the workings of a function or variable unambiguous. Consider\nthis example from FitNesse:\nprivate String doRename() throws Exception\n{  if(refactorReferences)\n    renameReferences();\n  renamePage();\n  pathToRename.removeNameFromEnd();\n  pathToRename.addNameToEnd(newName);\n  return PathParser.render(pathToRename);\n}\nThe name of this function does not say what the function does except in broad and vague\nterms. This is emphasized by the fact that there is a function named renamePage inside the\nfunction named doRename! What do the names tell you about the difference between the\ntwo functions? Nothing.\nA better name for that function is renamePageAndOptionallyAllReferences. This may\nseem long, and it is, but it\u2019 s only called from one place in the module, so it\u2019 s explanatory\nvalue outweighs the length. \nN5: Use Long Names for Long Scopes\nThe length of a name should be related to the length of the scope. Y ou can use very short\nvariable names for tiny scopes, but for big scopes you should use longer names.\nVariable names like i and j are just \ufb01ne if their scope is \ufb01ve lines long. Consider this\nsnippet from the old standard \u201cBowling Game\u201d:\nprivate void rollMany(int n, int pins)\n{  for (int i=0; i<n; i++)\n    g.roll(pins);\n}\nThis is perfectly clear and would be obfuscated if the variable i were replaced with some-\nthing annoying like rollCount. On the other hand, variables and functions with short names\nlose their meaning over long distances. So the longer the scope of the name, the longer and\nmore precise the name should be.\nN6: Avoid Encodings\nNames should not be encoded with type or scope information. Pre\ufb01xes such as m_ or f\nare useless in today\u2019 s environments. Also project and/or subsystem encodings such as", "313Tests\nvis_ (for visual imaging system) are distracting and redundant. Again, today\u2019 s environ-\nments provide all that information without having to mangle the names. Keep your\nnames free of Hungarian pollution.\nN7: Names Should Describe Side-Effects\nNames should describe everything that a function, variable, or class is or does. Don\u2019t hide\nside effects with a name. Don\u2019t use a simple verb to describe a function that does more\nthan just that simple action. For example, consider this code from TestNG:\npublic ObjectOutputStream getOos() throws IOException {\nif (m_oos == null) {\nm_oos = new ObjectOutputStream(m_socket.getOutputStream());\n}\nreturn m_oos;\n}\nThis function does a bit more than get an \u201coos\u201d; it creates the \u201coos\u201d if it hasn\u2019t been cre-\nated already. Thus, a better name might be createOrReturnOos.\nTests\nT1: Insuf\ufb01cient Tests\nHow many tests should be in a test suite? Unfortunately, the metric many programmers use\nis \u201cThat seems like enough.\u201d A test suite should test everything that could possibly break.\nThe tests are insuf\ufb01cient so long as there are conditions that have not been explored by the\ntests or calculations that have not been validated.\nT2: Use a Coverage Tool!\nCoverage tools reports gaps in your testing strategy. They make it easy to \ufb01nd modules,\nclasses, and functions that are insuf\ufb01ciently tested. Most IDEs give you a visual indication,\nmarking lines that are covered in green and those that are uncovered in red. This makes it\nquick and easy to \ufb01nd if or catch statements whose bodies haven\u2019t been checked.\nT3: Don\u2019t Skip Trivial Tests\nThey are easy to write and their documentary value is higher than the cost to produce\nthem.\nT4: An Ignored Test Is a Question about an Ambiguity\nSometimes we are uncertain about a behavioral detail because the requirements are\nunclear. We can express our question about the requirements as a test that is commented\nout, or as a test that annotated with @Ignore. Which you choose depends upon whether the\nambiguity is about something that would compile or not.", "314 Chapter 17: Smells and Heuristics\nT5: Test Boundary Conditions\nTake special care to test boundary conditions. We often get the middle of an algorithm\nright but misjudge the boundaries.\nT6: Exhaustively Test Near Bugs\nBugs tend to congregate. When you \ufb01nd a bug in a function, it is wise to do an exhaustive\ntest of that function. Y ou\u2019ll probably \ufb01nd that the bug was not alone.\nT7: Patterns of F ailure Are Revealing\nSometimes you can diagnose a problem by \ufb01nding patterns in the way the test cases fail.\nThis is another argument for making the test cases as complete as possible. Complete test\ncases, ordered in a reasonable way, expose patterns. \nAs a simple example, suppose you noticed that all tests with an input larger than \ufb01ve\ncharacters failed? Or what if any test that passed a negative number into the second argu-\nment of a function failed? Sometimes just seeing the pattern of red and green on the test\nreport is enough to spark the \u201cAha!\u201d that leads to the solution. Look back at page 267 to\nsee an interesting example of this in the SerialDate example. \nT8: Test Coverage Patterns Can Be Revealing\nLooking at the code that is or is not executed by the passing tests gives clues to why the\nfailing tests fail.\nT9: Tests Should Be F ast\nA slow test is a test that won\u2019t get run. When things get tight, it\u2019 s the slow tests that will be\ndropped from the suite. So do what you must to keep your tests fast.\nConclusion\nThis list of heuristics and smells could hardly be said to be complete. Indeed, I\u2019m not sure\nthat such a list can ever be complete. But perhaps completeness should not be the goal,\nbecause what this list does do is imply a value system. \nIndeed, that value system has been the goal, and the topic, of this book. Clean code is\nnot written by following a set of rules. Y ou don\u2019t become a software craftsman by learn-\ning a list of heuristics. Professionalism and craftsmanship come from values that drive\ndisciplines.", "315Bibliography\nBibliography\n[Refactoring]:  Refactoring: Improving the Design of Existing Code, Martin Fowler et al.,\nAddison-Wesley, 1999. \n[PRAG]:  The Pragmatic Programmer , Andrew Hunt, Dave Thomas, Addison-Wesley,\n2000.\n[GOF]:  Design Patterns: Elements of Reusable Object Oriented Software, Gamma et al.,\nAddison-Wesley, 1996.\n[Beck97]:  Smalltalk Best Practice Patterns, Kent Beck, Prentice Hall, 1997.\n[Beck07]:  Implementation Patterns, Kent Beck, Addison-Wesley, 2008.\n[PPP]:  Agile Software Development: Principles, Patterns, and Practices, Robert C. Martin,\nPrentice Hall, 2002.\n[DDD]:  Domain Driven Design, Eric Evans, Addison-Wesley, 2003.", "This page intentionally left blank", "317\nAppendix A\nConcurrency II\nby Brett L. Schuchert\nThis appendix supports and ampli\ufb01es the Concurrency chapter on page 177. It is written\nas a series of independent topics and you can generally read them in any order. There is\nsome duplication between sections to allow for such reading.\nClient/Server Example\nImagine a simple client/server application. A server sits and waits listening on a socket for\na client to connect. A client connects and sends a request.\nThe Server\nHere is a simpli\ufb01ed version of a server application. Full source for this example is avail-\nable starting on page 343, Client/Server Nonthreaded.\nServerSocket serverSocket = new ServerSocket(8009);\nwhile (keepProcessing) {\n    try {        Socket socket = serverSocket.accept();\n        process(socket);\n    } catch (Exception e) {        handle(e);    }}", "318 Appendix A: Concurrency II\nThis simple application waits for a connection, processes an incoming message, and then\nagain waits for the next client request to come in. Here\u2019 s client code that connects to this\nserver:\nprivate void connectSendReceive(int i) {\n    try {        Socket socket = new Socket(\"localhost\", PORT);\n        MessageUtils.sendMessage(socket, Integer.toString(i));\n        MessageUtils.getMessage(socket);        socket.close();    } catch (Exception e) {        e.printStackTrace();\n    }\n}\nHow well does this client/server pair perform? How can we formally describe that perfor-\nmance? Here\u2019 s a test that asserts that the performance is \u201cacceptable\u201d:\n@Test(timeout = 10000)\npublic void shouldRunInUnder10Seconds() throws Exception {    Thread[] threads = createThreads();\n    startAllThreadsw(threads);\n    waitForAllThreadsToFinish(threads);}\nThe setup is left out to keep the example simple (see \u201cClientTest.java\u201d on page 344). This\ntest asserts that it should complete within 10,000 milliseconds.\nThis is a classic example of validating the throughput of a system. This system should\ncomplete a series of client requests in ten seconds. So long as the server can process each\nindividual client request in time, the test will pass.\nWhat happens if the test fails? Short of developing some kind of event polling loop,\nthere is not much to do within a single thread that will make this code any faster. Will\nusing multiple threads solve the problem? It might, but we need to know where the time is\nbeing spent. There are two possibilities:\n\u2022 I/O\u2014using a socket, connecting to a database, waiting for virtual memory swapping, \nand so on.\n\u2022 Processor\u2014numerical calculations, regular expression processing, garbage collection, \nand so on.\nSystems typically have some of each, but for a given operation one tends to dominate. If\nthe code is processor bound, more processing hardware can improve throughput, making\nour test pass. But there are only so many CPU cycles available, so adding threads to a\nprocessor-bound problem will not make it go faster. \nOn the other hand, if the process is I/O bound, then concurrency can increase ef\ufb01-\nciency. When one part of the system is waiting for I/O, another part can use that wait time\nto process something else, making more effective use of the available CPU.", "319Client/Server Example\nAdding Threading\nAssume for the moment that the performance test fails. How can we improve the through-\nput so that the performance test passes? If the process method of the server is I/O bound,\nthen here is one way to make the server use threads (just change the processMessage):\nvoid process(final Socket socket) {\n    if (socket == null)        return;\n    Runnable clientHandler = new Runnable() {\n        public void run() {            try {                String message = MessageUtils.getMessage(socket);\n                MessageUtils.sendMessage(socket, \"Processed: \" + message);\n                closeIgnoringException(socket);            } catch (Exception e) {                e.printStackTrace();            }\n        }\n    };\n    Thread clientConnection = new Thread(clientHandler);\n    clientConnection.start();\n}\nAssume that this change causes the test to pass;1 the code is complete, correct?\nServer Observations\nThe updated server completes the test successfully in just over one second. Unfortunately,\nthis solution is a bit naive and introduces some new problems.\nHow many threads might our server create? The code sets no limit, so the we could\nfeasibly hit the limit imposed by the Java Virtual Machine (JVM). For many simple sys-\ntems this may suf\ufb01ce. But what if the system is meant to support many users on the public\nnet? If too many users connect at the same time, the system might grind to a halt.\nBut set the behavioral problem aside for the moment. The solution shown has prob-\nlems of cleanliness and structure. How many responsibilities does the server code have? \n\u2022 Socket connection management\n\u2022 Client processing\n\u2022 Threading policy\n\u2022 Server shutdown policy\nUnfortunately, all these responsibilities live in the process function. In addition, the\ncode crosses many different levels of abstraction. So, small as the process function is, it\nneeds to be repartitioned.\n1. Y ou can verify that for yourself by trying out the before and after code. Review the nonthreaded code starting on page 343. \nReview the threaded code starting on page 346.", "320 Appendix A: Concurrency II\nThe server has several reasons to change; therefore it violates the Single Responsibility\nPrinciple. To keep concurrent systems clean, thread management should be kept to a few,\nwell-controlled places. What\u2019 s more, any code that manages threads should do nothing\nother than thread management. Why? If for no other reason than that tracking down con-\ncurrency issues is hard enough without having to unwind other nonconcurrency issues at\nthe same time. \nIf we create a separate class for each of the responsibilities listed above, including the\nthread management responsibility, then when we change the thread management strategy,\nthe change will impact less overall code and will not pollute the other responsibilities. This\nalso makes it much easier to test all the other responsibilities without having to worry\nabout threading. Here is an updated version that does just that:\npublic void run() {\n  while (keepProcessing) {   try {\n    ClientConnection clientConnection = connectionManager.awaitClient();\n    ClientRequestProcessor requestProcessor       = new ClientRequestProcessor(clientConnection);    clientScheduler.schedule(requestProcessor);    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  connectionManager.shutdown();\n}\nThis now focuses all things thread-related into one place, clientScheduler. If there are\nconcurrency problems, there is just one place to look:\npublic interface ClientScheduler {\n    void schedule(ClientRequestProcessor requestProcessor);} \nThe current policy is easy to implement:\npublic class ThreadPerRequestScheduler implements ClientScheduler {    public void schedule(final ClientRequestProcessor requestProcessor) {        Runnable runnable = new Runnable() {\n            public void run() {\n                requestProcessor.process();            }        };\n       Thread thread = new Thread(runnable);\n       thread.start();    }}\nHaving isolated all the thread management into a single place, it is much easier to change\nthe way we control threads. For example, moving to the Java 5 Executor framework\ninvolves writing a new class and plugging it in (Listing A-1).", "321Possible Paths of Execution\nConclusion\nIntroducing concurrency in this particular example demonstrates a way to improve the\nthroughput of a system and one way of validating that throughput through a testing frame-\nwork. Focusing all concurrency code into a small number of classes is an example of\napplying the Single Responsibility Principle. In the case of concurrent programming, this\nbecomes especially important because of its complexity.\nPossible Paths of Execution\nReview the method incrementValue, a one-line Java method with no looping or branching:\npublic class IdGenerator {\n  int lastIdUsed;\n  public int incrementValue() {\n    return ++lastIdUsed;  }}\nIgnore integer over\ufb02ow and assume that only one thread has access to a single instance\nof IdGenerator. In this case there is a single path of execution and a single guaranteed\nresult:\n\u2022 The value returned is equal to the value of lastIdUsed, both of which are one greater \nthan just before calling the method.\nListing A-1 \nExecutorClientScheduler.java\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\npublic class ExecutorClientScheduler implements ClientScheduler {\n    Executor executor;\n    public ExecutorClientScheduler(int availableThreads) {\n        executor = Executors.newFixedThreadPool(availableThreads);    }\n    public void schedule(final ClientRequestProcessor requestProcessor) {\n        Runnable runnable = new Runnable() {\n            public void run() {                requestProcessor.process();            }        };\n        executor.execute(runnable);\n    }}", "322 Appendix A: Concurrency II\nWhat happens if we use two threads and leave the method unchanged? What are the\npossible outcomes if each thread calls incrementValue once? How many possible paths of\nexecution are there? First, the outcomes (assume lastIdUsed starts with a value of 93):\n\u2022 Thread 1 gets the value of 94, thread 2 gets the value of 95, and lastIdUsed is now 95.\n\u2022 Thread 1 gets the value of 95, thread 2 gets the value of 94, and lastIdUsed is now 95.\n\u2022 Thread 1 gets the value of 94, thread 2 gets the value of 94, and lastIdUsed is now 94.\nThe \ufb01nal result, while surprising, is possible. To see how these different results are possi-\nble, we need to understand the number of possible paths of execution and how the Java\nVirtual Machine executes them.\nNumber of Paths\nTo calculate the number of possible execution paths, we\u2019ll start with the generated byte-\ncode. The one line of java (return ++lastIdUsed;) becomes eight byte-code instructions. It\nis possible for the two threads to interleave the execution of these eight instructions the\nway a card dealer interleaves cards as he shuf\ufb02es a deck.2 Even with only eight cards in\neach hand, there are a remarkable number of shuf\ufb02ed outcomes.\nFor this simple case of N instructions in a sequence, no looping or conditionals, and T\nthreads, the total number of possible execution paths is equal to \n2.  This is a bit of a simpli\ufb01cation. However, for the purpose of this discussion, we can use this simplifying model.\nCalculating the Possible Orderings \nThis comes from an email from Uncle Bob to Brett:\nWith N steps and T threads there are T * N total steps. Prior to each step\nthere is a context switch that chooses between the T threads. Each path can\nthus be represented as a string of digits denoting the context switches.\nGiven steps A and B and threads 1 and 2, the six possible paths are 1122,\n1212, 1221, 2112, 2121, and 2211. Or, in terms of steps it is A1B1A2B2,\nA1A2B1B2, A1A2B2B1, A2A1B1B2, A2A1B2B1, and A2B2A1B1. For\nthree threads the sequence is 112233, 112323, 113223, 113232, 112233,\n121233, 121323, 121332, 123132, 123123, . . . .\nOne characteristic of these strings is that there must always be N\ninstances of each T. So the string 111111 is invalid because it has six\ninstances of 1 and zero instances of 2 and 3. \nNT() !\nN!T--------------", "323Possible Paths of Execution\nFor our simple case of one line of Java code, which equates to eight lines of byte-code\nand two threads, the total number of possible paths of execution is 12,870. If the type of\nlastIdUsed is a long, then every read/write becomes two operations instead of one, and the\nnumber of possible orderings becomes 2,704,156.\nWhat happens if we make one change to this method?\npublic synchronized void incrementValue() {\n    ++lastIdUsed;}\nThe number of possible execution pathways becomes two for two threads and N! in the\ngeneral case. \nDigging Deeper\nWhat about the surprising result that two threads could both call the method once (before\nwe added synchronized) and get the same numeric result? How is that possible? First\nthings \ufb01rst.\nWhat is an atomic operation? We can de\ufb01ne an atomic operation as any operation that\nis uninterruptable. For example, in the following code, line 5, where 0 is assigned to\nlastid, is atomic because according to the Java Memory model, assignment to a 32-bit\nvalue is uninterruptable.\nSo we want the permutations of N 1\u2019 s, N 2\u2019 s, . . . and N T\u2019s. This is\nreally just the permutations of N * T things taken N * T at a time, which is\n(N * T )!, but with all the duplicates removed. So the trick is to count the\nduplicates and subtract that from (N * T )!.\nGiven two steps and two threads, how many duplicates are there? Each\nfour-digit string has two 1s and two 2s. Each of those pairs could be\nswapped without changing the sense of the string. Y ou could swap the 1s or\nthe 2s both, or neither. So there are four isomorphs for each string, which\nmeans that there are three duplicates. So three out of four of the options are\nduplicates; alternatively one of four of the permutations are NOT dupli-\ncates. 4! * .25 = 6.  So this reasoning seems to work.\nHow many duplicates are there? In the case where N = 2 and T = 2, I\ncould swap the 1s, the 2s, or both. In the case where N = 2 and T = 3, I\ncould swap the 1s, the 2s, the 3s, 1s and 2s, 1s and 3s, or 2s and 3s. Swap-\nping is just the permutations of N. Let\u2019 s say there are P permutations of N.\nThe number of different ways to arrange those permutations are P**T. \nSo the number of possible isomorphs is N!**T. And so the number of\npaths is (T*N)!/(N!**T). Again, in our T = 2, N = 2 case we get 6 (24/4).\nFor N = 2 and T = 3 we get 720/8 = 90.\nFor N = 3 and T = 3 we get 9!/6^3 = 1680.\nCalculating the Possible Orderings (continued)", "324 Appendix A: Concurrency II\n01: public class Example {\n02:    int lastId;03:\n04:    public void resetId() {\n05:        value = 0;06:    }07: 08:    public int getNextId() {\n09:        ++value;\n10:    }11:}\nWhat happens if we change type of lastId from int to long? Is line 5 still atomic?\nNot according to the JVM speci\ufb01cation. It could be atomic on a particular processor,\nbut according to the JVM speci\ufb01cation, assignment to any 64-bit value requires two\n32-bit assignments. This means that between the \ufb01rst 32-bit assignment and the second\n32-bit assignment, some other thread could sneak in and change one of the values. \nWhat about the pre-increment operator, ++, on line 9? The pre-increment operator can\nbe interrupted, so it is not atomic. To understand, let\u2019 s review the byte-code of both of these\nmethods in detail. \nBefore we go any further, here are three de\ufb01nitions that will be important:\n\u2022 Frame\u2014Every method invocation requires a frame. The frame includes the return \naddress, any parameters passed into the method and the local variables de\ufb01ned in the \nmethod. This is a standard technique used to de\ufb01ne a call stack, which is used by \nmodern languages to allow for basic function/method invocation and to allow for \nrecursive invocation.\n\u2022 Local variable\u2014Any variables de\ufb01ned in the scope of the method. All nonstatic meth-\nods have at least one variable, this, which represents the current object, the object \nthat received the most recent message (in the current thread), which caused the \nmethod invocation.\n\u2022 Operand stack\u2014Many of the instructions in the Java Virtual Machine take parame-\nters. The operand stack is where those parameters are put. The stack is a standard \nlast-in, \ufb01rst-out (LIFO) data structure.\nHere is the byte-code generated for resetId():\nMnemonic Description Operand \nStack After\nALOAD 0 Load the 0th variable onto the operand stack.\nWhat is the 0th variable? It is this., the current\nobject. When the method was called, the\nreceiver of the message, an instance of Example,\nwas pushed into the local variable array of the\nframe created for method invocation. This is\nalways the \ufb01rst variable put in every instance\nmethod.\nthis", "325Possible Paths of Execution\nThese three instructions are guaranteed to be atomic because, although the thread\nexecuting them could be interrupted after any one of them, the information for the\nPUTFIELD instruction (the constant value 0 on the top of the stack and the reference to\nthis one below the top, along with the \ufb01eld value) cannot be touched by another thread.\nSo when the assignment occurs, we are guaranteed that the value 0 will be stored in the\n\ufb01eld value. The operation is atomic. The operands all deal with information local to the\nmethod, so there is no interference between multiple threads. \nSo if these three instructions are executed by ten threads, there are 4.38679733629e+24\npossible orderings. However, there is only one possible outcome, so the different orderings\nare irrelevant. It just so happens that the same outcome is guaranteed for longs in this case\nas well. Why? All ten threads are assigning a constant value. Even if they interleave with\neach other, the end result is the same.\nWith the ++ operation in the getNextId method, there are going to be problems.\nAssume that lastId holds 42 at the beginning of this method. Here is the byte-code for this\nnew method:\nICONST_0 Put the constant value 0 onto the operand stack. this, 0\nPUTFIELD lastId Store the top value on the stack (which is 0) into\nthe \ufb01eld value of the object referred to by the\nobject reference one away from the top of the\nstack, this.\n<empty>\nMnemonic Description Operand \nStack After\nALOAD 0 Load this onto the operand stack this\nDUP Copy the top of the stack. We now have two\ncopies of this on the operand stack.\nthis, this\nGETFIELD lastId Retrieve the value of the \ufb01eld lastId from the\nobject pointed to on the top of the stack (this) and\nstore that value back on to the stack.\nthis, 42\nICONST_1 Push the integer constant 1 on the stack. this, 42, 1\nIADD Integer add the top two values on the operand\nstack and store the result back on to the operand\nstack.\nthis, 43\nDUP_X1 Duplicate the value 43 and put it before this. 43, this, 43\nPUTFIELD value Store the top value on the operand stack, 43, into\nthe \ufb01eld value of the current object, represented by\nthe next-to-top value on the operand stack, this.\n43\nIRETURN return the top (and only) value on the stack. <empty>\nMnemonic Description Operand \nStack After", "326 Appendix A: Concurrency II\nImagine the case where the \ufb01rst thread completes the \ufb01rst three instructions, up to and\nincluding GETFIELD, and then it is interrupted. A second thread takes over and performs\nthe entire method, incrementing lastId by one; it gets 43 back. Then the \ufb01rst thread picks up\nwhere it left off; 42 is still on the operand stack because that was the value of lastId when it\nexecuted GETFIELD. It adds one to get 43 again and stores the result. The value 43 is\nreturned to the \ufb01rst thread as well. The result is that one of the increments is lost because the\n\ufb01rst thread stepped on the second thread after the second thread interrupted the \ufb01rst thread.\nMaking the getNexId() method synchronized \ufb01xes this problem.\nConclusion\nAn intimate understanding of byte-code is not necessary to understand how threads can\nstep on each other. If you can understand this one example, it should demonstrate the pos-\nsibility of multiple threads stepping on each other, which is enough knowledge.\nThat being said, what this trivial example demonstrates is a need to understand the\nmemory model enough to know what is and is not safe. It is a common misconception that\nthe ++ (pre- or post-increment) operator is atomic, and it clearly is not. This means you\nneed to know:\n\u2022 Where there are shared objects/values\n\u2022 The code that can cause concurrent read/update issues\n\u2022 How to guard such concurrent issues from happening\nKnowing Y our Library\nExecutor Framework\nAs demonstrated in the ExecutorClientScheduler.java on page 321, the Executor frame-\nwork introduced in Java 5 allows for sophisticated execution using thread pools. This is a\nclass in the java.util.concurrent package.\nIf you are creating threads and are not using a thread pool or are using a hand-written\none, you should consider using the Executor. It will make your code cleaner, easier to fol-\nlow, and smaller.\nThe Executor framework will pool threads, resize automatically, and recreate threads\nif necessary. It also supports futures, a common concurrent programming construct. The\nExecutor framework works with classes that implement Runnable and also works with\nclasses that implement the Callable interface. A Callable looks like a Runnable, but it can\nreturn a result, which is a common need in multithreaded solutions.\nA future is handy when code needs to execute multiple, independent operations and\nwait for both to \ufb01nish:\npublic String processRequest(String message) throws Exception {\n    Callable<String> makeExternalCall = new Callable<String>() {", "327Knowing Y our Library\n        public String call() throws Exception {\n            String result = \"\";            // make external request\n            return result;\n        }    };\n    Future<String> result = executorService.submit(makeExternalCall);\n    String partialResult = doSomeLocalProcessing();\n    return result.get() + partialResult;}\nIn this example, the method starts executing the makeExternalCall object. The method con-\ntinues other processing. The \ufb01nal line calls result.get(), which blocks until the future\ncompletes.\nNonblocking Solutions\nThe Java 5 VM takes advantage of modern processor design, which supports reliable,\nnonblocking updates. Consider, for example, a class that uses synchronization (and there-\nfore blocking) to provide a thread-safe update of a value:\npublic class ObjectWithValue {\n    private int value;    public void synchronized incrementValue() { ++value; }\n    public int getValue() { return value; }\n}\nJava 5 has a series of new classes for situations like this: AtomicBoolean,\nAtomicInteger, and AtomicReference are three examples; there are several more. We can\nrewrite the above code to use a nonblocking approach as follows:\npublic class ObjectWithValue {\n    private AtomicInteger value = new AtomicInteger(0);\n    public void incrementValue() {\n        value.incrementAndGet();    }    public int getValue() {        return value.get();\n    }\n}\nEven though this uses an object instead of a primitive and sends messages like\nincrementAndGet() instead of ++, the performance of this class will nearly always beat the\nprevious version. In some cases it will only be slightly faster, but the cases where it will be\nslower are virtually nonexistent.\nHow is this possible? Modern processors have an operation typically called Compare\nand Swap (CAS). This operation is analogous to optimistic locking in databases, whereas\nthe synchronized version is analogous to pessimistic locking.", "328 Appendix A: Concurrency II\nThe synchronized keyword always acquires a lock, even when a second thread is not\ntrying to update the same value. Even though the performance of intrinsic locks has\nimproved from version to version, they are still costly. \nThe nonblocking version starts with the assumption that multiple threads generally do\nnot modify the same value often enough that a problem will arise. Instead, it ef\ufb01ciently\ndetects whether such a situation has occurred and retries until the update happens success-\nfully. This detection is almost always less costly than acquiring a lock, even in moderate to\nhigh contention situations. \nHow does the Virtual Machine accomplish this? The CAS operation is atomic. Logi-\ncally, the CAS operation looks something like the following:\nint variableBeingSet;\nvoid simulateNonBlockingSet(int newValue) {\n    int currentValue;\n    do {        currentValue = variableBeingSet    } while(currentValue != compareAndSwap(currentValue, newValue));}\nint synchronized compareAndSwap(int currentValue, int newValue) {\n    if(variableBeingSet == currentValue) {        variableBeingSet = newValue;        return currentValue;\n    }\n    return variableBeingSet;    }\nWhen a method attempts to update a shared variable, the CAS operation veri\ufb01es that\nthe variable getting set still has the last known value. If so, then the variable is changed. If\nnot, then the variable is not set because another thread managed to get in the way. The\nmethod making the attempt (using the CAS operation) sees that the change was not made\nand retries.\nNonthread-Safe Classes\nThere are some classes that are inherently not thread safe. Here are a few examples:\n\u2022 SimpleDateFormat\n\u2022 Database Connections\n\u2022 Containers in java.util\n\u2022 Servlets\nNote that some collection classes have individual methods that are thread-safe. However,\nany operation that involves calling more than one method is not. For example, if you do\nnot want to replace something in a HashTable because it is already there, you might write\nthe following code:\nif(!hashTable.containsKey(someKey)) {\n    hashTable.put(someKey, new SomeValue());}", "329Dependencies Between Methods Can Break Concurrent Code\nEach individual method is thread-safe. However, another thread might add a value in\nbetween the containsKey and put calls. There are several options to \ufb01x this problem.\n\u2022 Lock the HashTable \ufb01rst, and make sure all other users of the HashTable do the same\u2014\nclient-based locking:\nsynchronized(map) {\nif(!map.conainsKey(key))    map.put(key,value);\n}\n\u2022 Wrap the HashTable in its own object and use a different API\u2014server-based locking \nusing an ADAPTER:\npublic class WrappedHashtable<K, V> {\n    private Map<K, V> map = new Hashtable<K, V>();\n    public synchronized void putIfAbsent(K key, V value) {\n        if (map.containsKey(key))            map.put(key, value);    }}\n\u2022 Use the thread-safe collections:\nConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<Integer, String>();map.putIfAbsent(key, value);\nThe collections in java.util.concurrent have operations like putIfAbsent() to accommo-\ndate such operations.\nDependencies Between Methods \nCan Break Concurrent Code\nHere is a trivial example of a way to introduce dependencies between methods:\npublic class IntegerIterator implements Iterator<Integer>\n    private Integer nextValue = 0;\n    public synchronized boolean hasNext() {\n        return nextValue < 100000;    }    public synchronized Integer next() {        if (nextValue == 100000) \n            throw new IteratorPastEndException();\n        return nextValue++;    }    public synchronized Integer getNextValue() {        return nextValue;\n    }\n}\nHere is some code to use this IntegerIterator:\nIntegerIterator iterator = new IntegerIterator();while(iterator.hasNext()) {", "330 Appendix A: Concurrency II\n    int nextValue = iterator.next();\n    // do something with nextValue}\nIf one thread executes this code, there will be no problem. But what happens if two threads\nattempt to share a single instance of IngeterIterator with the intent that each thread will\nprocess the values it gets, but that each element of the list is processed only once? Most of\nthe time, nothing bad happens; the threads happily share the list, processing the elements\nthey are given by the iterator and stopping when the iterator is complete. However, there is\na small chance that, at the end of the iteration, the two threads will interfere with each\nother and cause one thread to go beyond the end of the iterator and throw an exception.\nHere\u2019 s the problem: Thread 1 asks the question hasNext(), which returns true. Thread\n1 gets preempted and then Thread 2 asks the same question, which is still true. Thread 2\nthen calls next(), which returns a value as expected but has a side effect of making\nhasNext() return false. Thread 1 starts up again, thinking hasNext() is still true, and then\ncalls next(). Even though the individual methods are synchronized, the client uses  two\nmethods.\nThis is a real problem and an example of the kinds of problems that crop up in con-\ncurrent code. In this particular situation this problem is especially subtle because the only\ntime where this causes a fault is when it happens during the \ufb01nal iteration of the iterator.\nIf the threads happen to break just right, then one of the threads could go beyond the end\nof the iterator. This is the kind of bug that happens long after a system has been in pro-\nduction, and it is hard to track down.\nY ou have three options:\n\u2022 Tolerate the failure.\n\u2022 Solve the problem by changing the client: client-based locking\n\u2022 Solve the problem by changing the server, which additionally changes the client: \nserver-based locking\nTolerate the Failure\nSometimes you can set things up such that the failure causes no harm. For example, the\nabove client could catch the exception and clean up. Frankly, this is a bit sloppy. It\u2019 s rather\nlike cleaning up memory leaks by rebooting at midnight. \nClient-Based Locking\nTo make IntegerIterator work correctly with multiple threads, change this client (and\nevery other client) as follows:\nIntegerIterator iterator = new IntegerIterator();\n    while (true) {\n      int nextValue;", "331Dependencies Between Methods Can Break Concurrent Code\n      synchronized (iterator) {\n        if (!iterator.hasNext())          break;\n        nextValue = iterator.next();\n      }      doSometingWith(nextValue);    }\nEach client introduces a lock via the synchronized keyword. This duplication violates the\nDR Y principle, but it might be necessary if the code uses non-thread-safe third-party tools.\nThis strategy is risky because all programmers who use the server must remember to\nlock it before using it and unlock it when done. Many (many!) years ago I worked on a\nsystem that employed client-based locking on a shared resource. The resource was used in\nhundreds of different places throughout the code. One poor programmer forgot to lock the\nresource in one of those places.\nThe system was a multi-terminal time-sharing system running accounting software\nfor Local 705 of the trucker\u2019 s union. The computer was in a raised-\ufb02oor, environment-\ncontrolled room 50 miles north of the Local 705 headquarters. At the headquarters they\nhad dozens of data entry clerks typing union dues postings into the terminals. The termi-\nnals were connected to the computer using dedicated phone lines and 600bps half-duplex\nmodems. (This was a very, very long time ago.)\nAbout once per day, one of the terminals would \u201clock up.\u201d There was no rhyme or rea-\nson to it. The lock up showed no preference for particular terminals or particular times. It\nwas as though there were someone rolling dice choosing the time and terminal to lock up.\nSometimes more than one terminal would lock up. Sometimes days would go by without\nany lock-ups. \nAt \ufb01rst the only solution was a reboot. But reboots were tough to coordinate. We had\nto call the headquarters and get everyone to \ufb01nish what they were doing on all the termi-\nnals. Then we could shut down and restart. If someone was doing something important\nthat took an hour or two, the locked up terminal simply had to stay locked up. \nAfter a few weeks of debugging we found that the cause was a ring-buffer counter that\nhad gotten out of sync with its pointer. This buffer controlled output to the terminal. The\npointer value indicated that the buffer was empty, but the counter said it was full. Because\nit was empty, there was nothing to display; but because it was also full, nothing could be\nadded to the buffer to be displayed on the screen.\nSo we knew why the terminals were locking, but we didn\u2019t know why the ring buffer\nwas getting out of sync. So we added a hack to work around the problem. It was possible to\nread the front panel switches on the computer. (This was a very, very, very long time ago.)\nWe wrote a little trap function that detected when one of these switches was thrown and\nthen looked for a ring buffer that was both empty and full. If one was found, it reset that\nbuffer to empty. V oila! The locked-up terminal(s) started displaying again. \nSo now we didn\u2019t have to reboot the system when a terminal locked up. The Local\nwould simply call us and tell us we had a lock-up, and then we just walked into the com-\nputer room and \ufb02icked a switch.", "332 Appendix A: Concurrency II\nOf course sometimes they worked on the weekends, and we didn\u2019t. So we added a\nfunction to the scheduler that checked all the ring buffers once per minute and reset any\nthat were both empty and full. This caused the displays to unclog before the Local could\neven get on the phone.\nIt was several more weeks of poring over page after page of monolithic assembly lan-\nguage code before we found the culprit. We had done the math and calculated that the fre-\nquency of the lock-ups was consistent with a single unprotected use of the ring buffer. So\nall we had to do was \ufb01nd that one faulty usage. Unfortunately, this was so very long ago\nthat we didn\u2019t have search tools or cross references or any other kind of automated help.\nWe simply had to pore over listings. \nI learned an important lesson that cold Chicago winter of 1971. Client-based locking\nreally blows.\nServer-Based Locking\nThe duplication can be removed by making the following changes to IntegerIterator:\npublic class IntegerIteratorServerLocked {\n    private Integer nextValue = 0;    public synchronized Integer getNextOrNull() {\n        if (nextValue < 100000)\n            return nextValue++;        else            return null;    }\n}\nAnd the client code changes as well:\nwhile (true) {\n    Integer nextValue = iterator.getNextOrNull();    if (next == null)\n        break;\n    // do something with nextValue}\nIn this case we actually change the API of our class to be multithread aware. 3 The client\nneeds to perform a null check instead of checking hasNext().\nIn general you should prefer server-based locking for these reasons:\n\u2022 It reduces repeated code\u2014Client-based locking forces each client to lock the server \nproperly. By putting the locking code into the server, clients are free to use the object \nand not worry about writing additional locking code.\n3. In fact, the Iterator interface is inherently not thread-safe. It was never designed to be used by multiple threads, so this \nshould come as no surprise.", "333Increasing Throughput\n\u2022 It allows for better performance\u2014Y ou can swap out a thread-safe server for a non-\nthread safe one in the case of single-threaded deployment, thereby avoiding all \noverhead.\n\u2022 It reduces the possibility of error\u2014All it takes is for one programmer to forget to lock \nproperly.\n\u2022 It enforces a single policy\u2014The policy is in one place, the server, rather than many \nplaces, each client.\n\u2022 It reduces the scope of the shared variables\u2014The client is not aware of them or how \nthey are locked. All of that is hidden in the server. When things break, the number of \nplaces to look is smaller.\nWhat if you do not own the server code?\n\u2022 Use an ADAPTER to change the API and add locking\npublic class ThreadSafeIntegerIterator {\n    private IntegerIterator iterator = new IntegerIterator();\n    public synchronized Integer getNextOrNull() {\n        if(iterator.hasNext())            return iterator.next();        return null;    }\n}\n\u2022 OR better yet, use the thread-safe collections with extended interfaces\nIncreasing Throughput\nLet\u2019 s assume that we want to go out on the net and read the contents of a set of pages from\na list of URLs. As each page is read, we will parse it to accumulate some statistics. Once\nall the pages are read, we will print a summary report.\nThe following class returns the contents of one page, given a URL.\npublic class PageReader {\n  //...  public String getPageFor(String url) {\n    HttpMethod method = new GetMethod(url);\n    try {\n      httpClient.executeMethod(method);      String response = method.getResponseBodyAsString();\n      return response;\n    } catch (Exception e) {      handle(e);    } finally {      method.releaseConnection();\n    }\n  }}", "334 Appendix A: Concurrency II\nThe next class is the iterator that provides the contents of the pages based on an iterator of\nURLs:\npublic class PageIterator {\n  private PageReader reader;  private URLIterator urls;\n  public PageIterator(PageReader reader, URLIterator urls) {\n    this.urls = urls;    this.reader = reader;  }\n  public synchronized String getNextPageOrNull() {\n    if (urls.hasNext())      getPageFor(urls.next());    else\n      return null;\n  }\n  public String getPageFor(String url) {\n    return reader.getPageFor(url);\n  }\n}\nAn instance of the PageIterator can be shared between many different threads, each\none using it\u2019 s own instance of the PageReader to read and parse the pages it gets from the\niterator. \nNotice that we\u2019ve kept the synchronized block very small. It contains just the critical\nsection deep inside the PageIterator. It is always better to synchronize as little as possible\nas opposed to synchronizing as much as possible. \nSingle-Thread Calculation of Throughput\nNow lets do some simple calculations. For the purpose of argument, assume the following:\n\u2022 I/O time to retrieve a page (average): 1 second\n\u2022 Processing time to parse page (average): .5 seconds\n\u2022 I/O requires 0 percent of the CPU while processing requires 100 percent. \nFor N  pages being processed by a single thread, the total execution time is 1.5 sec-\nonds * N. Figure A-1 shows a snapshot of 13 pages or about 19.5 seconds.\nFigure A-1\nSingle thread", "335Deadlock\nMultithread Calculation of Throughput\nIf it is possible to retrieve pages in any order and process the pages independently, then it\nis possible to use multiple threads to increase throughput. What happens if we use three\nthreads? How many pages can we acquire in the same time?\nAs you can see in Figure A-2, the multithreaded solution allows the process-bound\nparsing of the pages to overlap with the I/O-bound reading of the pages. In an idealized\nworld this means that the processor is fully utilized. Each one-second page read is over-\nlapped with two parses. Thus, we can process two pages per second, which is three times\nthe throughput of the single-threaded solution. \nDeadlock\nImagine a Web application with two shared resource pools of some \ufb01nite size:\n\u2022 A pool of database connections for local work in process storage\n\u2022 A pool of MQ connections to a master repository\nAssume there are two operations in this application, create and update:\n\u2022 Create\u2014Acquire connection to master repository and database. Talk to service master \nrepository and then store work in local work in process database.\nFigure A-2\nThree concurrent threads", "336 Appendix A: Concurrency II\n\u2022 Update\u2014Acquire connection to database and then master repository. Read from work \nin process database and then send to the master repository\nWhat happens when there are more users than the pool sizes? Consider each pool has\na size of ten.\n\u2022 Ten users attempt to use create, so all ten database connections are acquired, and each \nthread is interrupted after acquiring a database connection but before acquiring a con-\nnection to the master repository.\n\u2022 Ten users attempt to use update, so all ten master repository connections are acquired, \nand each thread is interrupted after acquiring the master repository but before acquir-\ning a database connection.\n\u2022 Now the ten \u201ccreate\u201d threads must wait to acquire a master repository connection, but \nthe ten \u201cupdate\u201d threads must wait to acquire a database connection.\n\u2022 Deadlock. The system never recovers.\nThis might sound like an unlikely situation, but who wants a system that freezes solid\nevery other week? Who wants to debug a system with symptoms that are so dif\ufb01cult to\nreproduce? This is the kind of problem that happens in the \ufb01eld, then takes weeks to solve.\nA typical \u201csolution\u201d is to introduce debugging statements to \ufb01nd out what is happen-\ning. Of course, the debug statements change the code enough so that the deadlock happens\nin a different situation and takes months to again occur.4\nTo really solve the problem of deadlock, we need to understand what causes it. There\nare four conditions required for deadlock to occur:\n\u2022 Mutual exclusion\n\u2022 Lock & wait\n\u2022 No preemption\n\u2022 Circular wait\nMutual Exclusion\nMutual exclusion occurs when multiple threads need to use the same resources and those\nresources \n\u2022 Cannot be used by multiple threads at the same time.\n\u2022 Are limited in number.\nA common example of such a resource is a database connection, a \ufb01le open for write, a\nrecord lock, or a semaphore. \n4. For example, someone adds some debugging output and the problem \u201cdisappears.\u201d The debugging code \u201c\ufb01xes\u201d the problem \nso it remains in the system.", "337Deadlock\nLock & Wait\nOnce a thread acquires a resource, it will not release the resource until it has acquired all\nof the other resources it requires and has completed its work.\nNo Preemption\nOne thread cannot take resources away from another thread. Once a thread holds a\nresource, the only way for another thread to get it is for the holding thread to release it.\nCircular Wait\nThis is also referred to as the deadly embrace. Imagine two threads, T1 and T2, and two\nresources, R1 and R2. T1 has R1, T2 has R2. T1 also requires R2, and T2 also requires R1.\nThis gives something like Figure A-3:\nAll four of these conditions must hold for deadlock to be possible. Break any one of these\nconditions and deadlock is not possible.\nBreaking Mutual Exclusion\nOne strategy for avoiding deadlock is to sidestep the mutual exclusion condition. Y ou\nmight be able to do this by\n\u2022 Using resources that allow simultaneous use, for example, AtomicInteger.\n\u2022 Increasing the number of resources such that it equals or exceeds the number of com-\npeting threads.\n\u2022 Checking that all your resources are free before seizing any.\nUnfortunately, most resources are limited in number and don\u2019t allow simultaneous\nuse. And it\u2019 s not uncommon for the identity of the second resource to be predicated on the\nresults of operating on the \ufb01rst. But don\u2019t be discouraged; there are three conditions left.\nFigure A-3", "338 Appendix A: Concurrency II\nBreaking Lock & Wait\nY ou can also eliminate deadlock if you refuse to wait. Check each resource before you\nseize it, and release all resources and start over if you run into one that\u2019 s busy. \nThis approach introduces several potential problems:\n\u2022 Starvation\u2014One thread keeps being unable to acquire the resources it needs (maybe it \nhas a unique combination of resources that seldom all become available).\n\u2022 Livelock\u2014Several threads might get into lockstep and all acquire one resource and \nthen release one resource, over and over again. This is especially likely with simplistic \nCPU scheduling algorithms (think embedded devices or simplistic hand-written \nthread balancing algorithms).\nBoth of these can cause poor throughput. The \ufb01rst results in low CPU utilization,\nwhereas the second results in high and useless CPU utilization. \nAs inef\ufb01cient as this strategy sounds, it\u2019 s better than nothing. It has the bene\ufb01t that it\ncan almost always be implemented if all else fails. \nBreaking Preemption\nAnother strategy for avoiding deadlock is to allow threads to take resources away from\nother threads. This is usually done through a simple request mechanism. When a thread\ndiscovers that a resource is busy, it asks the owner to release it. If the owner is also waiting\nfor some other resource, it releases them all and starts over. \nThis is similar to the previous approach but has the bene\ufb01t that a thread is allowed to\nwait for a resource. This decreases the number of startovers. Be warned, however, that\nmanaging all those requests can be tricky. \nBreaking Circular Wait\nThis is the most common approach to preventing deadlock. For most systems it requires\nno more than a simple convention agreed to by all parties.\nIn the example above with Thread 1 wanting both Resource 1 and Resource 2 and\nThread 2 wanting both Resource 2 and then Resource 1, simply forcing both Thread 1 and\nThread 2 to allocate resources in the same order makes circular wait impossible.\nMore generally, if all threads can agree on a global ordering of resources and if they\nall allocate resources in that order, then deadlock is impossible. Like all the other strate-\ngies, this can cause problems:\n\u2022 The order of acquisition might not correspond to the order of use; thus a resource \nacquired at the start might not be used until the end. This can cause resources to be \nlocked longer than strictly necessary.", "339Testing Multithreaded Code\n\u2022 Sometimes you cannot impose an order on the acquisition of resources. If the ID of \nthe second resource comes from an operation performed on the \ufb01rst, then ordering is \nnot feasible.\nSo there are many ways to avoid deadlock. Some lead to starvation, whereas others\nmake heavy use of the CPU and reduce responsiveness. TANSTAAFL!5\nIsolating the thread-related part of your solution to allow for tuning and experimenta-\ntion is a powerful way to gain the insights needed to determine the best strategies.\nTesting Multithreaded Code\nHow can we write a test to demonstrate the following code is broken?\n01: public class ClassWithThreadingProblem {\n02:    int nextId;03:\n04:    public int takeNextId() {\n05:        return nextId++;06:    }07:}\nHere\u2019 s a description of a test that will prove the code is broken:\n\u2022 Remember the current value of nextId.\n\u2022 Create two threads, both of which call takeNextId() once.\n\u2022 Verify that nextId is two more than what we started with.\n\u2022 Run this until we demonstrate that nextId was only incremented by one instead \nof two.\nListing A-2 shows such a test:\n5. There ain\u2019t no such thing as a free lunch.\nListing A-2 \nClassWithThreadingProblemTest.java\n01: package example;\n02: 03: import static org.junit.Assert.fail;\n04: \n05: import org.junit.Test;06: 07: public class ClassWithThreadingProblemTest {08:     @Test\n09:     public void twoThreadsShouldFailEventually() throws Exception {\n10:         final ClassWithThreadingProblem classWithThreadingProblem                 = new ClassWithThreadingProblem();11:", "340 Appendix A: Concurrency II\n12:         Runnable runnable = new Runnable() {\n13:             public void run() {14:                 classWithThreadingProblem.takeNextId();\n15:             }\n16:         };17: 18:         for (int i = 0; i < 50000; ++i) {19:             int startingId = classWithThreadingProblem.lastId;\n20:             int expectedResult = 2 + startingId;\n21: 22:             Thread t1 = new Thread(runnable);23:             Thread t2 = new Thread(runnable);24:             t1.start();\n25:             t2.start();\n26:             t1.join();27:             t2.join();28: 29:             int endingId = classWithThreadingProblem.lastId;\n30: \n31:             if (endingId != expectedResult)32:                 return;33:         }34: \n35:         fail(\"Should have exposed a threading issue but it did not.\");\n36:     }37: }\nLine Description\n10 Create a single instance of ClassWithThreadingProblem. Note, we must use\nthe \ufb01nal keyword because we use it below in an anonymous inner class.\n12\u201316 Create an anonymous inner class that uses the single instance of\nClassWithThreadingProblem.\n18 Run this code \u201cenough\u201d times to demonstrate that the code failed, but not\nso much that the test \u201ctakes too long.\u201d This is a balancing act; we don\u2019t\nwant to wait too long to demonstrate failure. Picking this number is hard\u2014\nalthough later we\u2019ll see that we can greatly reduce this number.\n19 Remember the starting value. This test is trying to prove that the code in\nClassWithThreadingProblem is broken. If this test passes, it proved that the\ncode was broken. If this test fails, the test was unable to prove that the code\nis broken.\n20 We expect the \ufb01nal value to be two more than the current value.\n22\u201323 Create two threads, both of which use the object we created in lines 12\u201316.\nThis gives us the potential of two threads trying to use our single instance\nof ClassWithThreadingProblem and interfering with each other.\nListing A-2 (continued)\nClassWithThreadingProblemTest.java", "341Testing Multithreaded Code\nThis test certainly sets up the conditions for a concurrent update problem. However,\nthe problem occurs so infrequently that the vast majority of times this test won\u2019t detect it.\nIndeed, to truly detect the problem we need to set the number of iterations to over one\nmillion. Even then, in ten executions with a loop count of 1,000,000, the problem occurred\nonly once. That means we probably ought to set the iteration count to well over one hun-\ndred million to get reliable failures. How long are we prepared to wait?\nEven if we tuned the test to get reliable failures on one machine, we\u2019ll probably have\nto retune the test with different values to demonstrate the failure on another machine,\noperating system, or version of the JVM. \nAnd this is a simple problem. If we cannot demonstrate broken code easily with this\nproblem, how will we ever detect truly complex problems?\nSo what approaches can we take to demonstrate this simple failure? And, more impor-\ntantly, how can we write tests that will demonstrate failures in more complex code? How\nwill we be able to discover if our code has failures when we do not know where to look?\nHere are a few ideas:\n\u2022 Monte Carlo Testing. Make tests \ufb02exible, so they can be tuned. Then run the test over \nand over\u2014say on a test server\u2014randomly changing the tuning values. If the tests ever \nfail, the code is broken. Make sure to start writing those tests early so a continuous \nintegration server starts running them soon. By the way, make sure you carefully log \nthe conditions under which the test failed.\n\u2022 Run the test on every one of the target deployment platforms. Repeatedly. Continu-\nously. The longer the tests run without failure, the more likely that\n\u2013 The production code is correct or\n\u2013 The tests aren\u2019t adequate to expose problems.\n\u2022 Run the tests on a machine with varying loads. If you can simulate loads close to a \nproduction environment, do so.\n24\u201325 Make our two threads eligible to run.\n26\u201327 Wait for both threads to \ufb01nish before we check the results.\n29 Record the actual \ufb01nal value.\n31\u201332 Did our endingId differ from what we expected? If so, return end the test\u2014\nwe\u2019ve proven that the code is broken. If not, try again.\n35 If we got to here, our test was unable to prove the production code was bro-\nken in a \u201creasonable\u201d amount of time; our code has failed. Either the code\nis not broken or we didn\u2019t run enough iterations to get the failure condition\nto occur.\nLine Description", "342 Appendix A: Concurrency II\nY et, even if you do all of these things, you still don\u2019t stand a very good chance of \ufb01nd-\ning threading problems with your code. The most insidious problems are the ones that\nhave such a small cross section that they only occur once in a billion opportunities. Such\nproblems are the terror of complex systems. \nTool Support for Testing Thread-Based Code\nIBM has created a tool called ConTest.6 It instruments classes to make it more likely that\nnon-thread-safe code fails.\nWe do not have any direct relationship with IBM or the team that developed ConTest.\nA colleague of ours pointed us to it. We noticed vast improvement in our ability to \ufb01nd\nthreading issues after a few minutes of using it.\nHere\u2019 s an outline of how to use ConTest:\n\u2022 Write tests and production code, making sure there are tests speci\ufb01cally designed to \nsimulate multiple users under varying loads, as mentioned above.\n\u2022 Instrument test and production code with ConTest.\n\u2022 Run the tests.\nWhen we instrumented code with ConTest, our success rate went from roughly one fail-\nure in ten million iterations to roughly one failure in thirty iterations. Here are the loop values\nfor several runs of the test after instrumentation: 13, 23, 0, 54, 16, 14, 6, 69, 107, 49, 2. So\nclearly the instrumented classes failed much earlier and with much greater reliability. \nConclusion\nThis chapter has been a very brief sojourn through the large and treacherous territory of\nconcurrent programming. We barely scratched the surface. Our emphasis here was on dis-\nciplines to help keep concurrent code clean, but there is much more you should learn if\nyou are going to be writing concurrent systems. We recommend you start with Doug Lea\u2019 s\nwonderful book Concurrent Programming in Java: Design Principles and Patterns.7\nIn this chapter we talked about concurrent update, and the disciplines of clean syn-\nchronization and locking that can prevent it. We talked about how threads can enhance the\nthroughput of an I/O-bound system and showed the clean techniques for achieving such\nimprovements. We talked about deadlock and the disciplines for preventing it in a clean\n6. http://www.haifa.ibm.com/projects/veri\ufb01cation/contest/index.html\n7. See [Lea99] p. 191.", "343Tutorial: Full Code Examples\nway. Finally, we talked about strategies for exposing concurrent problems by instrumenting\nyour code.\nTutorial: Full Code Examples\nClient/Server Nonthreaded    \nListing A-3 \nServer.java\npackage com.objectmentor.clientserver.nonthreaded;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;import java.net.SocketException;\nimport common.MessageUtils;\npublic class Server implements Runnable {\n    ServerSocket serverSocket;    volatile boolean keepProcessing = true;\n    public Server(int port, int millisecondsTimeout) throws IOException {\n        serverSocket = new ServerSocket(port);        serverSocket.setSoTimeout(millisecondsTimeout);    }\n    public void run() {\n        System.out.printf(\"Server Starting\\n\");\n        while (keepProcessing) {\n            try {\n                System.out.printf(\"accepting client\\n\");\n                Socket socket = serverSocket.accept();                System.out.printf(\"got client\\n\");                process(socket);            } catch (Exception e) {\n                handle(e);\n            }        }    }\n    private void handle(Exception e) {\n        if (!(e instanceof SocketException)) {            e.printStackTrace();        }    }\n    public void stopProcessing() {\n        keepProcessing = false;        closeIgnoringException(serverSocket);    }", "344 Appendix A: Concurrency II\n    void process(Socket socket) {\n        if (socket == null)            return;\n        try {\n            System.out.printf(\"Server: getting message\\n\");\n            String message = MessageUtils.getMessage(socket);\n            System.out.printf(\"Server: got message: %s\\n\", message);            Thread.sleep(1000);            System.out.printf(\"Server: sending reply: %s\\n\", message);            MessageUtils.sendMessage(socket, \"Processed: \" + message);\n            System.out.printf(\"Server: sent\\n\");\n            closeIgnoringException(socket);        } catch (Exception e) {            e.printStackTrace();        }\n    }\n    private void closeIgnoringException(Socket socket) {\n        if (socket != null)\n            try {\n                socket.close();            } catch (IOException ignore) {            }    }\n    private void closeIgnoringException(ServerSocket serverSocket) {\n        if (serverSocket != null)            try {                serverSocket.close();\n            } catch (IOException ignore) {\n            }    }}\nListing A-4 \nClientTest.java\npackage com.objectmentor.clientserver.nonthreaded;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;import java.net.SocketException;\nimport common.MessageUtils;\npublic class Server implements Runnable {\n    ServerSocket serverSocket;    volatile boolean keepProcessing = true;\nListing A-3 (continued)\nServer.java", "345Tutorial: Full Code Examples\n    public Server(int port, int millisecondsTimeout) throws IOException {\n        serverSocket = new ServerSocket(port);        serverSocket.setSoTimeout(millisecondsTimeout);\n    }\n    public void run() {\n        System.out.printf(\"Server Starting\\n\");\n        while (keepProcessing) {\n            try {                System.out.printf(\"accepting client\\n\");                Socket socket = serverSocket.accept();                System.out.printf(\"got client\\n\");\n                process(socket);\n            } catch (Exception e) {                handle(e);            }        }\n    }\n    private void handle(Exception e) {\n        if (!(e instanceof SocketException)) {            e.printStackTrace();\n        }\n    }\n    public void stopProcessing() {\n        keepProcessing = false;\n        closeIgnoringException(serverSocket);\n    }\n    void process(Socket socket) {\n        if (socket == null)\n            return;\n        try {\n            System.out.printf(\"Server: getting message\\n\");            String message = MessageUtils.getMessage(socket);\n            System.out.printf(\"Server: got message: %s\\n\", message);\n            Thread.sleep(1000);            System.out.printf(\"Server: sending reply: %s\\n\", message);            MessageUtils.sendMessage(socket, \"Processed: \" + message);            System.out.printf(\"Server: sent\\n\");\n            closeIgnoringException(socket);\n        } catch (Exception e) {            e.printStackTrace();        }\n    }\n    private void closeIgnoringException(Socket socket) {\n        if (socket != null)            try {\n                socket.close();\nListing A-4 (continued)\nClientTest.java", "346 Appendix A: Concurrency II\nClient/Server Using Threads\nChanging the server to use threads simply requires a change to the process message (new\nlines are emphasized to stand out):\nvoid process(final Socket socket) {\n    if (socket == null)        return;\n    Runnable clientHandler = new Runnable() {\n        public void run() {\n            } catch (IOException ignore) {\n            }\n    }\n    private void closeIgnoringException(ServerSocket serverSocket) {\n        if (serverSocket != null)\n            try {\n                serverSocket.close();            } catch (IOException ignore) {            }    }\n}\nListing A-5 \nMessageUtils.java\npackage common;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.io.OutputStream;import java.net.Socket;\npublic class MessageUtils {\n    public static void sendMessage(Socket socket, String message)            throws IOException {        OutputStream stream = socket.getOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(stream);\n        oos.writeUTF(message);        oos.flush();    }\n    public static String getMessage(Socket socket) throws IOException {\n        InputStream stream = socket.getInputStream();        ObjectInputStream ois = new ObjectInputStream(stream);        return ois.readUTF();    }\n}\nListing A-4 (continued)\nClientTest.java", "347Tutorial: Full Code Examples\n            try {\n                System.out.printf(\"Server: getting message\\n\");                String message = MessageUtils.getMessage(socket);\n                System.out.printf(\"Server: got message: %s\\n\", message);\n                Thread.sleep(1000);                System.out.printf(\"Server: sending reply: %s\\n\", message);                MessageUtils.sendMessage(socket, \"Processed: \" + message);                System.out.printf(\"Server: sent\\n\");\n                closeIgnoringException(socket);\n            } catch (Exception e) {                e.printStackTrace();            }        }\n    };\n    Thread clientConnection = new Thread(clientHandler);\n    clientConnection.start();}", "This page intentionally left blank", "349\nAppendix B\norg.jfree.date.SerialDate\nListing B-1 \nSerialDate.Java\n   1 /* ========================================================================\n   2  * JCommon : a free general purpose class library for the Java(tm) platform\n   3  * ========================================================================\n   4  *\n   5  * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n   6  *    7  * Project Info:  http://www.jfree.org/jcommon/index.html\n   8  *\n   9  * This library is free software; you can redistribute it and/or modify it \n  10  * under the terms of the GNU Lesser General Public License as published by \n  11  * the Free Software Foundation; either version 2.1 of the License, or   12  * (at your option) any later version.\n  13  *\n  14  * This library is distributed in the hope that it will be useful, but \n  15  * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n  16  * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public   17  * License for more details.\n  18  *\n  19  * You should have received a copy of the GNU Lesser General Public\n  20  * License along with this library; if not, write to the Free Software\n  21  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,   22  * USA.\n  23  *\n  24  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \n  25  * in the United States and other countries.]\n  26  *\n  27  * ---------------  28  * SerialDate.java\n  29  * ---------------\n  30  * (C) Copyright 2001-2005, by Object Refinery Limited.\n  31  *\n  32  * Original Author:  David Gilbert (for Object Refinery Limited);  33  * Contributor(s):   -;\n  34  *\n  35  * $Id: SerialDate.java,v 1.7 2005/11/03 09:25:17 mungady Exp $\n  36  *\n  37  * Changes (from 11-Oct-2001)", "350 Appendix B: org.jfree.date.SerialDate\n  38  * --------------------------\n  39  * 11-Oct-2001 : Re-organised the class and moved it to new package \n  40  *               com.jrefinery.date (DG);\n  41  * 05-Nov-2001 : Added a getDescription() method, and eliminated NotableDate \n  42  *               class (DG);\n  43  * 12-Nov-2001 : IBD requires setDescription() method, now that NotableDate \n  44  *               class is gone (DG);  Changed getPreviousDayOfWeek(), \n  45  *               getFollowingDayOfWeek() and getNearestDayOfWeek() to correct   46  *               bugs (DG);\n  47  * 05-Dec-2001 : Fixed bug in SpreadsheetDate class (DG);\n  48  * 29-May-2002 : Moved the month constants into a separate interface \n  49  *               (MonthConstants) (DG);\n  50  * 27-Aug-2002 : Fixed bug in addMonths() method, thanks to N???levka Petr (DG);\n  51  * 03-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n  52  * 13-Mar-2003 : Implemented Serializable (DG);  53  * 29-May-2003 : Fixed bug in addMonths method (DG);\n  54  * 04-Sep-2003 : Implemented Comparable.  Updated the isInRange javadocs (DG);\n  55  * 05-Jan-2005 : Fixed bug in addYears() method (1096282) (DG);\n  56  * \n  57  */  58 \n  59 package org.jfree.date;\n  60 \n  61 import java.io.Serializable;\n  62 import java.text.DateFormatSymbols;  63 import java.text.SimpleDateFormat;\n  64 import java.util.Calendar;\n  65 import java.util.GregorianCalendar;\n  66   67 /**\n  68  *  An abstract class that defines our requirements for manipulating dates,\n  69  *  without tying down a particular implementation.\n  70  *  <P>\n  71  *  Requirement 1 : match at least what Excel does for dates;  72  *  Requirement 2 : class is immutable;\n  73  *  <P>\n  74  *  Why not just use java.util.Date?  We will, when it makes sense.  At times,  75  *  java.util.Date can be *too* precise - it represents an instant in time,\n  76  *  accurate to 1/1000th of a second (with the date itself depending on the\n  77  *  time-zone).  Sometimes we just want to represent a particular day (e.g. 21\n  78  *  January 2015) without concerning ourselves about the time of day, or the\n  79  *  time-zone, or anything else.  That's what we've defined SerialDate for.  80  *  <P>\n  81  *  You can call getInstance() to get a concrete subclass of SerialDate,\n  82  *  without worrying about the exact implementation.\n  83  *\n  84  * @author David Gilbert  85  */\n  86 public abstract class SerialDate implements Comparable, \n  87                                             Serializable, \n  88                                             MonthConstants {\n  89   90     /** For serialization. */\n  91     private static final long serialVersionUID = -293716040467423637L;\n  92\n  93     /** Date format symbols. */\n  94     public static final DateFormatSymbols  95         DATE_FORMAT_SYMBOLS = new SimpleDateFormat().getDateFormatSymbols();\n  96 \n  97     /** The serial number for 1 January 1900. */\n  98     public static final int SERIAL_LOWER_BOUND = 2;  99 \n 100     /** The serial number for 31 December 9999. */\n 101     public static final int SERIAL_UPPER_BOUND = 2958465;\n 102 \nListing B-1 (continued)\nSerialDate.Java", "351Appendix B: org.jfree.date.SerialDate\n 103     /** The lowest year value supported by this date format. */\n 104     public static final int MINIMUM_YEAR_SUPPORTED = 1900;\n 105 \n 106     /** The highest year value supported by this date format. */\n 107     public static final int MAXIMUM_YEAR_SUPPORTED = 9999;\n 108 \n 109     /** Useful constant for Monday. Equivalent to java.util.Calendar.MONDAY. */\n 110     public static final int MONDAY = Calendar.MONDAY; 111 \n 112     /** \n 113      * Useful constant for Tuesday. Equivalent to java.util.Calendar.TUESDAY. \n 114      */\n 115     public static final int TUESDAY = Calendar.TUESDAY;\n 116 \n 117     /**  118      * Useful constant for Wednesday. Equivalent to \n 119      * java.util.Calendar.WEDNESDAY. \n 120      */\n 121     public static final int WEDNESDAY = Calendar.WEDNESDAY;\n 122  123     /** \n 124      * Useful constant for Thrusday. Equivalent to java.util.Calendar.THURSDAY. \n 125      */\n 126     public static final int THURSDAY = Calendar.THURSDAY;\n 127  128     /** Useful constant for Friday. Equivalent to java.util.Calendar.FRIDAY. */\n 129     public static final int FRIDAY = Calendar.FRIDAY;\n 130 \n 131     /**  132      * Useful constant for Saturday. Equivalent to java.util.Calendar.SATURDAY.\n 133      */\n 134     public static final int SATURDAY = Calendar.SATURDAY;\n 135 \n 136     /** Useful constant for Sunday. Equivalent to java.util.Calendar.SUNDAY. */ 137     public static final int SUNDAY = Calendar.SUNDAY;\n 138 \n 139     /** The number of days in each month in non leap years. */ 140     static final int[] LAST_DAY_OF_MONTH =\n 141         {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n 142 \n 143     /** The number of days in a (non-leap) year up to the end of each month. */\n 144     static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH = 145         {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};\n 146 \n 147     /** The number of days in a year up to the end of the preceding month. */\n 148     static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n 149         {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365}; 150 \n 151     /** The number of days in a leap year up to the end of each month. */\n 152     static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH =\n 153         {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};\n 154  155     /** \n 156      * The number of days in a leap year up to the end of the preceding month. \n 157      */\n 158     static final int[] \n 159         LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH = 160             {0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};\n 161 \n 162     /** A useful constant for referring to the first week in a month. */\n 163     public static final int FIRST_WEEK_IN_MONTH = 1; 164 \nListing B-1 (continued)\nSerialDate.Java", "352 Appendix B: org.jfree.date.SerialDate\n 165     /** A useful constant for referring to the second week in a month. */\n 166     public static final int SECOND_WEEK_IN_MONTH = 2;\n 167 \n 168     /** A useful constant for referring to the third week in a month. */\n 169     public static final int THIRD_WEEK_IN_MONTH = 3;\n 170 \n 171     /** A useful constant for referring to the fourth week in a month. */\n 172     public static final int FOURTH_WEEK_IN_MONTH = 4; 173 \n 174     /** A useful constant for referring to the last week in a month. */\n 175     public static final int LAST_WEEK_IN_MONTH = 0;\n 176 \n 177     /** Useful range constant. */\n 178     public static final int INCLUDE_NONE = 0;\n 179  180     /** Useful range constant. */\n 181     public static final int INCLUDE_FIRST = 1;\n 182 \n 183     /** Useful range constant. */\n 184     public static final int INCLUDE_SECOND = 2; 185 \n 186     /** Useful range constant. */\n 187     public static final int INCLUDE_BOTH = 3;\n 188 \n 189     /**  190      * Useful constant for specifying a day of the week relative to a fixed \n 191      * date. \n 192      */\n 193     public static final int PRECEDING = -1; 194 \n 195     /** \n 196      * Useful constant for specifying a day of the week relative to a fixed \n 197      * date. \n 198      */ 199     public static final int NEAREST = 0;\n 200 \n 201     /**  202      * Useful constant for specifying a day of the week relative to a fixed \n 203      * date. \n 204      */\n 205     public static final int FOLLOWING = 1;\n 206  207     /** A description for the date. */\n 208     private String description;\n 209 \n 210     /**\n 211      * Default constructor. 212      */\n 213     protected SerialDate() {\n 214     }\n 215 \n 216     /** 217      * Returns <code>true</code> if the supplied integer code represents a \n 218      * valid day-of-the-week, and <code>false</code> otherwise.\n 219      *\n 220      * @param code  the code being checked for validity.\n 221      * 222      * @return <code>true</code> if the supplied integer code represents a \n 223      *         valid day-of-the-week, and <code>false</code> otherwise.\n 224      */\n 225     public static boolean isValidWeekdayCode(final int code) { 226 \nListing B-1 (continued)\nSerialDate.Java", "353Appendix B: org.jfree.date.SerialDate\n 227         switch(code) {\n 228             case SUNDAY: \n 229             case MONDAY: \n 230             case TUESDAY: \n 231             case WEDNESDAY: \n 232             case THURSDAY: \n 233             case FRIDAY: \n 234             case SATURDAY:  235                 return true;\n 236             default: \n 237                 return false;\n 238         }\n 239 \n 240     }\n 241  242     /**\n 243      * Converts the supplied string to a day of the week.\n 244      *\n 245      * @param s  a string representing the day of the week.\n 246      * 247      * @return <code>-1</code> if the string is not convertable, the day of \n 248      *         the week otherwise.\n 249      */\n 250     public static int stringToWeekdayCode(String s) {\n 251  252         final String[] shortWeekdayNames \n 253             = DATE_FORMAT_SYMBOLS.getShortWeekdays();\n 254         final String[] weekDayNames = DATE_FORMAT_SYMBOLS.getWeekdays();\n 255  256         int result = -1;\n 257         s = s.trim();\n 258         for (int i = 0; i < weekDayNames.length; i++) {\n 259             if (s.equals(shortWeekdayNames[i])) {\n 260                 result = i; 261                 break;\n 262             }\n 263             if (s.equals(weekDayNames[i])) { 264                 result = i;\n 265                 break;\n 266             }\n 267         }\n 268         return result; 269 \n 270     }\n 271 \n 272     /**\n 273      * Returns a string representing the supplied day-of-the-week. 274      * <P>\n 275      * Need to find a better approach.\n 276      *\n 277      * @param weekday  the day of the week.\n 278      * 279      * @return a string representing the supplied day-of-the-week.\n 280      */\n 281     public static String weekdayCodeToString(final int weekday) {\n 282 \n 283         final String[] weekdays = DATE_FORMAT_SYMBOLS.getWeekdays(); 284         return weekdays[weekday];\n 285 \n 286     }\n 287  288     /**\nListing B-1 (continued)\nSerialDate.Java", "354 Appendix B: org.jfree.date.SerialDate\n 289      * Returns an array of month names.\n 290      *\n 291      * @return an array of month names.\n 292      */\n 293     public static String[] getMonths() {\n 294 \n 295         return getMonths(false);\n 296  297     }\n 298 \n 299     /**\n 300      * Returns an array of month names.\n 301      *\n 302      * @param shortened  a flag indicating that shortened month names should \n 303      *                   be returned. 304      *\n 305      * @return an array of month names.\n 306      */\n 307     public static String[] getMonths(final boolean shortened) {\n 308  309         if (shortened) {\n 310             return DATE_FORMAT_SYMBOLS.getShortMonths();\n 311         }\n 312         else {\n 313             return DATE_FORMAT_SYMBOLS.getMonths(); 314         }\n 315 \n 316     }\n 317  318     /**\n 319      * Returns true if the supplied integer code represents a valid month.\n 320      *\n 321      * @param code  the code being checked for validity.\n 322      * 323      * @return <code>true</code> if the supplied integer code represents a \n 324      *         valid month.\n 325      */ 326     public static boolean isValidMonthCode(final int code) {\n 327 \n 328         switch(code) {\n 329             case JANUARY: \n 330             case FEBRUARY:  331             case MARCH: \n 332             case APRIL: \n 333             case MAY: \n 334             case JUNE: \n 335             case JULY:  336             case AUGUST: \n 337             case SEPTEMBER: \n 338             case OCTOBER: \n 339             case NOVEMBER: \n 340             case DECEMBER:  341                 return true;\n 342             default: \n 343                 return false;\n 344         }\n 345  346     }\n 347 \n 348     /**\n 349      * Returns the quarter for the specified month. 350      *\nListing B-1 (continued)\nSerialDate.Java", "355Appendix B: org.jfree.date.SerialDate\n 351      * @param code  the month code (1-12).\n 352      *\n 353      * @return the quarter that the month belongs to.\n 354      * @throws java.lang.IllegalArgumentException\n 355      */\n 356     public static int monthCodeToQuarter(final int code) {\n 357 \n 358         switch(code) { 359             case JANUARY: \n 360             case FEBRUARY: \n 361             case MARCH: return 1;\n 362             case APRIL: \n 363             case MAY: \n 364             case JUNE: return 2;\n 365             case JULY:  366             case AUGUST: \n 367             case SEPTEMBER: return 3;\n 368             case OCTOBER: \n 369             case NOVEMBER: \n 370             case DECEMBER: return 4; 371             default: throw new IllegalArgumentException(\n 372                 \"SerialDate.monthCodeToQuarter: invalid month code.\");\n 373         }\n 374 \n 375     } 376 \n 377     /**\n 378      * Returns a string representing the supplied month.\n 379      * <P> 380      * The string returned is the long form of the month name taken from the \n 381      * default locale.\n 382      *\n 383      * @param month  the month.\n 384      * 385      * @return a string representing the supplied month.\n 386      */\n 387     public static String monthCodeToString(final int month) { 388 \n 389         return monthCodeToString(month, false);\n 390 \n 391     }\n 392  393     /**\n 394      * Returns a string representing the supplied month.\n 395      * <P>\n 396      * The string returned is the long or short form of the month name taken \n 397      * from the default locale. 398      *\n 399      * @param month  the month.\n 400      * @param shortened  if <code>true</code> return the abbreviation of the \n 401      *                   month.\n 402      * 403      * @return a string representing the supplied month.\n 404      * @throws java.lang.IllegalArgumentException\n 405      */\n 406     public static String monthCodeToString(final int month, \n 407                                            final boolean shortened) { 408 \n 409         // check arguments...\n 410         if (!isValidMonthCode(month)) {\n 411             throw new IllegalArgumentException( 412                 \"SerialDate.monthCodeToString: month outside valid range.\");\nListing B-1 (continued)\nSerialDate.Java", "356 Appendix B: org.jfree.date.SerialDate\n 413         }\n 414 \n 415         final String[] months;\n 416 \n 417         if (shortened) {\n 418             months = DATE_FORMAT_SYMBOLS.getShortMonths();\n 419         }\n 420         else { 421             months = DATE_FORMAT_SYMBOLS.getMonths();\n 422         }\n 423 \n 424         return months[month - 1];\n 425 \n 426     }\n 427  428     /**\n 429      * Converts a string to a month code.\n 430      * <P>\n 431      * This method will return one of the constants JANUARY, FEBRUARY, ..., \n 432      * DECEMBER that corresponds to the string.  If the string is not  433      * recognised, this method returns -1.\n 434      *\n 435      * @param s  the string to parse.\n 436      *\n 437      * @return <code>-1</code> if the string is not parseable, the month of the 438      *         year otherwise.\n 439      */\n 440     public static int stringToMonthCode(String s) {\n 441  442         final String[] shortMonthNames = DATE_FORMAT_SYMBOLS.getShortMonths();\n 443         final String[] monthNames = DATE_FORMAT_SYMBOLS.getMonths();\n 444 \n 445         int result = -1;\n 446         s = s.trim(); 447 \n 448         // first try parsing the string as an integer (1-12)...\n 449         try { 450             result = Integer.parseInt(s);\n 451         }\n 452         catch (NumberFormatException e) {\n 453             // suppress\n 454         } 455 \n 456         // now search through the month names...\n 457         if ((result < 1) || (result > 12)) {\n 458             for (int i = 0; i < monthNames.length; i++) {\n 459                 if (s.equals(shortMonthNames[i])) { 460                     result = i + 1;\n 461                     break;\n 462                 }\n 463                 if (s.equals(monthNames[i])) {\n 464                     result = i + 1; 465                     break;\n 466                 }\n 467             }\n 468         }\n 469  470         return result;\n 471 \n 472     }\n 473  474     /**\nListing B-1 (continued)\nSerialDate.Java", "357Appendix B: org.jfree.date.SerialDate\n 475      * Returns true if the supplied integer code represents a valid \n 476      * week-in-the-month, and false otherwise.\n 477      *\n 478      * @param code  the code being checked for validity.\n 479      * @return <code>true</code> if the supplied integer code represents a \n 480      *         valid week-in-the-month.\n 481      */\n 482     public static boolean isValidWeekInMonthCode(final int code) { 483 \n 484         switch(code) {\n 485             case FIRST_WEEK_IN_MONTH: \n 486             case SECOND_WEEK_IN_MONTH: \n 487             case THIRD_WEEK_IN_MONTH: \n 488             case FOURTH_WEEK_IN_MONTH: \n 489             case LAST_WEEK_IN_MONTH: return true; 490             default: return false;\n 491         }\n 492 \n 493     }\n 494  495     /**\n 496      * Determines whether or not the specified year is a leap year.\n 497      *\n 498      * @param yyyy  the year (in the range 1900 to 9999).\n 499      * 500      * @return <code>true</code> if the specified year is a leap year.\n 501      */\n 502     public static boolean isLeapYear(final int yyyy) {\n 503  504         if ((yyyy % 4) != 0) {\n 505             return false;\n 506         }\n 507         else if ((yyyy % 400) == 0) {\n 508             return true; 509         }\n 510         else if ((yyyy % 100) == 0) {\n 511             return false; 512         }\n 513         else {\n 514             return true;\n 515         }\n 516  517     }\n 518 \n 519     /**\n 520      * Returns the number of leap years from 1900 to the specified year \n 521      * INCLUSIVE. 522      * <P>\n 523      * Note that 1900 is not a leap year.\n 524      *\n 525      * @param yyyy  the year (in the range 1900 to 9999).\n 526      * 527      * @return the number of leap years from 1900 to the specified year.\n 528      */\n 529     public static int leapYearCount(final int yyyy) {\n 530 \n 531         final int leap4 = (yyyy - 1896) / 4; 532         final int leap100 = (yyyy - 1800) / 100;\n 533         final int leap400 = (yyyy - 1600) / 400;\n 534         return leap4 - leap100 + leap400;\n 535  536     }\nListing B-1 (continued)\nSerialDate.Java", "358 Appendix B: org.jfree.date.SerialDate\n 537 \n 538     /**\n 539      * Returns the number of the last day of the month, taking into account \n 540      * leap years.\n 541      *\n 542      * @param month  the month.\n 543      * @param yyyy  the year (in the range 1900 to 9999).\n 544      * 545      * @return the number of the last day of the month.\n 546      */\n 547     public static int lastDayOfMonth(final int month, final int yyyy) {\n 548 \n 549         final int result = LAST_DAY_OF_MONTH[month];\n 550         if (month != FEBRUARY) {\n 551             return result; 552         }\n 553         else if (isLeapYear(yyyy)) {\n 554             return result + 1;\n 555         }\n 556         else { 557             return result;\n 558         }\n 559 \n 560     }\n 561  562     /**\n 563      * Creates a new date by adding the specified number of days to the base \n 564      * date.\n 565      * 566      * @param days  the number of days to add (can be negative).\n 567      * @param base  the base date.\n 568      *\n 569      * @return a new date.\n 570      */ 571     public static SerialDate addDays(final int days, final SerialDate base) {\n 572 \n 573         final int serialDayNumber = base.toSerial() + days; 574         return SerialDate.createInstance(serialDayNumber);\n 575 \n 576     }\n 577 \n 578     /** 579      * Creates a new date by adding the specified number of months to the base \n 580      * date.\n 581      * <P>\n 582      * If the base date is close to the end of the month, the day on the result\n 583      * may be adjusted slightly:  31 May + 1 month = 30 June. 584      *\n 585      * @param months  the number of months to add (can be negative).\n 586      * @param base  the base date.\n 587      *\n 588      * @return a new date. 589      */\n 590     public static SerialDate addMonths(final int months, \n 591                                        final SerialDate base) {\n 592 \n 593         final int yy = (12 * base.getYYYY() + base.getMonth() + months - 1)  594                        / 12;\n 595         final int mm = (12 * base.getYYYY() + base.getMonth() + months - 1) \n 596                        % 12 + 1;\n 597         final int dd = Math.min( 598             base.getDayOfMonth(), SerialDate.lastDayOfMonth(mm, yy)\nListing B-1 (continued)\nSerialDate.Java", "359Appendix B: org.jfree.date.SerialDate\n 599         );\n 600         return SerialDate.createInstance(dd, mm, yy);\n 601 \n 602     }\n 603 \n 604     /**\n 605      * Creates a new date by adding the specified number of years to the base \n 606      * date. 607      *\n 608      * @param years  the number of years to add (can be negative).\n 609      * @param base  the base date.\n 610      *\n 611      * @return A new date.\n 612      */\n 613     public static SerialDate addYears(final int years, final SerialDate base) { 614 \n 615         final int baseY = base.getYYYY();\n 616         final int baseM = base.getMonth();\n 617         final int baseD = base.getDayOfMonth();\n 618  619         final int targetY = baseY + years;\n 620         final int targetD = Math.min(\n 621             baseD, SerialDate.lastDayOfMonth(baseM, targetY)\n 622         );\n 623  624         return SerialDate.createInstance(targetD, baseM, targetY);\n 625 \n 626     }\n 627  628     /**\n 629      * Returns the latest date that falls on the specified day-of-the-week and \n 630      * is BEFORE the base date.\n 631      *\n 632      * @param targetWeekday  a code for the target day-of-the-week. 633      * @param base  the base date.\n 634      *\n 635      * @return the latest date that falls on the specified day-of-the-week and  636      *         is BEFORE the base date.\n 637      */\n 638     public static SerialDate getPreviousDayOfWeek(final int targetWeekday, \n 639                                                   final SerialDate base) {\n 640  641         // check arguments...\n 642         if (!SerialDate.isValidWeekdayCode(targetWeekday)) {\n 643             throw new IllegalArgumentException(\n 644                 \"Invalid day-of-the-week code.\"\n 645             ); 646         }\n 647 \n 648         // find the date...\n 649         final int adjust;\n 650         final int baseDOW = base.getDayOfWeek(); 651         if (baseDOW > targetWeekday) {\n 652             adjust = Math.min(0, targetWeekday - baseDOW);\n 653         }\n 654         else {\n 655             adjust = -7 + Math.max(0, targetWeekday - baseDOW); 656         }\n 657 \n 658         return SerialDate.addDays(adjust, base);\n 659  660     }\nListing B-1 (continued)\nSerialDate.Java", "360 Appendix B: org.jfree.date.SerialDate\n 661 \n 662     /**\n 663      * Returns the earliest date that falls on the specified day-of-the-week\n 664      * and is AFTER the base date.\n 665      *\n 666      * @param targetWeekday  a code for the target day-of-the-week.\n 667      * @param base  the base date.\n 668      * 669      * @return the earliest date that falls on the specified day-of-the-week \n 670      *         and is AFTER the base date.\n 671      */\n 672     public static SerialDate getFollowingDayOfWeek(final int targetWeekday, \n 673                                                    final SerialDate base) {\n 674 \n 675         // check arguments... 676         if (!SerialDate.isValidWeekdayCode(targetWeekday)) {\n 677             throw new IllegalArgumentException(\n 678                 \"Invalid day-of-the-week code.\"\n 679             );\n 680         } 681 \n 682         // find the date...\n 683         final int adjust;\n 684         final int baseDOW = base.getDayOfWeek();\n 685         if (baseDOW > targetWeekday) { 686             adjust = 7 + Math.min(0, targetWeekday - baseDOW);\n 687         }\n 688         else {\n 689             adjust = Math.max(0, targetWeekday - baseDOW); 690         }\n 691 \n 692         return SerialDate.addDays(adjust, base);\n 693     }\n 694  695     /**\n 696      * Returns the date that falls on the specified day-of-the-week and is\n 697      * CLOSEST to the base date. 698      *\n 699      * @param targetDOW  a code for the target day-of-the-week.\n 700      * @param base  the base date.\n 701      *\n 702      * @return the date that falls on the specified day-of-the-week and is  703      *         CLOSEST to the base date.\n 704      */\n 705     public static SerialDate getNearestDayOfWeek(final int targetDOW,\n 706                                                  final SerialDate base) {\n 707  708         // check arguments...\n 709         if (!SerialDate.isValidWeekdayCode(targetDOW)) {\n 710             throw new IllegalArgumentException(\n 711                 \"Invalid day-of-the-week code.\"\n 712             ); 713         }\n 714 \n 715         // find the date...\n 716         final int baseDOW = base.getDayOfWeek();\n 717         int adjust = -Math.abs(targetDOW - baseDOW); 718         if (adjust >= 4) {\n 719             adjust = 7 - adjust;\n 720         }\n 721         if (adjust <= -4) { 722             adjust = 7 + adjust;\nListing B-1 (continued)\nSerialDate.Java", "361Appendix B: org.jfree.date.SerialDate\n 723         }\n 724         return SerialDate.addDays(adjust, base);\n 725 \n 726     }\n 727 \n 728     /**\n 729      * Rolls the date forward to the last day of the month.\n 730      * 731      * @param base  the base date.\n 732      *\n 733      * @return a new serial date.\n 734      */\n 735     public SerialDate getEndOfCurrentMonth(final SerialDate base) {\n 736         final int last = SerialDate.lastDayOfMonth(\n 737             base.getMonth(), base.getYYYY() 738         );\n 739         return SerialDate.createInstance(last, base.getMonth(), base.getYYYY());\n 740     }\n 741 \n 742     /** 743      * Returns a string corresponding to the week-in-the-month code.\n 744      * <P>\n 745      * Need to find a better approach.\n 746      *\n 747      * @param count  an integer code representing the week-in-the-month. 748      *\n 749      * @return a string corresponding to the week-in-the-month code.\n 750      */\n 751     public static String weekInMonthToString(final int count) { 752 \n 753         switch (count) {\n 754             case SerialDate.FIRST_WEEK_IN_MONTH : return \"First\";\n 755             case SerialDate.SECOND_WEEK_IN_MONTH : return \"Second\";\n 756             case SerialDate.THIRD_WEEK_IN_MONTH : return \"Third\"; 757             case SerialDate.FOURTH_WEEK_IN_MONTH : return \"Fourth\";\n 758             case SerialDate.LAST_WEEK_IN_MONTH : return \"Last\";\n 759             default : 760                 return \"SerialDate.weekInMonthToString(): invalid code.\";\n 761         }\n 762 \n 763     }\n 764  765     /**\n 766      * Returns a string representing the supplied 'relative'.\n 767      * <P>\n 768      * Need to find a better approach.\n 769      * 770      * @param relative  a constant representing the 'relative'.\n 771      *\n 772      * @return a string representing the supplied 'relative'.\n 773      */\n 774     public static String relativeToString(final int relative) { 775 \n 776         switch (relative) {\n 777             case SerialDate.PRECEDING : return \"Preceding\";\n 778             case SerialDate.NEAREST : return \"Nearest\";\n 779             case SerialDate.FOLLOWING : return \"Following\"; 780             default : return \"ERROR : Relative To String\";\n 781         }\n 782 \n 783     } 784 \nListing B-1 (continued)\nSerialDate.Java", "362 Appendix B: org.jfree.date.SerialDate\n 785     /**\n 786      * Factory method that returns an instance of some concrete subclass of \n 787      * {@link SerialDate}.\n 788      *\n 789      * @param day  the day (1-31).\n 790      * @param month  the month (1-12).\n 791      * @param yyyy  the year (in the range 1900 to 9999).\n 792      * 793      * @return An instance of {@link SerialDate}.\n 794      */\n 795     public static SerialDate createInstance(final int day, final int month, \n 796                                             final int yyyy) {\n 797         return new SpreadsheetDate(day, month, yyyy);\n 798     }\n 799  800     /**\n 801      * Factory method that returns an instance of some concrete subclass of \n 802      * {@link SerialDate}.\n 803      *\n 804      * @param serial  the serial number for the day (1 January 1900 = 2). 805      *\n 806      * @return a instance of SerialDate.\n 807      */\n 808     public static SerialDate createInstance(final int serial) {\n 809         return new SpreadsheetDate(serial); 810     }\n 811 \n 812     /**\n 813      * Factory method that returns an instance of a subclass of SerialDate. 814      *\n 815      * @param date  A Java date object.\n 816      *\n 817      * @return a instance of SerialDate.\n 818      */ 819     public static SerialDate createInstance(final java.util.Date date) {\n 820 \n 821         final GregorianCalendar calendar = new GregorianCalendar(); 822         calendar.setTime(date);\n 823         return new SpreadsheetDate(calendar.get(Calendar.DATE),\n 824                                    calendar.get(Calendar.MONTH) + 1,\n 825                                    calendar.get(Calendar.YEAR));\n 826  827     }\n 828 \n 829     /**\n 830      * Returns the serial number for the date, where 1 January 1900 = 2 (this\n 831      * corresponds, almost, to the numbering system used in Microsoft Excel for 832      * Windows and Lotus 1-2-3).\n 833      *\n 834      * @return the serial number for the date.\n 835      */\n 836     public abstract int toSerial(); 837 \n 838     /**\n 839      * Returns a java.util.Date.  Since java.util.Date has more precision than\n 840      * SerialDate, we need to define a convention for the 'time of day'.\n 841      * 842      * @return this as <code>java.util.Date</code>.\n 843      */\n 844     public abstract java.util.Date toDate();\n 845  846     /**\nListing B-1 (continued)\nSerialDate.Java", "363Appendix B: org.jfree.date.SerialDate\n 847      * Returns a description of the date.\n 848      *\n 849      * @return a description of the date.\n 850      */\n 851     public String getDescription() {\n 852         return this.description;\n 853     }\n 854  855     /**\n 856      * Sets the description for the date.\n 857      *\n 858      * @param description  the new description for the date.\n 859      */\n 860     public void setDescription(final String description) {\n 861         this.description = description; 862     }\n 863 \n 864     /**\n 865      * Converts the date to a string.\n 866      * 867      * @return  a string representation of the date.\n 868      */\n 869     public String toString() {\n 870         return getDayOfMonth() + \"-\" + SerialDate.monthCodeToString(getMonth())\n 871                                + \"-\" + getYYYY(); 872     }\n 873 \n 874     /**\n 875      * Returns the year (assume a valid range of 1900 to 9999). 876      *\n 877      * @return the year.\n 878      */\n 879     public abstract int getYYYY();\n 880  881     /**\n 882      * Returns the month (January = 1, February = 2, March = 3).\n 883      * 884      * @return the month of the year.\n 885      */\n 886     public abstract int getMonth();\n 887 \n 888     /** 889      * Returns the day of the month.\n 890      *\n 891      * @return the day of the month.\n 892      */\n 893     public abstract int getDayOfMonth(); 894 \n 895     /**\n 896      * Returns the day of the week.\n 897      *\n 898      * @return the day of the week. 899      */\n 900     public abstract int getDayOfWeek();\n 901 \n 902     /**\n 903      * Returns the difference (in days) between this date and the specified  904      * 'other' date.\n 905      * <P>\n 906      * The result is positive if this date is after the 'other' date and\n 907      * negative if it is before the 'other' date. 908      *\nListing B-1 (continued)\nSerialDate.Java", "364 Appendix B: org.jfree.date.SerialDate\n 909      * @param other  the date being compared to.\n 910      *\n 911      * @return the difference between this and the other date.\n 912      */\n 913     public abstract int compare(SerialDate other);\n 914 \n 915     /**\n 916      * Returns true if this SerialDate represents the same date as the  917      * specified SerialDate.\n 918      *\n 919      * @param other  the date being compared to.\n 920      *\n 921      * @return <code>true</code> if this SerialDate represents the same date as \n 922      *         the specified SerialDate.\n 923      */ 924     public abstract boolean isOn(SerialDate other);\n 925 \n 926     /**\n 927      * Returns true if this SerialDate represents an earlier date compared to\n 928      * the specified SerialDate. 929      *\n 930      * @param other  The date being compared to.\n 931      *\n 932      * @return <code>true</code> if this SerialDate represents an earlier date \n 933      *         compared to the specified SerialDate. 934      */\n 935     public abstract boolean isBefore(SerialDate other);\n 936 \n 937     /** 938      * Returns true if this SerialDate represents the same date as the \n 939      * specified SerialDate.\n 940      *\n 941      * @param other  the date being compared to.\n 942      * 943      * @return <code>true<code> if this SerialDate represents the same date\n 944      *         as the specified SerialDate.\n 945      */ 946     public abstract boolean isOnOrBefore(SerialDate other);\n 947 \n 948     /**\n 949      * Returns true if this SerialDate represents the same date as the \n 950      * specified SerialDate. 951      *\n 952      * @param other  the date being compared to.\n 953      *\n 954      * @return <code>true</code> if this SerialDate represents the same date\n 955      *         as the specified SerialDate. 956      */\n 957     public abstract boolean isAfter(SerialDate other);\n 958 \n 959     /**\n 960      * Returns true if this SerialDate represents the same date as the  961      * specified SerialDate.\n 962      *\n 963      * @param other  the date being compared to.\n 964      *\n 965      * @return <code>true</code> if this SerialDate represents the same date 966      *         as the specified SerialDate.\n 967      */\n 968     public abstract boolean isOnOrAfter(SerialDate other);\n 969  970     /**\n 971      * Returns <code>true</code> if this {@link SerialDate} is within the \nListing B-1 (continued)\nSerialDate.Java", "365Appendix B: org.jfree.date.SerialDate\n 972      * specified range (INCLUSIVE).  The date order of d1 and d2 is not \n 973      * important.\n 974      *\n 975      * @param d1  a boundary date for the range.\n 976      * @param d2  the other boundary date for the range.\n 977      *\n 978      * @return A boolean.\n 979      */ 980     public abstract boolean isInRange(SerialDate d1, SerialDate d2);\n 981 \n 982     /**\n 983      * Returns <code>true</code> if this {@link SerialDate} is within the \n 984      * specified range (caller specifies whether or not the end-points are \n 985      * included).  The date order of d1 and d2 is not important.\n 986      * 987      * @param d1  a boundary date for the range.\n 988      * @param d2  the other boundary date for the range.\n 989      * @param include  a code that controls whether or not the start and end \n 990      *                 dates are included in the range.\n 991      * 992      * @return A boolean.\n 993      */\n 994     public abstract boolean isInRange(SerialDate d1, SerialDate d2, \n 995                                       int include);\n 996  997     /**\n 998      * Returns the latest date that falls on the specified day-of-the-week and\n 999      * is BEFORE this date.\n1000      *1001      * @param targetDOW  a code for the target day-of-the-week.\n1002      *\n1003      * @return the latest date that falls on the specified day-of-the-week and\n1004      *         is BEFORE this date.\n1005      */1006     public SerialDate getPreviousDayOfWeek(final int targetDOW) {\n1007         return getPreviousDayOfWeek(targetDOW, this);\n1008     }1009\n1010     /**\n1011      * Returns the earliest date that falls on the specified day-of-the-week\n1012      * and is AFTER this date.\n1013      *1014      * @param targetDOW  a code for the target day-of-the-week.\n1015      *\n1016      * @return the earliest date that falls on the specified day-of-the-week\n1017      *         and is AFTER this date.\n1018      */1019     public SerialDate getFollowingDayOfWeek(final int targetDOW) {\n1020         return getFollowingDayOfWeek(targetDOW, this);\n1021     }\n1022\n1023     /**1024      * Returns the nearest date that falls on the specified day-of-the-week.\n1025      *\n1026      * @param targetDOW  a code for the target day-of-the-week.\n1027      *\n1028      * @return the nearest date that falls on the specified day-of-the-week.1029      */\n1030     public SerialDate getNearestDayOfWeek(final int targetDOW) {\n1031         return getNearestDayOfWeek(targetDOW, this);\n1032     }1033\n1034 }\nListing B-1 (continued)\nSerialDate.Java", "366 Appendix B: org.jfree.date.SerialDate\nListing B-2 \nSerialDateTest.java\n   1 /* ========================================================================\n   2  * JCommon : a free general purpose class library for the Java(tm) platform\n   3  * ========================================================================\n   4  *\n   5  * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n   6  * \n   7  * Project Info:  http://www.jfree.org/jcommon/index.html\n   8  *   9  * This library is free software; you can redistribute it and/or modify it \n  10  * under the terms of the GNU Lesser General Public License as published by \n  11  * the Free Software Foundation; either version 2.1 of the License, or \n  12  * (at your option) any later version.\n  13  *\n  14  * This library is distributed in the hope that it will be useful, but \n  15  * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY   16  * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \n  17  * License for more details.\n  18  *\n  19  * You should have received a copy of the GNU Lesser General Public\n  20  * License along with this library; if not, write to the Free Software  21  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \n  22  * USA.\n  23  *\n  24  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \n  25  * in the United States and other countries.]  26  *\n  27  * --------------------\n  28  * SerialDateTests.java\n  29  * --------------------  30  * (C) Copyright 2001-2005, by Object Refinery Limited.\n  31  *\n  32  * Original Author:  David Gilbert (for Object Refinery Limited);\n  33  * Contributor(s):   -;\n  34  *  35  * $Id: SerialDateTests.java,v 1.6 2005/11/16 15:58:40 taqua Exp $\n  36  *\n  37  * Changes  38  * -------\n  39  * 15-Nov-2001 : Version 1 (DG);\n  40  * 25-Jun-2002 : Removed unnecessary import (DG);\n  41  * 24-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n  42  * 13-Mar-2003 : Added serialization test (DG);  43  * 05-Jan-2005 : Added test for bug report 1096282 (DG);\n  44  *\n  45  */\n  46 \n  47 package org.jfree.date.junit;  48 \n  49 import java.io.ByteArrayInputStream;\n  50 import java.io.ByteArrayOutputStream;\n  51 import java.io.ObjectInput;\n  52 import java.io.ObjectInputStream;  53 import java.io.ObjectOutput;\n  54 import java.io.ObjectOutputStream;\n  55 \n  56 import junit.framework.Test;\n  57 import junit.framework.TestCase;  58 import junit.framework.TestSuite;\n  59 \n  60 import org.jfree.date.MonthConstants;  61 import org.jfree.date.SerialDate;\n  62", "367Appendix B: org.jfree.date.SerialDate\n  63 /**\n  64  * Some JUnit tests for the {@link SerialDate} class.\n  65  */\n  66 public class SerialDateTests extends TestCase {\n  67 \n  68     /** Date representing November 9. */\n  69     private SerialDate nov9Y2001;\n  70   71     /**\n  72      * Creates a new test case.\n  73      *\n  74      * @param name  the name.\n  75      */\n  76     public SerialDateTests(final String name) {\n  77         super(name);  78     }\n  79 \n  80     /**\n  81      * Returns a test suite for the JUnit test runner.\n  82      *  83      * @return The test suite.\n  84      */\n  85     public static Test suite() {\n  86         return new TestSuite(SerialDateTests.class);\n  87     }  88 \n  89     /**\n  90      * Problem set up.\n  91      */  92     protected void setUp() {\n  93         this.nov9Y2001 = SerialDate.createInstance(9, MonthConstants.NOVEMBER, 2001);\n  94     }\n  95 \n  96     /**  97      * 9 Nov 2001 plus two months should be 9 Jan 2002.\n  98      */\n  99     public void testAddMonthsTo9Nov2001() { 100         final SerialDate jan9Y2002 = SerialDate.addMonths(2, this.nov9Y2001);\n 101         final SerialDate answer = SerialDate.createInstance(9, 1, 2002);\n 102         assertEquals(answer, jan9Y2002);\n 103     }\n 104  105     /**\n 106      * A test case for a reported bug, now fixed.\n 107      */\n 108     public void testAddMonthsTo5Oct2003() {\n 109         final SerialDate d1 = SerialDate.createInstance(5, MonthConstants.OCTOBER, 2003); 110         final SerialDate d2 = SerialDate.addMonths(2, d1);\n 111         assertEquals(d2, SerialDate.createInstance(5, MonthConstants.DECEMBER, 2003));\n 112     }\n 113 \n 114     /** 115      * A test case for a reported bug, now fixed.\n 116      */\n 117     public void testAddMonthsTo1Jan2003() {\n 118         final SerialDate d1 = SerialDate.createInstance(1, MonthConstants.JANUARY, 2003);\n 119         final SerialDate d2 = SerialDate.addMonths(0, d1); 120         assertEquals(d2, d1);\n 121     }\n 122  123     /**\n 124      * Monday preceding Friday 9 November 2001 should be 5 November.\nListing B-2 (continued)\nSerialDateTest.java", "368 Appendix B: org.jfree.date.SerialDate\n 125      */\n 126     public void testMondayPrecedingFriday9Nov2001() {\n 127         SerialDate mondayBefore = SerialDate.getPreviousDayOfWeek(\n 128             SerialDate.MONDAY, this.nov9Y2001\n 129         );\n 130         assertEquals(5, mondayBefore.getDayOfMonth());\n 131     }\n 132  133     /**\n 134      * Monday following Friday 9 November 2001 should be 12 November.\n 135      */\n 136     public void testMondayFollowingFriday9Nov2001() {\n 137         SerialDate mondayAfter = SerialDate.getFollowingDayOfWeek(\n 138             SerialDate.MONDAY, this.nov9Y2001\n 139         ); 140         assertEquals(12, mondayAfter.getDayOfMonth());\n 141     }\n 142 \n 143     /**\n 144      * Monday nearest Friday 9 November 2001 should be 12 November. 145      */\n 146     public void testMondayNearestFriday9Nov2001() {\n 147         SerialDate mondayNearest = SerialDate.getNearestDayOfWeek(\n 148             SerialDate.MONDAY, this.nov9Y2001\n 149         ); 150         assertEquals(12, mondayNearest.getDayOfMonth());\n 151     }\n 152 \n 153     /** 154      * The Monday nearest to 22nd January 1970 falls on the 19th.\n 155      */\n 156     public void testMondayNearest22Jan1970() {\n 157         SerialDate jan22Y1970 = SerialDate.createInstance(22, MonthConstants.JANUARY, 1970);\n 158         SerialDate mondayNearest=SerialDate.getNearestDayOfWeek(SerialDate.MONDAY, jan22Y1970); 159         assertEquals(19, mondayNearest.getDayOfMonth());\n 160     }\n 161  162     /**\n163      * Problem that the conversion of days to strings returns the right result.  Actually, this \n 164      * result depends on the Locale so this test needs to be modified.\n 165      */\n 166     public void testWeekdayCodeToString() { 167 \n 168         final String test = SerialDate.weekdayCodeToString(SerialDate.SATURDAY);\n 169         assertEquals(\"Saturday\", test);\n 170 \n 171     } 172 \n 173     /**\n 174      * Test the conversion of a string to a weekday.  Note that this test will fail if the \n 175      * default locale doesn't use English weekday names...devise a better test!\n 176      */ 177     public void testStringToWeekday() {\n 178 \n 179         int weekday = SerialDate.stringToWeekdayCode(\"Wednesday\");\n 180         assertEquals(SerialDate.WEDNESDAY, weekday);\n 181  182         weekday = SerialDate.stringToWeekdayCode(\" Wednesday \");\n 183         assertEquals(SerialDate.WEDNESDAY, weekday);\n 184 \nListing B-2 (continued)\nSerialDateTest.java", "369Appendix B: org.jfree.date.SerialDate\n 185         weekday = SerialDate.stringToWeekdayCode(\"Wed\");\n 186         assertEquals(SerialDate.WEDNESDAY, weekday);\n 187 \n 188     }\n 189 \n 190     /**\n 191      * Test the conversion of a string to a month.  Note that this test will fail if the\n 192      * default locale doesn't use English month names...devise a better test! 193      */\n 194     public void testStringToMonthCode() {\n 195 \n 196         int m = SerialDate.stringToMonthCode(\"January\");\n 197         assertEquals(MonthConstants.JANUARY, m);\n 198 \n 199         m = SerialDate.stringToMonthCode(\" January \"); 200         assertEquals(MonthConstants.JANUARY, m);\n 201 \n 202         m = SerialDate.stringToMonthCode(\"Jan\");\n 203         assertEquals(MonthConstants.JANUARY, m);\n 204  205     }\n 206 \n 207     /**\n 208      * Tests the conversion of a month code to a string.\n 209      */ 210     public void testMonthCodeToStringCode() {\n 211 \n 212         final String test = SerialDate.monthCodeToString(MonthConstants.DECEMBER);\n 213         assertEquals(\"December\", test); 214 \n 215     }\n 216 \n 217     /**\n 218      * 1900 is not a leap year. 219      */\n 220     public void testIsNotLeapYear1900() {\n 221         assertTrue(!SerialDate.isLeapYear(1900)); 222     }\n 223 \n 224     /**\n 225      * 2000 is a leap year.\n 226      */ 227     public void testIsLeapYear2000() {\n 228         assertTrue(SerialDate.isLeapYear(2000));\n 229     }\n 230 \n 231     /** 232      * The number of leap years from 1900 up-to-and-including 1899 is 0.\n 233      */\n 234     public void testLeapYearCount1899() {\n 235         assertEquals(SerialDate.leapYearCount(1899), 0);\n 236     } 237 \n 238     /**\n 239      * The number of leap years from 1900 up-to-and-including 1903 is 0.\n 240      */\n 241     public void testLeapYearCount1903() { 242         assertEquals(SerialDate.leapYearCount(1903), 0);\n 243     }\n 244  245     /**\n 246      * The number of leap years from 1900 up-to-and-including 1904 is 1.\n 247      */\nListing B-2 (continued)\nSerialDateTest.java", "370 Appendix B: org.jfree.date.SerialDate\n 248     public void testLeapYearCount1904() {\n 249         assertEquals(SerialDate.leapYearCount(1904), 1);\n 250     }\n 251 \n 252     /**\n 253      * The number of leap years from 1900 up-to-and-including 1999 is 24.\n 254      */\n 255     public void testLeapYearCount1999() { 256         assertEquals(SerialDate.leapYearCount(1999), 24);\n 257     }\n 258 \n 259     /**\n 260      * The number of leap years from 1900 up-to-and-including 2000 is 25.\n 261      */\n 262     public void testLeapYearCount2000() { 263         assertEquals(SerialDate.leapYearCount(2000), 25);\n 264     }\n 265 \n 266     /**\n 267      * Serialize an instance, restore it, and check for equality. 268      */\n 269     public void testSerialization() {\n 270 \n 271         SerialDate d1 = SerialDate.createInstance(15, 4, 2000);\n 272         SerialDate d2 = null; 273 \n 274         try {\n 275             ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n 276             ObjectOutput out = new ObjectOutputStream(buffer); 277             out.writeObject(d1);\n 278             out.close();\n 279 \n 280             ObjectInput in = new ObjectInputStream(\n                   new ByteArrayInputStream(buffer.toByteArray()));\n 281             d2 = (SerialDate) in.readObject();\n 282             in.close();\n 283         } 284         catch (Exception e) {\n 285             System.out.println(e.toString());\n 286         }\n 287         assertEquals(d1, d2);\n 288  289     }\n 290\n 291     /**\n 292      * A test for bug report 1096282 (now fixed).\n 293      */ 294     public void test1096282() {\n 295         SerialDate d = SerialDate.createInstance(29, 2, 2004);\n 296         d = SerialDate.addYears(1, d);\n 297         SerialDate expected = SerialDate.createInstance(28, 2, 2005);\n 298         assertTrue(d.isOn(expected)); 299     }\n 300 \n 301     /**\n 302      * Miscellaneous tests for the addMonths() method.\n 303      */ 304     public void testAddMonths() {\n 305         SerialDate d1 = SerialDate.createInstance(31, 5, 2004);\n 306\nListing B-2 (continued)\nSerialDateTest.java", "371Appendix B: org.jfree.date.SerialDate\n 307         SerialDate d2 = SerialDate.addMonths(1, d1);\n 308         assertEquals(30, d2.getDayOfMonth());\n 309         assertEquals(6, d2.getMonth());\n 310         assertEquals(2004, d2.getYYYY());\n 311\n 312         SerialDate d3 = SerialDate.addMonths(2, d1);\n 313         assertEquals(31, d3.getDayOfMonth());\n 314         assertEquals(7, d3.getMonth()); 315         assertEquals(2004, d3.getYYYY());\n 316\n 317         SerialDate d4 = SerialDate.addMonths(1, SerialDate.addMonths(1, d1));\n 318         assertEquals(30, d4.getDayOfMonth());\n 319         assertEquals(7, d4.getMonth());\n 320         assertEquals(2004, d4.getYYYY());\n 321     } 322 }\nListing B-2 (continued)\nSerialDateTest.java", "372 Appendix B: org.jfree.date.SerialDate\nListing B-3 \nMonthConstants.java\n   1 /* ========================================================================\n   2  * JCommon : a free general purpose class library for the Java(tm) platform\n   3  * ========================================================================\n   4  *\n   5  * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n   6  * \n   7  * Project Info:  http://www.jfree.org/jcommon/index.html\n   8  *   9  * This library is free software; you can redistribute it and/or modify it \n  10  * under the terms of the GNU Lesser General Public License as published by \n  11  * the Free Software Foundation; either version 2.1 of the License, or \n  12  * (at your option) any later version.\n  13  *\n  14  * This library is distributed in the hope that it will be useful, but \n  15  * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY   16  * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \n  17  * License for more details.\n  18  *\n  19  * You should have received a copy of the GNU Lesser General Public\n  20  * License along with this library; if not, write to the Free Software  21  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \n  22  * USA.\n  23  *\n  24  * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \n  25  * in the United States and other countries.]  26  *\n  27  * -------------------\n  28  * MonthConstants.java\n  29  * -------------------  30  * (C) Copyright 2002, 2003, by Object Refinery Limited.\n  31  *\n  32  * Original Author:  David Gilbert (for Object Refinery Limited);\n  33  * Contributor(s):   -;\n  34  *  35  * $Id: MonthConstants.java,v 1.4 2005/11/16 15:58:40 taqua Exp $\n  36  *\n  37  * Changes  38  * -------\n  39  * 29-May-2002 : Version 1 (code moved from SerialDate class) (DG);\n  40  *\n  41  */\n  42   43 package org.jfree.date;\n  44 \n  45 /**\n  46  * Useful constants for months.  Note that these are NOT equivalent to the\n  47  * constants defined by java.util.Calendar (where JANUARY=0 and DECEMBER=11).\n  48  * <P>  49  * Used by the SerialDate and RegularTimePeriod classes.\n  50  *\n  51  * @author David Gilbert\n  52  */\n  53 public interface MonthConstants {  54 \n  55     /** Constant for January. */\n  56     public static final int JANUARY = 1;\n  57 \n  58     /** Constant for February. */  59     public static final int FEBRUARY = 2;\n  60", "373Appendix B: org.jfree.date.SerialDate\n  61     /** Constant for March. */\n  62     public static final int MARCH = 3;\n  63 \n  64     /** Constant for April. */\n  65     public static final int APRIL = 4;\n  66 \n  67     /** Constant for May. */\n  68     public static final int MAY = 5;  69 \n  70     /** Constant for June. */\n  71     public static final int JUNE = 6;\n  72 \n  73     /** Constant for July. */\n  74     public static final int JULY = 7;\n  75   76     /** Constant for August. */\n  77     public static final int AUGUST = 8;\n  78 \n  79     /** Constant for September. */\n  80     public static final int SEPTEMBER = 9;  81 \n  82     /** Constant for October. */\n  83     public static final int OCTOBER = 10;\n  84 \n  85     /** Constant for November. */  86     public static final int NOVEMBER = 11;\n  87 \n  88     /** Constant for December. */\n  89     public static final int DECEMBER = 12;  90 \n  91 }\nListing B-3 (continued)\nMonthConstants.java", "374 Appendix B: org.jfree.date.SerialDate\nListing B-4 \nBobsSerialDateTest.java\n   1 package org.jfree.date.junit;\n   2 \n   3 import junit.framework.TestCase;\n   4 import org.jfree.date.*;\n   5 import static org.jfree.date.SerialDate.*;\n   6 \n   7 import java.util.*;\n   8    9 public class BobsSerialDateTest extends TestCase {\n  10 \n  11   public void testIsValidWeekdayCode() throws Exception {\n  12     for (int day = 1; day <= 7; day++)\n  13       assertTrue(isValidWeekdayCode(day));\n  14     assertFalse(isValidWeekdayCode(0));\n  15     assertFalse(isValidWeekdayCode(8));  16   }\n  17 \n  18   public void testStringToWeekdayCode() throws Exception {\n  19 \n  20     assertEquals(-1, stringToWeekdayCode(\"Hello\"));  21     assertEquals(MONDAY, stringToWeekdayCode(\"Monday\"));\n  22     assertEquals(MONDAY, stringToWeekdayCode(\"Mon\"));\n  23 //todo    assertEquals(MONDAY,stringToWeekdayCode(\"monday\"));\n  24 //    assertEquals(MONDAY,stringToWeekdayCode(\"MONDAY\"));\n  25 //    assertEquals(MONDAY, stringToWeekdayCode(\"mon\"));  26 \n  27     assertEquals(TUESDAY, stringToWeekdayCode(\"Tuesday\"));\n  28     assertEquals(TUESDAY, stringToWeekdayCode(\"Tue\"));\n  29 //    assertEquals(TUESDAY,stringToWeekdayCode(\"tuesday\"));  30 //    assertEquals(TUESDAY,stringToWeekdayCode(\"TUESDAY\"));\n  31 //    assertEquals(TUESDAY, stringToWeekdayCode(\"tue\"));\n  32 //    assertEquals(TUESDAY, stringToWeekdayCode(\"tues\"));\n  33 \n  34     assertEquals(WEDNESDAY, stringToWeekdayCode(\"Wednesday\"));  35     assertEquals(WEDNESDAY, stringToWeekdayCode(\"Wed\"));\n  36 //    assertEquals(WEDNESDAY,stringToWeekdayCode(\"wednesday\"));\n  37 //    assertEquals(WEDNESDAY,stringToWeekdayCode(\"WEDNESDAY\"));  38 //    assertEquals(WEDNESDAY, stringToWeekdayCode(\"wed\"));\n  39 \n  40     assertEquals(THURSDAY, stringToWeekdayCode(\"Thursday\"));\n  41     assertEquals(THURSDAY, stringToWeekdayCode(\"Thu\"));\n  42 //    assertEquals(THURSDAY,stringToWeekdayCode(\"thursday\"));  43 //    assertEquals(THURSDAY,stringToWeekdayCode(\"THURSDAY\"));\n  44 //    assertEquals(THURSDAY, stringToWeekdayCode(\"thu\"));\n  45 //    assertEquals(THURSDAY, stringToWeekdayCode(\"thurs\"));\n  46 \n  47     assertEquals(FRIDAY, stringToWeekdayCode(\"Friday\"));  48     assertEquals(FRIDAY, stringToWeekdayCode(\"Fri\"));\n  49 //    assertEquals(FRIDAY,stringToWeekdayCode(\"friday\"));\n  50 //    assertEquals(FRIDAY,stringToWeekdayCode(\"FRIDAY\"));\n  51 //    assertEquals(FRIDAY, stringToWeekdayCode(\"fri\"));\n  52   53     assertEquals(SATURDAY, stringToWeekdayCode(\"Saturday\"));\n  54     assertEquals(SATURDAY, stringToWeekdayCode(\"Sat\"));\n  55 //    assertEquals(SATURDAY,stringToWeekdayCode(\"saturday\"));\n  56 //    assertEquals(SATURDAY,stringToWeekdayCode(\"SATURDAY\"));\n  57 //    assertEquals(SATURDAY, stringToWeekdayCode(\"sat\"));  58 \n  59     assertEquals(SUNDAY, stringToWeekdayCode(\"Sunday\"));\n  60     assertEquals(SUNDAY, stringToWeekdayCode(\"Sun\"));  61 //    assertEquals(SUNDAY,stringToWeekdayCode(\"sunday\"));\n  62 //    assertEquals(SUNDAY,stringToWeekdayCode(\"SUNDAY\"));\n  63 //    assertEquals(SUNDAY, stringToWeekdayCode(\"sun\"));\n  64   }  65", "375Appendix B: org.jfree.date.SerialDate\n  66   public void testWeekdayCodeToString() throws Exception {\n  67     assertEquals(\"Sunday\", weekdayCodeToString(SUNDAY));\n  68     assertEquals(\"Monday\", weekdayCodeToString(MONDAY));\n  69     assertEquals(\"Tuesday\", weekdayCodeToString(TUESDAY));\n  70     assertEquals(\"Wednesday\", weekdayCodeToString(WEDNESDAY));\n  71     assertEquals(\"Thursday\", weekdayCodeToString(THURSDAY));\n  72     assertEquals(\"Friday\", weekdayCodeToString(FRIDAY));\n  73     assertEquals(\"Saturday\", weekdayCodeToString(SATURDAY));  74   }\n  75 \n  76   public void testIsValidMonthCode() throws Exception {\n  77     for (int i = 1; i <= 12; i++)\n  78       assertTrue(isValidMonthCode(i));\n  79     assertFalse(isValidMonthCode(0));\n  80     assertFalse(isValidMonthCode(13));  81   }\n  82 \n  83   public void testMonthToQuarter() throws Exception {\n  84     assertEquals(1, monthCodeToQuarter(JANUARY));\n  85     assertEquals(1, monthCodeToQuarter(FEBRUARY));  86     assertEquals(1, monthCodeToQuarter(MARCH));\n  87     assertEquals(2, monthCodeToQuarter(APRIL));\n  88     assertEquals(2, monthCodeToQuarter(MAY));\n  89     assertEquals(2, monthCodeToQuarter(JUNE));\n  90     assertEquals(3, monthCodeToQuarter(JULY));  91     assertEquals(3, monthCodeToQuarter(AUGUST));\n  92     assertEquals(3, monthCodeToQuarter(SEPTEMBER));\n  93     assertEquals(4, monthCodeToQuarter(OCTOBER));\n  94     assertEquals(4, monthCodeToQuarter(NOVEMBER));  95     assertEquals(4, monthCodeToQuarter(DECEMBER));\n  96 \n  97     try {\n  98       monthCodeToQuarter(-1);\n  99       fail(\"Invalid Month Code should throw exception\"); 100     } catch (IllegalArgumentException e) {\n 101     }\n 102   } 103 \n 104   public void testMonthCodeToString() throws Exception {\n 105     assertEquals(\"January\", monthCodeToString(JANUARY));\n 106     assertEquals(\"February\", monthCodeToString(FEBRUARY));\n 107     assertEquals(\"March\", monthCodeToString(MARCH)); 108     assertEquals(\"April\", monthCodeToString(APRIL));\n 109     assertEquals(\"May\", monthCodeToString(MAY));\n 110     assertEquals(\"June\", monthCodeToString(JUNE));\n 111     assertEquals(\"July\", monthCodeToString(JULY));\n 112     assertEquals(\"August\", monthCodeToString(AUGUST)); 113     assertEquals(\"September\", monthCodeToString(SEPTEMBER));\n 114     assertEquals(\"October\", monthCodeToString(OCTOBER));\n 115     assertEquals(\"November\", monthCodeToString(NOVEMBER));\n 116     assertEquals(\"December\", monthCodeToString(DECEMBER));\n 117  118     assertEquals(\"Jan\", monthCodeToString(JANUARY, true));\n 119     assertEquals(\"Feb\", monthCodeToString(FEBRUARY, true));\n 120     assertEquals(\"Mar\", monthCodeToString(MARCH, true));\n 121     assertEquals(\"Apr\", monthCodeToString(APRIL, true));\n 122     assertEquals(\"May\", monthCodeToString(MAY, true)); 123     assertEquals(\"Jun\", monthCodeToString(JUNE, true));\n 124     assertEquals(\"Jul\", monthCodeToString(JULY, true));\n 125     assertEquals(\"Aug\", monthCodeToString(AUGUST, true)); 126     assertEquals(\"Sep\", monthCodeToString(SEPTEMBER, true));\n 127     assertEquals(\"Oct\", monthCodeToString(OCTOBER, true));\nListing B-4 (continued)\nBobsSerialDateTest.java", "376 Appendix B: org.jfree.date.SerialDate\n 128     assertEquals(\"Nov\", monthCodeToString(NOVEMBER, true));\n 129     assertEquals(\"Dec\", monthCodeToString(DECEMBER, true));\n 130 \n 131     try {\n 132       monthCodeToString(-1);\n 133       fail(\"Invalid month code should throw exception\");\n 134     } catch (IllegalArgumentException e) {\n 135     } 136 \n 137   }\n 138 \n 139   public void testStringToMonthCode() throws Exception {\n 140     assertEquals(JANUARY,stringToMonthCode(\"1\"));\n 141     assertEquals(FEBRUARY,stringToMonthCode(\"2\"));\n 142     assertEquals(MARCH,stringToMonthCode(\"3\")); 143     assertEquals(APRIL,stringToMonthCode(\"4\"));\n 144     assertEquals(MAY,stringToMonthCode(\"5\"));\n 145     assertEquals(JUNE,stringToMonthCode(\"6\"));\n 146     assertEquals(JULY,stringToMonthCode(\"7\"));\n 147     assertEquals(AUGUST,stringToMonthCode(\"8\")); 148     assertEquals(SEPTEMBER,stringToMonthCode(\"9\"));\n 149     assertEquals(OCTOBER,stringToMonthCode(\"10\"));\n 150     assertEquals(NOVEMBER, stringToMonthCode(\"11\"));\n 151     assertEquals(DECEMBER,stringToMonthCode(\"12\"));\n 152  153 //todo    assertEquals(-1, stringToMonthCode(\"0\"));\n 154 //    assertEquals(-1, stringToMonthCode(\"13\"));\n 155 \n 156     assertEquals(-1,stringToMonthCode(\"Hello\")); 157 \n 158     for (int m = 1; m <= 12; m++) {\n 159       assertEquals(m, stringToMonthCode(monthCodeToString(m, false)));\n 160       assertEquals(m, stringToMonthCode(monthCodeToString(m, true)));\n 161     } 162 \n 163 //    assertEquals(1,stringToMonthCode(\"jan\"));\n 164 //    assertEquals(2,stringToMonthCode(\"feb\")); 165 //    assertEquals(3,stringToMonthCode(\"mar\"));\n 166 //    assertEquals(4,stringToMonthCode(\"apr\"));\n 167 //    assertEquals(5,stringToMonthCode(\"may\"));\n 168 //    assertEquals(6,stringToMonthCode(\"jun\"));\n 169 //    assertEquals(7,stringToMonthCode(\"jul\")); 170 //    assertEquals(8,stringToMonthCode(\"aug\"));\n 171 //    assertEquals(9,stringToMonthCode(\"sep\"));\n 172 //    assertEquals(10,stringToMonthCode(\"oct\"));\n 173 //    assertEquals(11,stringToMonthCode(\"nov\"));\n 174 //    assertEquals(12,stringToMonthCode(\"dec\")); 175 \n 176 //    assertEquals(1,stringToMonthCode(\"JAN\"));\n 177 //    assertEquals(2,stringToMonthCode(\"FEB\"));\n 178 //    assertEquals(3,stringToMonthCode(\"MAR\"));\n 179 //    assertEquals(4,stringToMonthCode(\"APR\")); 180 //    assertEquals(5,stringToMonthCode(\"MAY\"));\n 181 //    assertEquals(6,stringToMonthCode(\"JUN\"));\n 182 //    assertEquals(7,stringToMonthCode(\"JUL\"));\n 183 //    assertEquals(8,stringToMonthCode(\"AUG\"));\n 184 //    assertEquals(9,stringToMonthCode(\"SEP\")); 185 //    assertEquals(10,stringToMonthCode(\"OCT\"));\n 186 //    assertEquals(11,stringToMonthCode(\"NOV\"));\n 187 //    assertEquals(12,stringToMonthCode(\"DEC\")); 188 \n 189 //    assertEquals(1,stringToMonthCode(\"january\"));\n 190 //    assertEquals(2,stringToMonthCode(\"february\"));\nListing B-4 (continued)\nBobsSerialDateTest.java", "377Appendix B: org.jfree.date.SerialDate\n 191 //    assertEquals(3,stringToMonthCode(\"march\"));\n 192 //    assertEquals(4,stringToMonthCode(\"april\"));\n 193 //    assertEquals(5,stringToMonthCode(\"may\"));\n 194 //    assertEquals(6,stringToMonthCode(\"june\"));\n 195 //    assertEquals(7,stringToMonthCode(\"july\"));\n 196 //    assertEquals(8,stringToMonthCode(\"august\"));\n 197 //    assertEquals(9,stringToMonthCode(\"september\"));\n 198 //    assertEquals(10,stringToMonthCode(\"october\")); 199 //    assertEquals(11,stringToMonthCode(\"november\"));\n 200 //    assertEquals(12,stringToMonthCode(\"december\"));\n 201 \n 202 //    assertEquals(1,stringToMonthCode(\"JANUARY\"));\n 203 //    assertEquals(2,stringToMonthCode(\"FEBRUARY\"));\n 204 //    assertEquals(3,stringToMonthCode(\"MAR\"));\n 205 //    assertEquals(4,stringToMonthCode(\"APRIL\")); 206 //    assertEquals(5,stringToMonthCode(\"MAY\"));\n 207 //    assertEquals(6,stringToMonthCode(\"JUNE\"));\n 208 //    assertEquals(7,stringToMonthCode(\"JULY\"));\n 209 //    assertEquals(8,stringToMonthCode(\"AUGUST\"));\n 210 //    assertEquals(9,stringToMonthCode(\"SEPTEMBER\")); 211 //    assertEquals(10,stringToMonthCode(\"OCTOBER\"));\n 212 //    assertEquals(11,stringToMonthCode(\"NOVEMBER\"));\n 213 //    assertEquals(12,stringToMonthCode(\"DECEMBER\"));\n 214   }\n 215  216   public void testIsValidWeekInMonthCode() throws Exception {\n 217     for (int w = 0; w <= 4; w++) {\n 218       assertTrue(isValidWeekInMonthCode(w));\n 219     } 220     assertFalse(isValidWeekInMonthCode(5));\n 221   }\n 222 \n 223   public void testIsLeapYear() throws Exception {\n 224     assertFalse(isLeapYear(1900)); 225     assertFalse(isLeapYear(1901));\n 226     assertFalse(isLeapYear(1902));\n 227     assertFalse(isLeapYear(1903)); 228     assertTrue(isLeapYear(1904));\n 229     assertTrue(isLeapYear(1908));\n 230     assertFalse(isLeapYear(1955));\n 231     assertTrue(isLeapYear(1964));\n 232     assertTrue(isLeapYear(1980)); 233     assertTrue(isLeapYear(2000));\n 234     assertFalse(isLeapYear(2001));\n 235     assertFalse(isLeapYear(2100));\n 236   }\n 237  238   public void testLeapYearCount() throws Exception {\n 239     assertEquals(0, leapYearCount(1900));\n 240     assertEquals(0, leapYearCount(1901));\n 241     assertEquals(0, leapYearCount(1902));\n 242     assertEquals(0, leapYearCount(1903)); 243     assertEquals(1, leapYearCount(1904));\n 244     assertEquals(1, leapYearCount(1905));\n 245     assertEquals(1, leapYearCount(1906));\n 246     assertEquals(1, leapYearCount(1907));\n 247     assertEquals(2, leapYearCount(1908)); 248     assertEquals(24, leapYearCount(1999));\n 249     assertEquals(25, leapYearCount(2001));\n 250     assertEquals(49, leapYearCount(2101)); 251     assertEquals(73, leapYearCount(2201));\nListing B-4 (continued)\nBobsSerialDateTest.java", "378 Appendix B: org.jfree.date.SerialDate\n 252     assertEquals(97, leapYearCount(2301));\n 253     assertEquals(122, leapYearCount(2401));\n 254   }\n 255 \n 256   public void testLastDayOfMonth() throws Exception {\n 257     assertEquals(31, lastDayOfMonth(JANUARY, 1901));\n 258     assertEquals(28, lastDayOfMonth(FEBRUARY, 1901));\n 259     assertEquals(31, lastDayOfMonth(MARCH, 1901)); 260     assertEquals(30, lastDayOfMonth(APRIL, 1901));\n 261     assertEquals(31, lastDayOfMonth(MAY, 1901));\n 262     assertEquals(30, lastDayOfMonth(JUNE, 1901));\n 263     assertEquals(31, lastDayOfMonth(JULY, 1901));\n 264     assertEquals(31, lastDayOfMonth(AUGUST, 1901));\n 265     assertEquals(30, lastDayOfMonth(SEPTEMBER, 1901));\n 266     assertEquals(31, lastDayOfMonth(OCTOBER, 1901)); 267     assertEquals(30, lastDayOfMonth(NOVEMBER, 1901));\n 268     assertEquals(31, lastDayOfMonth(DECEMBER, 1901));\n 269     assertEquals(29, lastDayOfMonth(FEBRUARY, 1904));\n 270   }\n 271  272   public void testAddDays() throws Exception {\n 273     SerialDate newYears = d(1, JANUARY, 1900);\n 274     assertEquals(d(2, JANUARY, 1900), addDays(1, newYears));\n 275     assertEquals(d(1, FEBRUARY, 1900), addDays(31, newYears));\n 276     assertEquals(d(1, JANUARY, 1901), addDays(365, newYears)); 277     assertEquals(d(31, DECEMBER, 1904), addDays(5 * 365, newYears));\n 278   }\n 279 \n 280   private static SpreadsheetDate d(int day, int month, int year) {return new SpreadsheetDate(day, month, year);}\n 281 \n 282   public void testAddMonths() throws Exception {\n 283     assertEquals(d(1, FEBRUARY, 1900), addMonths(1, d(1, JANUARY, 1900)));\n 284     assertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(31, JANUARY, 1900))); 285     assertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(30, JANUARY, 1900)));\n 286     assertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(29, JANUARY, 1900)));\n 287     assertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(28, JANUARY, 1900))); 288     assertEquals(d(27, FEBRUARY, 1900), addMonths(1, d(27, JANUARY, 1900)));\n 289 \n 290     assertEquals(d(30, JUNE, 1900), addMonths(5, d(31, JANUARY, 1900)));\n 291     assertEquals(d(30, JUNE, 1901), addMonths(17, d(31, JANUARY, 1900)));\n 292  293     assertEquals(d(29, FEBRUARY, 1904), addMonths(49, d(31, JANUARY, 1900)));\n 294 \n 295   }\n 296 \n 297   public void testAddYears() throws Exception { 298     assertEquals(d(1, JANUARY, 1901), addYears(1, d(1, JANUARY, 1900)));\n 299     assertEquals(d(28, FEBRUARY, 1905), addYears(1, d(29, FEBRUARY, 1904)));\n 300     assertEquals(d(28, FEBRUARY, 1905), addYears(1, d(28, FEBRUARY, 1904)));\n 301     assertEquals(d(28, FEBRUARY, 1904), addYears(1, d(28, FEBRUARY, 1903)));\n 302   } 303 \n 304   public void testGetPreviousDayOfWeek() throws Exception {\n 305     assertEquals(d(24, FEBRUARY, 2006), getPreviousDayOfWeek(FRIDAY, d(1, MARCH, 2006)));\n 306     assertEquals(d(22, FEBRUARY, 2006), getPreviousDayOfWeek(WEDNESDAY, d(1, MARCH, 2006)));\n 307     assertEquals(d(29, FEBRUARY, 2004), getPreviousDayOfWeek(SUNDAY, d(3, MARCH, 2004))); 308     assertEquals(d(29, DECEMBER, 2004), getPreviousDayOfWeek(WEDNESDAY, d(5, JANUARY, 2005)));\n 309 \n 310     try { 311       getPreviousDayOfWeek(-1, d(1, JANUARY, 2006));\n 312       fail(\"Invalid day of week code should throw exception\");\nListing B-4 (continued)\nBobsSerialDateTest.java", "379Appendix B: org.jfree.date.SerialDate\n 313     } catch (IllegalArgumentException e) {\n 314     }\n 315   }\n 316 \n 317   public void testGetFollowingDayOfWeek() throws Exception {\n 318 //    assertEquals(d(1, JANUARY, 2005),getFollowingDayOfWeek(SATURDAY, d(25, DECEMBER, 2004)));\n 319     assertEquals(d(1, JANUARY, 2005), getFollowingDayOfWeek(SATURDAY, d(26, DECEMBER, 2004)));\n 320     assertEquals(d(3, MARCH, 2004), getFollowingDayOfWeek(WEDNESDAY, d(28, FEBRUARY, 2004))); 321 \n 322     try {\n 323       getFollowingDayOfWeek(-1, d(1, JANUARY, 2006));\n 324       fail(\"Invalid day of week code should throw exception\");\n 325     } catch (IllegalArgumentException e) {\n 326     }\n 327   } 328 \n 329   public void testGetNearestDayOfWeek() throws Exception {\n 330     assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(16, APRIL, 2006)));\n 331     assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(17, APRIL, 2006)));\n 332     assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(18, APRIL, 2006))); 333     assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(19, APRIL, 2006)));\n 334     assertEquals(d(23, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(20, APRIL, 2006)));\n 335     assertEquals(d(23, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(21, APRIL, 2006)));\n 336     assertEquals(d(23, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(22, APRIL, 2006)));\n 337  338 //todo    assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(16, APRIL, 2006)));\n 339     assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(17, APRIL, 2006)));\n 340     assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(18, APRIL, 2006)));\n 341     assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(19, APRIL, 2006))); 342     assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(20, APRIL, 2006)));\n 343     assertEquals(d(24, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(21, APRIL, 2006)));\n 344     assertEquals(d(24, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(22, APRIL, 2006)));\n 345 \n 346 //    assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(16, APRIL, 2006))); 347 //    assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(17, APRIL, 2006)));\n 348     assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(18, APRIL, 2006)));\n 349     assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(19, APRIL, 2006))); 350     assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(20, APRIL, 2006)));\n 351     assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(21, APRIL, 2006)));\n 352     assertEquals(d(25, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(22, APRIL, 2006)));\n 353 \n 354 //    assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(16, APRIL, 2006))); 355 //    assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(17, APRIL, 2006)));\n 356 //    assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(18, APRIL, 2006)));\n 357     assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(19, APRIL, 2006)));\n 358     assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(20, APRIL, 2006)));\n 359     assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(21, APRIL, 2006))); 360     assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(22, APRIL, 2006)));\n 361 \n 362 //    assertEquals(d(13, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(16, APRIL, 2006)));\n 363 //    assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(17, APRIL, 2006)));\n 364 //    assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(18, APRIL, 2006))); 365 //    assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(19, APRIL, 2006)));\n 366     assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(20, APRIL, 2006)));\n 367     assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(21, APRIL, 2006)));\n 368     assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(22, APRIL, 2006)));\n 369  370 //    assertEquals(d(14, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(16, APRIL, 2006)));\n 371 //    assertEquals(d(14, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(17, APRIL, 2006)));\n 372 //    assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(18, APRIL, 2006))); 373 //    assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(19, APRIL, 2006)));\n 374 //    assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(20, APRIL, 2006)));\nListing B-4 (continued)\nBobsSerialDateTest.java", "380 Appendix B: org.jfree.date.SerialDate\n 375     assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(21, APRIL, 2006)));\n 376     assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(22, APRIL, 2006)));\n 377 \n 378 //    assertEquals(d(15, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(16, APRIL, 2006)));\n 379 //    assertEquals(d(15, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(17, APRIL, 2006)));\n 380 //    assertEquals(d(15, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(18, APRIL, 2006)));\n 381 //    assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(19, APRIL, 2006)));\n 382 //    assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(20, APRIL, 2006))); 383 //    assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(21, APRIL, 2006)));\n 384     assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(22, APRIL, 2006)));\n 385 \n 386     try {\n 387       getNearestDayOfWeek(-1, d(1, JANUARY, 2006));\n 388       fail(\"Invalid day of week code should throw exception\");\n 389     } catch (IllegalArgumentException e) { 390     }\n 391   }\n 392 \n 393   public void testEndOfCurrentMonth() throws Exception {\n 394     SerialDate d = SerialDate.createInstance(2); 395     assertEquals(d(31, JANUARY, 2006), d.getEndOfCurrentMonth(d(1, JANUARY, 2006)));\n 396     assertEquals(d(28, FEBRUARY, 2006), d.getEndOfCurrentMonth(d(1, FEBRUARY, 2006)));\n 397     assertEquals(d(31, MARCH, 2006), d.getEndOfCurrentMonth(d(1, MARCH, 2006)));\n 398     assertEquals(d(30, APRIL, 2006), d.getEndOfCurrentMonth(d(1, APRIL, 2006)));\n 399     assertEquals(d(31, MAY, 2006), d.getEndOfCurrentMonth(d(1, MAY, 2006))); 400     assertEquals(d(30, JUNE, 2006), d.getEndOfCurrentMonth(d(1, JUNE, 2006)));\n 401     assertEquals(d(31, JULY, 2006), d.getEndOfCurrentMonth(d(1, JULY, 2006)));\n 402     assertEquals(d(31, AUGUST, 2006), d.getEndOfCurrentMonth(d(1, AUGUST, 2006)));\n 403     assertEquals(d(30, SEPTEMBER, 2006), d.getEndOfCurrentMonth(d(1, SEPTEMBER, 2006))); 404     assertEquals(d(31, OCTOBER, 2006), d.getEndOfCurrentMonth(d(1, OCTOBER, 2006)));\n 405     assertEquals(d(30, NOVEMBER, 2006), d.getEndOfCurrentMonth(d(1, NOVEMBER, 2006)));\n 406     assertEquals(d(31, DECEMBER, 2006), d.getEndOfCurrentMonth(d(1, DECEMBER, 2006)));\n 407     assertEquals(d(29, FEBRUARY, 2008), d.getEndOfCurrentMonth(d(1, FEBRUARY, 2008)));\n 408   } 409 \n 410   public void testWeekInMonthToString() throws Exception {\n 411     assertEquals(\"First\",weekInMonthToString(FIRST_WEEK_IN_MONTH)); 412     assertEquals(\"Second\",weekInMonthToString(SECOND_WEEK_IN_MONTH));\n 413     assertEquals(\"Third\",weekInMonthToString(THIRD_WEEK_IN_MONTH));\n 414     assertEquals(\"Fourth\",weekInMonthToString(FOURTH_WEEK_IN_MONTH));\n 415     assertEquals(\"Last\",weekInMonthToString(LAST_WEEK_IN_MONTH));\n 416  417 //todo    try {\n 418 //      weekInMonthToString(-1);\n 419 //      fail(\"Invalid week code should throw exception\");\n 420 //    } catch (IllegalArgumentException e) {\n 421 //    } 422   }\n 423 \n 424   public void testRelativeToString() throws Exception {\n 425     assertEquals(\"Preceding\",relativeToString(PRECEDING));\n 426     assertEquals(\"Nearest\",relativeToString(NEAREST)); 427     assertEquals(\"Following\",relativeToString(FOLLOWING));\n 428 \n 429 //todo    try {\n 430 //      relativeToString(-1000);\n 431 //      fail(\"Invalid relative code should throw exception\"); 432 //    } catch (IllegalArgumentException e) {\n 433 //    }\n 434   } 435 \nListing B-4 (continued)\nBobsSerialDateTest.java", "381Appendix B: org.jfree.date.SerialDate\n 436   public void testCreateInstanceFromDDMMYYY() throws Exception {\n 437     SerialDate date = createInstance(1, JANUARY, 1900);\n 438     assertEquals(1,date.getDayOfMonth());\n 439     assertEquals(JANUARY,date.getMonth());\n 440     assertEquals(1900,date.getYYYY());\n 441     assertEquals(2,date.toSerial());\n 442   }\n 443  444   public void testCreateInstanceFromSerial() throws Exception {\n 445     assertEquals(d(1, JANUARY, 1900),createInstance(2));\n 446     assertEquals(d(1, JANUARY, 1901), createInstance(367));\n 447   }\n 448 \n 449   public void testCreateInstanceFromJavaDate() throws Exception {\n 450     assertEquals(d(1, JANUARY, 1900),                       createInstance(new GregorianCalendar(1900,0,1).getTime()));\n 451     assertEquals(d(1, JANUARY, 2006), \n                      createInstance(new GregorianCalendar(2006,0,1).getTime()));\n 452   }\n 453  454   public static void main(String[] args) {\n 455     junit.textui.TestRunner.run(BobsSerialDateTest.class);\n 456   }\n 457 }\nListing B-4 (continued)\nBobsSerialDateTest.java", "382 Appendix B: org.jfree.date.SerialDate\nListing B-5 \nSpreadsheetDate.java\n   1 /* ========================================================================\n   2  * JCommon : a free general purpose class library for the Java(tm) platform\n   3  * ========================================================================\n   4  *\n   5  * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n   6  *\n   7  * Project Info:  http://www.jfree.org/jcommon/index.html\n   8  *   9  * This library is free software; you can redistribute it and/or modify it\n  10  * under the terms of the GNU Lesser General Public License as published by\n  11  * the Free Software Foundation; either version 2.1 of the License, or\n  12  * (at your option) any later version.\n  13  *\n  14  * This library is distributed in the hope that it will be useful, but\n  15  * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY  16  * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n  17  * License for more details.\n  18  *\n  19  * You should have received a copy of the GNU Lesser General Public\n  20  * License along with this library; if not, write to the Free Software  21  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n  22  * USA.\n  23  *\n  24  * [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n  25  * in the United States and other countries.]  26  *\n  27  * --------------------\n  28  * SpreadsheetDate.java\n  29  * --------------------  30  * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n  31  *\n  32  * Original Author:  David Gilbert (for Object Refinery Limited);\n  33  * Contributor(s):   -;\n  34  *  35  * $Id: SpreadsheetDate.java,v 1.8 2005/11/03 09:25:39 mungady Exp $\n  36  *\n  37  * Changes  38  * -------\n  39  * 11-Oct-2001 : Version 1 (DG);\n  40  * 05-Nov-2001 : Added getDescription() and setDescription() methods (DG);\n  41  * 12-Nov-2001 : Changed name from ExcelDate.java to SpreadsheetDate.java (DG);\n  42  *               Fixed a bug in calculating day, month and year from serial  43  *               number (DG);\n  44  * 24-Jan-2002 : Fixed a bug in calculating the serial number from the day,\n  45  *               month and year.  Thanks to Trevor Hills for the report (DG);\n  46  * 29-May-2002 : Added equals(Object) method (SourceForge ID 558850) (DG);\n  47  * 03-Oct-2002 : Fixed errors reported by Checkstyle (DG);  48  * 13-Mar-2003 : Implemented Serializable (DG);\n  49  * 04-Sep-2003 : Completed isInRange() methods (DG);\n  50  * 05-Sep-2003 : Implemented Comparable (DG);\n  51  * 21-Oct-2003 : Added hashCode() method (DG);\n  52  *  53  */\n  54 \n  55 package org.jfree.date;\n  56 \n  57 import java.util.Calendar;  58 import java.util.Date;\n  59 \n  60 /**  61  * Represents a date using an integer, in a similar fashion to the\n  62  * implementation in Microsoft Excel.  The range of dates supported is", "383Appendix B: org.jfree.date.SerialDate\n  63  * 1-Jan-1900 to 31-Dec-9999.\n  64  * <P>\n  65  * Be aware that there is a deliberate bug in Excel that recognises the year\n  66  * 1900 as a leap year when in fact it is not a leap year. You can find more\n  67  * information on the Microsoft website in article Q181370:\n  68  * <P>\n  69  * http://support.microsoft.com/support/kb/articles/Q181/3/70.asp\n  70  * <P>  71  * Excel uses the convention that 1-Jan-1900 = 1.  This class uses the\n  72  * convention 1-Jan-1900 = 2.\n  73  * The result is that the day number in this class will be different to the\n  74  * Excel figure for January and February 1900...but then Excel adds in an extra\n  75  * day (29-Feb-1900 which does not actually exist!) and from that point forward\n  76  * the day numbers will match.\n  77  *  78  * @author David Gilbert\n  79  */\n  80 public class SpreadsheetDate extends SerialDate {\n  81 \n  82     /** For serialization. */  83     private static final long serialVersionUID = -2039586705374454461L;\n  84 \n  85     /**\n  86      * The day number (1-Jan-1900 = 2, 2-Jan-1900 = 3, ..., 31-Dec-9999 =\n  87      * 2958465).  88      */\n  89     private int serial;\n  90 \n  91     /** The day of the month (1 to 28, 29, 30 or 31 depending on the month). */  92     private int day;\n  93 \n  94     /** The month of the year (1 to 12). */\n  95     private int month;\n  96   97     /** The year (1900 to 9999). */\n  98     private int year;\n  99  100     /** An optional description for the date. */\n 101     private String description;\n 102 \n 103     /**\n 104      * Creates a new date instance. 105      *\n 106      * @param day  the day (in the range 1 to 28/29/30/31).\n 107      * @param month  the month (in the range 1 to 12).\n 108      * @param year  the year (in the range 1900 to 9999).\n 109      */ 110     public SpreadsheetDate(final int day, final int month, final int year) {\n 111 \n 112         if ((year >= 1900) && (year <= 9999)) {\n 113             this.year = year;\n 114         } 115         else {\n 116             throw new IllegalArgumentException(\n 117                 \"The 'year' argument must be in range 1900 to 9999.\"\n 118             );\n 119         } 120 \n 121         if ((month >= MonthConstants.JANUARY)\n 122                 && (month <= MonthConstants.DECEMBER)) { 123             this.month = month;\n 124         }\nListing B-5 (continued)\nSpreadsheetDate.java", "384 Appendix B: org.jfree.date.SerialDate\n 125         else {\n 126             throw new IllegalArgumentException(\n 127                 \"The 'month' argument must be in the range 1 to 12.\"\n 128             );\n 129         }\n 130 \n 131         if ((day >= 1) && (day <= SerialDate.lastDayOfMonth(month, year))) {\n 132             this.day = day; 133         }\n 134         else {\n 135             throw new IllegalArgumentException(\"Invalid 'day' argument.\");\n 136         }\n 137 \n 138         // the serial number needs to be synchronised with the day-month-year...\n 139         this.serial = calcSerial(day, month, year); 140 \n 141         this.description = null;\n 142 \n 143     }\n 144  145     /**\n 146      * Standard constructor - creates a new date object representing the\n 147      * specified day number (which should be in the range 2 to 2958465.\n 148      *\n 149      * @param serial  the serial number for the day (range: 2 to 2958465). 150      */\n 151     public SpreadsheetDate(final int serial) {\n 152 \n 153         if ((serial >= SERIAL_LOWER_BOUND) && (serial <= SERIAL_UPPER_BOUND)) { 154             this.serial = serial;\n 155         }\n 156         else {\n 157             throw new IllegalArgumentException(\n 158                 \"SpreadsheetDate: Serial must be in range 2 to 2958465.\"); 159         }\n 160 \n 161         // the day-month-year needs to be synchronised with the serial number... 162         calcDayMonthYear();\n 163 \n 164     }\n 165 \n 166     /** 167      * Returns the description that is attached to the date.  It is not\n 168      * required that a date have a description, but for some applications it\n 169      * is useful.\n 170      *\n 171      * @return The description that is attached to the date. 172      */\n 173     public String getDescription() {\n 174         return this.description;\n 175     }\n 176  177     /**\n 178      * Sets the description for the date.\n 179      *\n 180      * @param description  the description for this date (<code>null</code>\n 181      *                     permitted). 182      */\n 183     public void setDescription(final String description) {\n 184         this.description = description; 185     }\n 186 \nListing B-5 (continued)\nSpreadsheetDate.java", "385Appendix B: org.jfree.date.SerialDate\n 187     /**\n 188      * Returns the serial number for the date, where 1 January 1900 = 2\n 189      * (this corresponds, almost, to the numbering system used in Microsoft\n 190      * Excel for Windows and Lotus 1-2-3).\n 191      *\n 192      * @return The serial number of this date.\n 193      */\n 194     public int toSerial() { 195         return this.serial;\n 196     }\n 197 \n 198     /**\n 199      * Returns a <code>java.util.Date</code> equivalent to this date.\n 200      *\n 201      * @return The date. 202      */\n 203     public Date toDate() {\n 204         final Calendar calendar = Calendar.getInstance();\n 205         calendar.set(getYYYY(), getMonth() - 1, getDayOfMonth(), 0, 0, 0);\n 206         return calendar.getTime(); 207     }\n 208 \n 209     /**\n 210      * Returns the year (assume a valid range of 1900 to 9999).\n 211      * 212      * @return The year.\n 213      */\n 214     public int getYYYY() {\n 215         return this.year; 216     }\n 217 \n 218     /**\n 219      * Returns the month (January = 1, February = 2, March = 3).\n 220      * 221      * @return The month of the year.\n 222      */\n 223     public int getMonth() { 224         return this.month;\n 225     }\n 226 \n 227     /**\n 228      * Returns the day of the month. 229      *\n 230      * @return The day of the month.\n 231      */\n 232     public int getDayOfMonth() {\n 233         return this.day; 234     }\n 235 \n 236     /**\n 237      * Returns a code representing the day of the week.\n 238      * <P> 239      * The codes are defined in the {@link SerialDate} class as:\n 240      * <code>SUNDAY</code>, <code>MONDAY</code>, <code>TUESDAY</code>,\n 241      * <code>WEDNESDAY</code>, <code>THURSDAY</code>, <code>FRIDAY</code>, and\n 242      * <code>SATURDAY</code>.\n 243      * 244      * @return A code representing the day of the week.\n 245      */\n 246     public int getDayOfWeek() { 247         return (this.serial + 6) % 7 + 1;\n 248     }\nListing B-5 (continued)\nSpreadsheetDate.java", "386 Appendix B: org.jfree.date.SerialDate\n 249 \n 250     /**\n 251      * Tests the equality of this date with an arbitrary object.\n 252      * <P>\n 253      * This method will return true ONLY if the object is an instance of the\n 254      * {@link SerialDate} base class, and it represents the same day as this\n 255      * {@link SpreadsheetDate}.\n 256      * 257      * @param object  the object to compare (<code>null</code> permitted).\n 258      *\n 259      * @return A boolean.\n 260      */\n 261     public boolean equals(final Object object) {\n 262 \n 263         if (object instanceof SerialDate) { 264             final SerialDate s = (SerialDate) object;\n 265             return (s.toSerial() == this.toSerial());\n 266         }\n 267         else {\n 268             return false; 269         }\n 270 \n 271     }\n 272 \n 273     /** 274      * Returns a hash code for this object instance.\n 275      *\n 276      * @return A hash code.\n 277      */ 278     public int hashCode() {\n 279         return toSerial();\n 280     }\n 281 \n 282     /** 283      * Returns the difference (in days) between this date and the specified\n 284      * 'other' date.\n 285      * 286      * @param other  the date being compared to.\n 287      *\n 288      * @return The difference (in days) between this date and the specified\n 289      *         'other' date.\n 290      */ 291     public int compare(final SerialDate other) {\n 292         return this.serial - other.toSerial();\n 293     }\n 294 \n 295     /** 296      * Implements the method required by the Comparable interface.\n 297      *\n 298      * @param other  the other object (usually another SerialDate).\n 299      *\n 300      * @return A negative integer, zero, or a positive integer as this object 301      *         is less than, equal to, or greater than the specified object.\n 302      */\n 303     public int compareTo(final Object other) {\n 304         return compare((SerialDate) other);\n 305     } 306 \n 307     /**\n 308      * Returns true if this SerialDate represents the same date as the 309      * specified SerialDate.\n 310      *\nListing B-5 (continued)\nSpreadsheetDate.java", "387Appendix B: org.jfree.date.SerialDate\n 311      * @param other  the date being compared to.\n 312      *\n 313      * @return <code>true</code> if this SerialDate represents the same date as\n 314      *         the specified SerialDate.\n 315      */\n 316     public boolean isOn(final SerialDate other) {\n 317         return (this.serial == other.toSerial());\n 318     } 319 \n 320     /**\n 321      * Returns true if this SerialDate represents an earlier date compared to\n 322      * the specified SerialDate.\n 323      *\n 324      * @param other  the date being compared to.\n 325      * 326      * @return <code>true</code> if this SerialDate represents an earlier date\n 327      *         compared to the specified SerialDate.\n 328      */\n 329     public boolean isBefore(final SerialDate other) {\n 330         return (this.serial < other.toSerial()); 331     }\n 332 \n 333     /**\n 334      * Returns true if this SerialDate represents the same date as the\n 335      * specified SerialDate. 336      *\n 337      * @param other  the date being compared to.\n 338      *\n 339      * @return <code>true</code> if this SerialDate represents the same date 340      *         as the specified SerialDate.\n 341      */\n 342     public boolean isOnOrBefore(final SerialDate other) {\n 343         return (this.serial <= other.toSerial());\n 344     } 345 \n 346     /**\n 347      * Returns true if this SerialDate represents the same date as the 348      * specified SerialDate.\n 349      *\n 350      * @param other  the date being compared to.\n 351      *\n 352      * @return <code>true</code> if this SerialDate represents the same date 353      *         as the specified SerialDate.\n 354      */\n 355     public boolean isAfter(final SerialDate other) {\n 356         return (this.serial > other.toSerial());\n 357     } 358 \n 359     /**\n 360      * Returns true if this SerialDate represents the same date as the\n 361      * specified SerialDate.\n 362      * 363      * @param other  the date being compared to.\n 364      *\n 365      * @return <code>true</code> if this SerialDate represents the same date as\n 366      *         the specified SerialDate.\n 367      */ 368     public boolean isOnOrAfter(final SerialDate other) {\n 369         return (this.serial >= other.toSerial());\n 370     } 371 \n 372     /**\n 373      * Returns <code>true</code> if this {@link SerialDate} is within the\nListing B-5 (continued)\nSpreadsheetDate.java", "388 Appendix B: org.jfree.date.SerialDate\n 374      * specified range (INCLUSIVE).  The date order of d1 and d2 is not\n 375      * important.\n 376      *\n 377      * @param d1  a boundary date for the range.\n 378      * @param d2  the other boundary date for the range.\n 379      *\n 380      * @return A boolean.\n 381      */ 382     public boolean isInRange(final SerialDate d1, final SerialDate d2) {\n 383         return isInRange(d1, d2, SerialDate.INCLUDE_BOTH);\n 384     }\n 385 \n 386     /**\n 387      * Returns true if this SerialDate is within the specified range (caller\n 388      * specifies whether or not the end-points are included).  The order of d1 389      * and d2 is not important.\n 390      *\n 391      * @param d1  one boundary date for the range.\n 392      * @param d2  a second boundary date for the range.\n 393      * @param include  a code that controls whether or not the start and end 394      *                 dates are included in the range.\n 395      *\n 396      * @return <code>true</code> if this SerialDate is within the specified\n 397      *         range.\n 398      */ 399     public boolean isInRange(final SerialDate d1, final SerialDate d2,\n 400                              final int include) {\n 401         final int s1 = d1.toSerial();\n 402         final int s2 = d2.toSerial(); 403         final int start = Math.min(s1, s2);\n 404         final int end = Math.max(s1, s2);\n 405 \n 406         final int s = toSerial();\n 407         if (include == SerialDate.INCLUDE_BOTH) { 408             return (s >= start && s <= end);\n 409         }\n 410         else if (include == SerialDate.INCLUDE_FIRST) { 411             return (s >= start && s < end);\n 412         }\n 413         else if (include == SerialDate.INCLUDE_SECOND) {\n 414             return (s > start && s <= end);\n 415         } 416         else {\n 417             return (s > start && s < end);\n 418         }\n 419     }\n 420  421     /**\n 422      * Calculate the serial number from the day, month and year.\n 423      * <P>\n 424      * 1-Jan-1900 = 2.\n 425      * 426      * @param d  the day.\n 427      * @param m  the month.\n 428      * @param y  the year.\n 429      *\n 430      * @return the serial number from the day, month and year. 431      */\n 432     private int calcSerial(final int d, final int m, final int y) {\n 433         final int yy = ((y - 1900) * 365) + SerialDate.leapYearCount(y - 1); 434         int mm = SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[m];\n 435         if (m > MonthConstants.FEBRUARY) {\nListing B-5 (continued)\nSpreadsheetDate.java", "389Appendix B: org.jfree.date.SerialDate\n 436             if (SerialDate.isLeapYear(y)) {\n 437                 mm = mm + 1;\n 438             }\n 439         }\n 440         final int dd = d;\n 441         return yy + mm + dd + 1;\n 442     }\n 443  444     /**\n 445      * Calculate the day, month and year from the serial number.\n 446      */\n 447     private void calcDayMonthYear() {\n 448 \n 449         // get the year from the serial date\n 450         final int days = this.serial - SERIAL_LOWER_BOUND; 451         // overestimated because we ignored leap days\n 452         final int overestimatedYYYY = 1900 + (days / 365);\n 453         final int leaps = SerialDate.leapYearCount(overestimatedYYYY);\n 454         final int nonleapdays = days - leaps;\n 455         // underestimated because we overestimated years 456         int underestimatedYYYY = 1900 + (nonleapdays / 365);\n 457 \n 458         if (underestimatedYYYY == overestimatedYYYY) {\n 459             this.year = underestimatedYYYY;\n 460         } 461         else {\n 462             int ss1 = calcSerial(1, 1, underestimatedYYYY);\n 463             while (ss1 <= this.serial) {\n 464                 underestimatedYYYY = underestimatedYYYY + 1; 465                 ss1 = calcSerial(1, 1, underestimatedYYYY);\n 466             }\n 467             this.year = underestimatedYYYY - 1;\n 468         }\n 469  470         final int ss2 = calcSerial(1, 1, this.year);\n 471 \n 472         int[] daysToEndOfPrecedingMonth 473             = AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;\n 474 \n 475         if (isLeapYear(this.year)) {\n 476             daysToEndOfPrecedingMonth\n 477                 = LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH; 478         }\n 479 \n 480         // get the month from the serial date\n 481         int mm = 1;\n 482         int sss = ss2 + daysToEndOfPrecedingMonth[mm] - 1; 483         while (sss < this.serial) {\n 484             mm = mm + 1;\n 485             sss = ss2 + daysToEndOfPrecedingMonth[mm] - 1;\n 486         }\n 487         this.month = mm - 1; 488 \n 489         // what's left is d(+1);\n 490         this.day = this.serial - ss2\n 491                    - daysToEndOfPrecedingMonth[this.month] + 1;\n 492  493     }\n 494 \n 495 }\nListing B-5 (continued)\nSpreadsheetDate.java", "390 Appendix B: org.jfree.date.SerialDate\nListing B-6 \nRelativeDayOfWeekRule.java\n   1 /* ========================================================================\n   2  * JCommon : a free general purpose class library for the Java(tm) platform\n   3  * ========================================================================\n   4  *\n   5  * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n   6  *\n   7  * Project Info:  http://www.jfree.org/jcommon/index.html\n   8  *   9  * This library is free software; you can redistribute it and/or modify it\n  10  * under the terms of the GNU Lesser General Public License as published by\n  11  * the Free Software Foundation; either version 2.1 of the License, or\n  12  * (at your option) any later version.\n  13  *\n  14  * This library is distributed in the hope that it will be useful, but\n  15  * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY  16  * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n  17  * License for more details.\n  18  *\n  19  * You should have received a copy of the GNU Lesser General Public\n  20  * License along with this library; if not, write to the Free Software  21  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n  22  * USA.\n  23  *\n  24  * [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n  25  * in the United States and other countries.]  26  *\n  27  * --------------------------\n  28  * RelativeDayOfWeekRule.java\n  29  * --------------------------  30  * (C) Copyright 2000-2003, by Object Refinery Limited and Contributors.\n  31  *\n  32  * Original Author:  David Gilbert (for Object Refinery Limited);\n  33  * Contributor(s):   -;\n  34  *  35  * $Id: RelativeDayOfWeekRule.java,v 1.6 2005/11/16 15:58:40 taqua Exp $\n  36  *\n  37  * Changes (from 26-Oct-2001)  38  * --------------------------\n  39  * 26-Oct-2001 : Changed package to com.jrefinery.date.*;\n  40  * 03-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n  41  *\n  42  */  43 \n  44 package org.jfree.date;\n  45 \n  46 /**\n  47  * An annual date rule that returns a date for each year based on (a) a  48  * reference rule; (b) a day of the week; and (c) a selection parameter\n  49  * (SerialDate.PRECEDING, SerialDate.NEAREST, SerialDate.FOLLOWING).\n  50  * <P>\n  51  * For example, Good Friday can be specified as 'the Friday PRECEDING Easter\n  52  * Sunday'.  53  *\n  54  * @author David Gilbert\n  55  */\n  56 public class RelativeDayOfWeekRule extends AnnualDateRule {\n  57   58     /** A reference to the annual date rule on which this rule is based. */\n  59     private AnnualDateRule subrule;\n  60   61     /**\n  62      * The day of the week (SerialDate.MONDAY, SerialDate.TUESDAY, and so on).", "391Appendix B: org.jfree.date.SerialDate\n  63      */\n  64     private int dayOfWeek;\n  65 \n  66     /** Specifies which day of the week (PRECEDING, NEAREST or FOLLOWING). */\n  67     private int relative;\n  68 \n  69     /**\n  70      * Default constructor - builds a rule for the Monday following 1 January.  71      */\n  72     public RelativeDayOfWeekRule() {\n  73         this(new DayAndMonthRule(), SerialDate.MONDAY, SerialDate.FOLLOWING);\n  74     }\n  75 \n  76     /**\n  77      * Standard constructor - builds rule based on the supplied sub-rule.  78      *\n  79      * @param subrule  the rule that determines the reference date.\n  80      * @param dayOfWeek  the day-of-the-week relative to the reference date.\n  81      * @param relative  indicates *which* day-of-the-week (preceding, nearest\n  82      *                  or following).  83      */\n  84     public RelativeDayOfWeekRule(final AnnualDateRule subrule,\n  85             final int dayOfWeek, final int relative) {\n  86         this.subrule = subrule;\n  87         this.dayOfWeek = dayOfWeek;  88         this.relative = relative;\n  89     }\n  90 \n  91     /**  92      * Returns the sub-rule (also called the reference rule).\n  93      *\n  94      * @return The annual date rule that determines the reference date for this\n  95      *         rule.\n  96      */  97     public AnnualDateRule getSubrule() {\n  98         return this.subrule;\n  99     } 100 \n 101     /**\n 102      * Sets the sub-rule.\n 103      *\n 104      * @param subrule  the annual date rule that determines the reference date 105      *                 for this rule.\n 106      */\n 107     public void setSubrule(final AnnualDateRule subrule) {\n 108         this.subrule = subrule;\n 109     } 110 \n 111     /**\n 112      * Returns the day-of-the-week for this rule.\n 113      *\n 114      * @return the day-of-the-week for this rule. 115      */\n 116     public int getDayOfWeek() {\n 117         return this.dayOfWeek;\n 118     }\n 119  120     /**\n 121      * Sets the day-of-the-week for this rule.\n 122      * 123      * @param dayOfWeek  the day-of-the-week (SerialDate.MONDAY,\n 124      *                   SerialDate.TUESDAY, and so on).\nListing B-6 (continued)\nRelativeDayOfWeekRule.java", "392 Appendix B: org.jfree.date.SerialDate\n 125      */\n 126     public void setDayOfWeek(final int dayOfWeek) {\n 127         this.dayOfWeek = dayOfWeek;\n 128     }\n 129 \n 130     /**\n 131      * Returns the 'relative' attribute, that determines *which*\n 132      * day-of-the-week we are interested in (SerialDate.PRECEDING, 133      * SerialDate.NEAREST or SerialDate.FOLLOWING).\n 134      *\n 135      * @return The 'relative' attribute.\n 136      */\n 137     public int getRelative() {\n 138         return this.relative;\n 139     } 140 \n 141     /**\n 142      * Sets the 'relative' attribute (SerialDate.PRECEDING, SerialDate.NEAREST,\n 143      * SerialDate.FOLLOWING).\n 144      * 145      * @param relative  determines *which* day-of-the-week is selected by this\n 146      *                  rule.\n 147      */\n 148     public void setRelative(final int relative) {\n 149         this.relative = relative; 150     }\n 151 \n 152     /**\n 153      * Creates a clone of this rule. 154      *\n 155      * @return a clone of this rule.\n 156      *\n 157      * @throws CloneNotSupportedException this should never happen.\n 158      */ 159     public Object clone() throws CloneNotSupportedException {\n 160         final RelativeDayOfWeekRule duplicate\n 161             = (RelativeDayOfWeekRule) super.clone(); 162         duplicate.subrule = (AnnualDateRule) duplicate.getSubrule().clone();\n 163         return duplicate;\n 164     }\n 165 \n 166     /** 167      * Returns the date generated by this rule, for the specified year.\n 168      *\n 169      * @param year  the year (1900 &lt;= year &lt;= 9999).\n 170      *\n 171      * @return The date generated by the rule for the given year (possibly 172      *         <code>null</code>).\n 173      */\n 174     public SerialDate getDate(final int year) {\n 175 \n 176         // check argument... 177         if ((year < SerialDate.MINIMUM_YEAR_SUPPORTED)\n 178             || (year > SerialDate.MAXIMUM_YEAR_SUPPORTED)) {\n 179             throw new IllegalArgumentException(\n 180                 \"RelativeDayOfWeekRule.getDate(): year outside valid range.\");\n 181         } 182 \n 183         // calculate the date...\n 184         SerialDate result = null; 185         final SerialDate base = this.subrule.getDate(year);\n 186 \nListing B-6 (continued)\nRelativeDayOfWeekRule.java", "393Appendix B: org.jfree.date.SerialDate\n 187         if (base != null) {\n 188             switch (this.relative) {\n 189                 case(SerialDate.PRECEDING):\n 190                     result = SerialDate.getPreviousDayOfWeek(this.dayOfWeek,\n 191                             base);\n 192                     break;\n 193                 case(SerialDate.NEAREST):\n 194                     result = SerialDate.getNearestDayOfWeek(this.dayOfWeek, 195                             base);\n 196                     break;\n 197                 case(SerialDate.FOLLOWING):\n 198                     result = SerialDate.getFollowingDayOfWeek(this.dayOfWeek,\n 199                             base);\n 200                     break;\n 201                 default: 202                     break;\n 203             }\n 204         }\n 205         return result;\n 206  207     }\n 208 \n 209 }\nListing B-6 (continued)\nRelativeDayOfWeekRule.java", "394 Appendix B: org.jfree.date.SerialDate\nListing B-7 \nDayDate.java (Final)\n   1 /* ========================================================================\n   2  * JCommon : a free general purpose class library for the Java(tm) platform\n   3  * ========================================================================\n   4  *\n   5  * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n   ...\n  36  */\n  37 package org.jfree.date;  38 \n  39 import java.io.Serializable;\n  40 import java.util.*;\n  41 \n  42 /**\n  43  * An abstract class that represents immutable dates with a precision of\n  44  * one day.  The implementation will map each date to an integer that  45  * represents an ordinal number of days from some fixed origin.\n  46  *\n  47  * Why not just use java.util.Date?  We will, when it makes sense.  At times,\n  48  * java.util.Date can be *too* precise - it represents an instant in time,\n  49  * accurate to 1/1000th of a second (with the date itself depending on the  50  * time-zone).  Sometimes we just want to represent a particular day (e.g. 21\n  51  * January 2015) without concerning ourselves about the time of day, or the\n  52  * time-zone, or anything else.  That's what we've defined DayDate for.\n  53  *\n  54  * Use DayDateFactory.makeDate to create an instance.  55  *\n  56  * @author David Gilbert\n  57  * @author Robert C. Martin did a lot of refactoring.\n  58  */  59 \n  60 public abstract class DayDate implements Comparable, Serializable {\n  61   public abstract int getOrdinalDay();\n  62   public abstract int getYear();\n  63   public abstract Month getMonth();  64   public abstract int getDayOfMonth();\n  65 \n  66   protected abstract Day getDayOfWeekForOrdinalZero();  67 \n  68   public DayDate plusDays(int days) {\n  69     return DayDateFactory.makeDate(getOrdinalDay() + days);\n  70   }\n  71   72   public DayDate plusMonths(int months) {\n  73     int thisMonthAsOrdinal = getMonth().toInt() - Month.JANUARY.toInt();\n  74     int thisMonthAndYearAsOrdinal = 12 * getYear() + thisMonthAsOrdinal;\n  75     int resultMonthAndYearAsOrdinal = thisMonthAndYearAsOrdinal + months;\n  76     int resultYear = resultMonthAndYearAsOrdinal / 12;  77     int resultMonthAsOrdinal = resultMonthAndYearAsOrdinal % 12 + Month.JANUARY.toInt();\n  78     Month resultMonth = Month.fromInt(resultMonthAsOrdinal);\n  79     int resultDay = correctLastDayOfMonth(getDayOfMonth(), resultMonth, resultYear);\n  80     return DayDateFactory.makeDate(resultDay, resultMonth, resultYear);\n  81   }  82 \n  83   public DayDate plusYears(int years) {\n  84     int resultYear = getYear() + years;\n  85     int resultDay = correctLastDayOfMonth(getDayOfMonth(), getMonth(), resultYear);\n  86     return DayDateFactory.makeDate(resultDay, getMonth(), resultYear);  87   }\n  88 \n  89   private int correctLastDayOfMonth(int day, Month month, int year) {  90     int lastDayOfMonth = DateUtil.lastDayOfMonth(month, year);\n  91     if (day > lastDayOfMonth)", "395Appendix B: org.jfree.date.SerialDate\n  92         day = lastDayOfMonth;\n  93     return day;\n  94   }\n  95 \n  96   public DayDate getPreviousDayOfWeek(Day targetDayOfWeek) {\n  97     int offsetToTarget = targetDayOfWeek.toInt() - getDayOfWeek().toInt();\n  98     if (offsetToTarget >= 0)\n  99       offsetToTarget -= 7; 100     return plusDays(offsetToTarget);\n 101   }\n 102 \n 103   public DayDate getFollowingDayOfWeek(Day targetDayOfWeek) {\n 104     int offsetToTarget = targetDayOfWeek.toInt() - getDayOfWeek().toInt();\n 105     if (offsetToTarget <= 0)\n 106       offsetToTarget += 7; 107     return plusDays(offsetToTarget);\n 108   }\n 109 \n 110   public DayDate getNearestDayOfWeek(Day targetDayOfWeek) {\n 111     int offsetToThisWeeksTarget = targetDayOfWeek.toInt() - getDayOfWeek().toInt(); 112     int offsetToFutureTarget = (offsetToThisWeeksTarget + 7) % 7;\n 113     int offsetToPreviousTarget = offsetToFutureTarget - 7;\n 114 \n 115     if (offsetToFutureTarget > 3)\n 116       return plusDays(offsetToPreviousTarget); 117     else\n 118       return plusDays(offsetToFutureTarget);\n 119   }\n 120  121   public DayDate getEndOfMonth() {\n 122     Month month = getMonth();\n 123     int year = getYear();\n 124     int lastDay = DateUtil.lastDayOfMonth(month, year);\n 125     return DayDateFactory.makeDate(lastDay, month, year); 126   }\n 127 \n 128   public Date toDate() { 129     final Calendar calendar = Calendar.getInstance();\n 130     int ordinalMonth = getMonth().toInt() - Month.JANUARY.toInt();\n 131     calendar.set(getYear(), ordinalMonth, getDayOfMonth(), 0, 0, 0);\n 132     return calendar.getTime();\n 133   } 134 \n 135   public String toString() {\n 136     return String.format(\"%02d-%s-%d\", getDayOfMonth(), getMonth(), getYear());\n 137   }\n 138  139   public Day getDayOfWeek() {\n 140     Day startingDay = getDayOfWeekForOrdinalZero();\n 141     int startingOffset = startingDay.toInt() - Day.SUNDAY.toInt();\n 142     int ordinalOfDayOfWeek = (getOrdinalDay() + startingOffset) % 7;\n 143     return Day.fromInt(ordinalOfDayOfWeek + Day.SUNDAY.toInt()); 144   }\n 145 \n 146   public int daysSince(DayDate date) {\n 147     return getOrdinalDay() - date.getOrdinalDay();\n 148   } 149 \n 150   public boolean isOn(DayDate other) {\n 151     return getOrdinalDay() == other.getOrdinalDay(); 152   }\n 153 \nListing B-7 (continued)\nDayDate.java (Final)", "396 Appendix B: org.jfree.date.SerialDate\n 154   public boolean isBefore(DayDate other) {\n 155     return getOrdinalDay() < other.getOrdinalDay();\n 156   }\n 157 \n 158   public boolean isOnOrBefore(DayDate other) {\n 159     return getOrdinalDay() <= other.getOrdinalDay();\n 160   }\n 161  162   public boolean isAfter(DayDate other) {\n 163     return getOrdinalDay() > other.getOrdinalDay();\n 164   }\n 165 \n 166   public boolean isOnOrAfter(DayDate other) {\n 167     return getOrdinalDay() >= other.getOrdinalDay();\n 168   } 169 \n 170   public boolean isInRange(DayDate d1, DayDate d2) {\n 171     return isInRange(d1, d2, DateInterval.CLOSED);\n 172   }\n 173  174   public boolean isInRange(DayDate d1, DayDate d2, DateInterval interval) {\n 175     int left = Math.min(d1.getOrdinalDay(), d2.getOrdinalDay());\n 176     int right = Math.max(d1.getOrdinalDay(), d2.getOrdinalDay());\n 177     return interval.isIn(getOrdinalDay(), left, right);\n 178   } 179 }\nListing B-7 (continued)\nDayDate.java (Final)", "397Appendix B: org.jfree.date.SerialDate\nListing B-8 \nMonth.java (Final)\n   1 package org.jfree.date;\n   2 \n   3 import java.text.DateFormatSymbols;\n   4 \n   5 public enum Month {\n   6   JANUARY(1), FEBRUARY(2), MARCH(3),\n   7   APRIL(4),   MAY(5),      JUNE(6),\n   8   JULY(7),    AUGUST(8),   SEPTEMBER(9),   9   OCTOBER(10),NOVEMBER(11),DECEMBER(12);\n  10   private static DateFormatSymbols dateFormatSymbols = new DateFormatSymbols();\n  11   private static final int[] LAST_DAY_OF_MONTH =\n  12     {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n  13 \n  14   private int index;\n  15   16   Month(int index) {\n  17     this.index = index;\n  18   }\n  19 \n  20   public static Month fromInt(int monthIndex) {  21     for (Month m : Month.values()) {\n  22       if (m.index == monthIndex)\n  23         return m;\n  24     }\n  25     throw new IllegalArgumentException(\"Invalid month index \" + monthIndex);  26   }\n  27 \n  28   public int lastDay() {\n  29     return LAST_DAY_OF_MONTH[index];  30   }\n  31 \n  32   public int quarter() {\n  33     return 1 + (index - 1) / 3;\n  34   }  35 \n  36   public String toString() {\n  37     return dateFormatSymbols.getMonths()[index - 1];  38   }\n  39 \n  40   public String toShortString() {\n  41     return dateFormatSymbols.getShortMonths()[index - 1];\n  42   }  43 \n  44   public static Month parse(String s) {\n  45     s = s.trim();\n  46     for (Month m : Month.values())\n  47       if (m.matches(s))  48         return m;\n  49 \n  50     try {\n  51       return fromInt(Integer.parseInt(s));\n  52     }  53     catch (NumberFormatException e) {}\n  54     throw new IllegalArgumentException(\"Invalid month \" + s);\n  55   }\n  56 \n  57   private boolean matches(String s) {  58     return s.equalsIgnoreCase(toString()) ||\n  59            s.equalsIgnoreCase(toShortString());\n  60   }  61 \n  62   public int toInt() {\n  63     return index;\n  64   }  65 }", "398 Appendix B: org.jfree.date.SerialDate\nListing B-9 \nDay.java (Final)\n   1 package org.jfree.date;\n   2 \n   3 import java.util.Calendar;\n   4 import java.text.DateFormatSymbols;\n   5 \n   6 public enum Day {\n   7   MONDAY(Calendar.MONDAY),\n   8   TUESDAY(Calendar.TUESDAY),   9   WEDNESDAY(Calendar.WEDNESDAY),\n  10   THURSDAY(Calendar.THURSDAY),\n  11   FRIDAY(Calendar.FRIDAY),\n  12   SATURDAY(Calendar.SATURDAY),\n  13   SUNDAY(Calendar.SUNDAY);\n  14 \n  15   private final int index;  16   private static DateFormatSymbols dateSymbols = new DateFormatSymbols();\n  17 \n  18   Day(int day) {\n  19     index = day;\n  20   }  21 \n  22   public static Day fromInt(int index) throws IllegalArgumentException {\n  23     for (Day d : Day.values())\n  24       if (d.index == index)\n  25         return d;  26     throw new IllegalArgumentException(\n  27       String.format(\"Illegal day index: %d.\", index));\n  28   }\n  29   30   public static Day parse(String s) throws IllegalArgumentException {\n  31     String[] shortWeekdayNames =\n  32       dateSymbols.getShortWeekdays();\n  33     String[] weekDayNames =\n  34       dateSymbols.getWeekdays();  35 \n  36     s = s.trim();\n  37     for (Day day : Day.values()) {  38       if (s.equalsIgnoreCase(shortWeekdayNames[day.index]) ||\n  39           s.equalsIgnoreCase(weekDayNames[day.index])) {\n  40         return day;\n  41       }\n  42     }  43     throw new IllegalArgumentException(\n  44       String.format(\"%s is not a valid weekday string\", s));\n  45   }\n  46 \n  47   public String toString() {  48     return dateSymbols.getWeekdays()[index];\n  49   }\n  50 \n  51   public int toInt() {\n  52     return index;  53   }\n  54 }", "399Appendix B: org.jfree.date.SerialDate\nListing B-10 \nDateInterval.java (Final)\n   1 package org.jfree.date;\n   2 \n   3 public enum DateInterval {\n   4   OPEN {\n   5     public boolean isIn(int d, int left, int right) {\n   6       return d > left && d < right;\n   7     }\n   8   },   9   CLOSED_LEFT {\n  10     public boolean isIn(int d, int left, int right) {\n  11       return d >= left && d < right;\n  12     }\n  13   },\n  14   CLOSED_RIGHT {\n  15     public boolean isIn(int d, int left, int right) {  16       return d > left && d <= right;\n  17     }\n  18   },\n  19   CLOSED {\n  20     public boolean isIn(int d, int left, int right) {  21       return d >= left && d <= right;\n  22     }\n  23   };\n  24 \n  25   public abstract boolean isIn(int d, int left, int right);  26 }", "400 Appendix B: org.jfree.date.SerialDate\nListing B-11 \nWeekInMonth.java (Final)\n   1 package org.jfree.date;\n   2 \n   3 public enum WeekInMonth {\n   4   FIRST(1), SECOND(2), THIRD(3), FOURTH(4), LAST(0);\n   5   private final int index;\n   6 \n   7   WeekInMonth(int index) {\n   8     this.index = index;   9   }\n  10 \n  11   public int toInt() {\n  12     return index;\n  13   }\n  14 }", "401Appendix B: org.jfree.date.SerialDate\nListing B-12 \nWeekdayRange.java (Final)\n   1 package org.jfree.date;\n   2 \n   3 public enum WeekdayRange {\n   4   LAST, NEAREST, NEXT\n   5 }", "402 Appendix B: org.jfree.date.SerialDate\nListing B-13 \nDateUtil.java (Final)\n   1 package org.jfree.date;\n   2 \n   3 import java.text.DateFormatSymbols;\n   4 \n   5 public class DateUtil {\n   6   private static DateFormatSymbols dateFormatSymbols = new DateFormatSymbols();\n   7 \n   8   public static String[] getMonthNames() {   9     return dateFormatSymbols.getMonths();\n  10   }\n  11 \n  12   public static boolean isLeapYear(int year) {\n  13     boolean fourth = year % 4 == 0;\n  14     boolean hundredth = year % 100 == 0;\n  15     boolean fourHundredth = year % 400 == 0;  16     return fourth && (!hundredth || fourHundredth);\n  17   }\n  18 \n  19   public static int lastDayOfMonth(Month month, int year) {\n  20     if (month == Month.FEBRUARY && isLeapYear(year))  21       return month.lastDay() + 1;\n  22     else\n  23       return month.lastDay();\n  24   }\n  25   26   public static int leapYearCount(int year) {\n  27     int leap4 = (year - 1896) / 4;\n  28     int leap100 = (year - 1800) / 100;\n  29     int leap400 = (year - 1600) / 400;  30     return leap4 - leap100 + leap400;\n  31   }\n  32 }", "403Appendix B: org.jfree.date.SerialDate\nListing B-14 \nDayDateFactory.java (Final)\n   1 package org.jfree.date;\n   2 \n   3 public abstract class DayDateFactory {\n   4   private static DayDateFactory factory = new SpreadsheetDateFactory();\n   5   public static void setInstance(DayDateFactory factory) {\n   6     DayDateFactory.factory = factory;\n   7   }\n   8    9   protected abstract DayDate _makeDate(int ordinal);\n  10   protected abstract DayDate _makeDate(int day, Month month, int year);\n  11   protected abstract DayDate _makeDate(int day, int month, int year);\n  12   protected abstract DayDate _makeDate(java.util.Date date);\n  13   protected abstract int _getMinimumYear();\n  14   protected abstract int _getMaximumYear();\n  15   16   public static DayDate makeDate(int ordinal) {\n  17     return factory._makeDate(ordinal);\n  18   }\n  19 \n  20   public static DayDate makeDate(int day, Month month, int year) {  21     return factory._makeDate(day, month, year);\n  22   }\n  23 \n  24   public static DayDate makeDate(int day, int month, int year) {\n  25     return factory._makeDate(day, month, year);  26   }\n  27 \n  28   public static DayDate makeDate(java.util.Date date) {\n  29     return factory._makeDate(date);  30   }\n  31 \n  32   public static int getMinimumYear() {\n  33     return factory._getMinimumYear();\n  34   }  35 \n  36   public static int getMaximumYear() {\n  37     return factory._getMaximumYear();  38   }\n  39 }", "404 Appendix B: org.jfree.date.SerialDate\nListing B-15 \nSpreadsheetDateFactory.java (Final)\n   1 package org.jfree.date;\n   2 \n   3 import java.util.*;\n   4 \n   5 public class SpreadsheetDateFactory extends DayDateFactory {\n   6   public DayDate _makeDate(int ordinal) {\n   7     return new SpreadsheetDate(ordinal);\n   8   }   9 \n  10   public DayDate _makeDate(int day, Month month, int year) {\n  11     return new SpreadsheetDate(day, month, year);\n  12   }\n  13 \n  14   public DayDate _makeDate(int day, int month, int year) {\n  15     return new SpreadsheetDate(day, month, year);  16   }\n  17 \n  18   public DayDate _makeDate(Date date) {\n  19     final GregorianCalendar calendar = new GregorianCalendar();\n  20     calendar.setTime(date);  21     return new SpreadsheetDate(\n  22       calendar.get(Calendar.DATE),\n  23       Month.fromInt(calendar.get(Calendar.MONTH) + 1),\n  24       calendar.get(Calendar.YEAR));\n  25   }  26 \n  27   protected int _getMinimumYear() {\n  28     return SpreadsheetDate.MINIMUM_YEAR_SUPPORTED;\n  29   }  30 \n  31   protected int _getMaximumYear() {\n  32     return SpreadsheetDate.MAXIMUM_YEAR_SUPPORTED;\n  33   }\n  34 }", "405Appendix B: org.jfree.date.SerialDate\nListing B-16 \nSpreadsheetDate.java (Final)\n   1 /* ========================================================================\n   2  * JCommon : a free general purpose class library for the Java(tm) platform\n   3  * ========================================================================\n   4  *\n   5  * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n   6  * \n...\n  52  *  53  */\n  54 \n  55 package org.jfree.date;\n  56 \n  57 import static org.jfree.date.Month.FEBRUARY;\n  58 \n  59 import java.util.*;  60 \n  61 /**\n  62  * Represents a date using an integer, in a similar fashion to the\n  63  * implementation in Microsoft Excel.  The range of dates supported is\n  64  * 1-Jan-1900 to 31-Dec-9999.  65  * <p/>\n  66  * Be aware that there is a deliberate bug in Excel that recognises the year\n  67  * 1900 as a leap year when in fact it is not a leap year. You can find more\n  68  * information on the Microsoft website in article Q181370:\n  69  * <p/>  70  * http://support.microsoft.com/support/kb/articles/Q181/3/70.asp\n  71  * <p/>\n  72  * Excel uses the convention that 1-Jan-1900 = 1.  This class uses the\n  73  * convention 1-Jan-1900 = 2.  74  * The result is that the day number in this class will be different to the\n  75  * Excel figure for January and February 1900...but then Excel adds in an extra\n  76  * day (29-Feb-1900 which does not actually exist!) and from that point forward\n  77  * the day numbers will match.\n  78  *  79  * @author David Gilbert\n  80  */\n  81 public class SpreadsheetDate extends DayDate {  82   public static final int EARLIEST_DATE_ORDINAL = 2;     // 1/1/1900\n  83   public static final int LATEST_DATE_ORDINAL = 2958465; // 12/31/9999\n  84   public static final int MINIMUM_YEAR_SUPPORTED = 1900;\n  85   public static final int MAXIMUM_YEAR_SUPPORTED = 9999;\n  86   static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =  87     {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};\n  88   static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n  89     {0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};\n  90 \n  91   private int ordinalDay;\n  92   private int day;  93   private Month month;\n  94   private int year;\n  95 \n  96   public SpreadsheetDate(int day, Month month, int year) {\n  97     if (year < MINIMUM_YEAR_SUPPORTED || year > MAXIMUM_YEAR_SUPPORTED)  98       throw new IllegalArgumentException(\n  99         \"The 'year' argument must be in range \" +\n 100         MINIMUM_YEAR_SUPPORTED + \" to \" + MAXIMUM_YEAR_SUPPORTED + \".\");\n 101     if (day < 1 || day > DateUtil.lastDayOfMonth(month, year))\n 102       throw new IllegalArgumentException(\"Invalid 'day' argument.\"); 103 \n 104     this.year = year;\n 105     this.month = month;", "406 Appendix B: org.jfree.date.SerialDate\n 106     this.day = day;\n 107     ordinalDay = calcOrdinal(day, month, year);\n 108   }\n 109 \n 110   public SpreadsheetDate(int day, int month, int year) {\n 111     this(day, Month.fromInt(month), year);\n 112   }\n 113  114   public SpreadsheetDate(int serial) {\n 115     if (serial < EARLIEST_DATE_ORDINAL || serial > LATEST_DATE_ORDINAL)\n 116       throw new IllegalArgumentException(\n 117         \"SpreadsheetDate: Serial must be in range 2 to 2958465.\");\n 118 \n 119     ordinalDay = serial;\n 120     calcDayMonthYear(); 121   }\n 122 \n 123   public int getOrdinalDay() {\n 124     return ordinalDay;\n 125   } 126 \n 127   public int getYear() {\n 128     return year;\n 129   }\n 130  131   public Month getMonth() {\n 132     return month;\n 133   }\n 134  135   public int getDayOfMonth() {\n 136     return day;\n 137   }\n 138 \n 139   protected Day getDayOfWeekForOrdinalZero() {return Day.SATURDAY;} 140 \n 141   public boolean equals(Object object) {\n 142     if (!(object instanceof DayDate)) 143       return false;\n 144 \n 145     DayDate date = (DayDate) object;\n 146     return date.getOrdinalDay() == getOrdinalDay();\n 147   } 148 \n 149   public int hashCode() {\n 150     return getOrdinalDay();\n 151   }\n 152  153   public int compareTo(Object other) {\n 154     return daysSince((DayDate) other);\n 155   }\n 156 \n 157   private int calcOrdinal(int day, Month month, int year) { 158     int leapDaysForYear = DateUtil.leapYearCount(year - 1);\n 159     int daysUpToYear = (year - MINIMUM_YEAR_SUPPORTED) * 365 + leapDaysForYear;\n 160     int daysUpToMonth = AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[month.toInt()];\n 161     if (DateUtil.isLeapYear(year) && month.toInt() > FEBRUARY.toInt())\n 162       daysUpToMonth++; 163     int daysInMonth = day - 1;\n 164     return daysUpToYear + daysUpToMonth + daysInMonth + EARLIEST_DATE_ORDINAL;\n 165   } 166 \nListing B-16 (continued)\nSpreadsheetDate.java (Final)", "407Appendix B: org.jfree.date.SerialDate\n 167   private void calcDayMonthYear() {\n 168     int days = ordinalDay - EARLIEST_DATE_ORDINAL;\n 169     int overestimatedYear = MINIMUM_YEAR_SUPPORTED + days / 365;\n 170     int nonleapdays = days - DateUtil.leapYearCount(overestimatedYear);\n 171     int underestimatedYear = MINIMUM_YEAR_SUPPORTED + nonleapdays / 365;\n 172 \n 173     year = huntForYearContaining(ordinalDay, underestimatedYear);\n 174     int firstOrdinalOfYear = firstOrdinalOfYear(year); 175     month = huntForMonthContaining(ordinalDay, firstOrdinalOfYear);\n 176     day = ordinalDay - firstOrdinalOfYear - daysBeforeThisMonth(month.toInt());\n 177   }\n 178 \n 179   private Month huntForMonthContaining(int anOrdinal, int firstOrdinalOfYear) {\n 180     int daysIntoThisYear = anOrdinal - firstOrdinalOfYear;\n 181     int aMonth = 1; 182     while (daysBeforeThisMonth(aMonth) < daysIntoThisYear)\n 183       aMonth++;\n 184 \n 185     return Month.fromInt(aMonth - 1);\n 186   } 187 \n 188   private int daysBeforeThisMonth(int aMonth) {\n 189     if (DateUtil.isLeapYear(year))\n 190       return LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[aMonth] - 1;\n 191     else 192       return AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[aMonth] - 1;\n 193   }\n 194 \n 195   private int huntForYearContaining(int anOrdinalDay, int startingYear) { 196     int aYear = startingYear;\n 197     while (firstOrdinalOfYear(aYear) <= anOrdinalDay)\n 198       aYear++;\n 199 \n 200     return aYear - 1; 201   }\n 202 \n 203   private int firstOrdinalOfYear(int year) { 204     return calcOrdinal(1, Month.JANUARY, year);\n 205   }\n 206 \n 207   public static DayDate createInstance(Date date) {\n 208     GregorianCalendar calendar = new GregorianCalendar(); 209     calendar.setTime(date);\n 210     return new SpreadsheetDate(calendar.get(Calendar.DATE),\n 211                                Month.fromInt(calendar.get(Calendar.MONTH) + 1),\n 212                                calendar.get(Calendar.YEAR));\n 213  214   }\n 215 }\nListing B-16 (continued)\nSpreadsheetDate.java (Final)", "This page intentionally left blank", "409\nAppendix C\nCross References of Heuristics\nCross references of Smells and Heuristics. All other cross references can be deleted.\nC1 .......................................................................16-276, 16-279, 17-292\nC2 ......................................................... 16-279, 16-285, 16-295, 17-292\nC3 ......................................................... 16-283, 16-285, 16-288, 17-293\nC4 ................................................................................................. 17-293\nC5 ................................................................................................. 17-293\nE1 ................................................................................................. 17-294\nE2 ................................................................................................. 17-294\nF1 ....................................................................................14-239, 17-295\nF2 ................................................................................................. 17-295\nF3 ................................................................................................. 17-295\nF4 ...............................14-289, 16-273, 16-285, 16-287, 16-288, 17-295\nG1 ....................................................................................16-276, 17-295\nG2 .......................................................................16-273, 16-274, 17-296\nG3 ....................................................................................16-274, 17-296\nG4 ................................................9-31, 16-279, 16-286, 16-291, 17-297\nG5 ...................................9-31, 16-279, 16-286, 16-291, 16-296, 17-297\nG6 ................................6-106, 16-280, 16-283, 16-284, 16-289, 16-293,\n16-294, 16-296, 17-299\nG7 .......................................................................16-281, 16-283, 17-300\nG8 ....................................................................................16-283, 17-301\nG9 ............................................16-283, 16-285, 16-286, 16-287, 17-302\nG10 ..............................................5-86, 15-264, 16-276, 16-284, 17-302\nG11 ..........................................15-264, 16-284, 16-288, 16-292, 17-302\nG12 ............... 16-284, 16-285, 16-286, 16-287, 16-288, 16-295, 17-303\nG13 .....................................................................16-286, 16-288, 17-303\nG14 .....................................................................16-288, 16-292, 17-304", "410 Appendix C: Cross References of Heuristics\nG15 ..................................................................................16-288, 17-305\nG16 ..................................................................................16-289, 17-306\nG17 .....................................................................16-289, 17-307, 17-312\nG18 ....................................................... 16-289, 16-290, 16-291, 17-308\nG19 ....................................................... 16-290, 16-291, 16-292, 17-309\nG20 ..................................................................................16-290, 17-309\nG21 ..................................................................................16-291, 17-310\nG22 ..................................................................................16-294, 17-322\nG23 ..........................................................??-44, 14-239, 16-295, 17-313\nG24 ..................................................................................16-296, 17-313\nG25 ..................................................................................16-296, 17-314\nG26 ............................................................................................... 17-316\nG27 ............................................................................................... 17-316\nG28 ..................................................................................15-262, 17-317\nG29 ..................................................................................15-262, 17-317\nG30 ..................................................................................15-263, 17-317\nG31 ..................................................................................15-264, 17-318\nG32 ..................................................................................15-265, 17-319\nG33 .....................................................................15-265, 15-266, 17-320\nG34 ...........................................................................1-40, 6-106, 17-321\nG35 ......................................................................................5-90, 17-323\nG36 ....................................................................................6-103, 17-324\nJ1 .....................................................................................16-276, 17-325\nJ2 ........................................................................16-278, 16-285, 17-326\nJ3 ........................................................................16-283, 16-285, 17-327\nN1 ..............................15-264, 16-277, 16-279, 16-282, 16-287, 16-288,\n16-289, 16-290, 16-294, 16-296, 17-328\nN2 ....................................................................................16-277, 17-330\nN3 .......................................................................16-284, 16-288, 17-331\nN4 .......................................................................15-263, 16-291, 17-332\nN5 ............................................................. 2-26, 14-221, 15-262, 17-332\nN6 ....................................................................................15-261, 17-333\nN7 ....................................................................................15-263, 17-333\nT1 .......................................................................16-273, 16-274, 17-334\nT2 ....................................................................................16-273, 17-334\nT3 ....................................................................................16-274, 17-334\nT4 ................................................................................................. 17-334\nT5 .......................................................................16-274, 16-275, 17-335\nT6 ....................................................................................16-275, 17-335\nT7 ....................................................................................16-275, 17-335\nT8 ....................................................................................16-275, 17-335\nT9 ................................................................................................. 17-336", "411\nEpilogue\nIn 2005, while attending the Agile conference in Denver, Elisabeth Hedrickson1 handed me\na green wrist band similar to the kind that Lance Armstrong made so popular. This one\nsaid \u201cTest Obsessed\u201d on it. I gladly put it on and wore it proudly. Since learning TDD from\nKent Beck in 1999, I have indeed become obsessed with test-driven development.\nBut then something strange happened. I found I could not take the band off. Not\nbecause it was physically stuck, but because it was morally stuck. The band made an overt\nstatement about my professional ethics. It was a visible indication of my committment to\nwriting the best code I could write. Taking it off seemed like a betrayal of those ethics and\nof that committment.\nSo it is on my wrist still. When I write code, I see it there in my peripheral vision. It is\na constant reminder of the promise I made to myself to write clean code.\n1. http://www.qualitytree.com/", "This page intentionally left blank", "413\nIndex\n## detection, 237\u2013238\n++ (pre- or post-increment) operator, \n325, 326\nA\naborted computation, 109\nabstract classes, 149, 271, 290\nABSTRACT FACTORY pattern, 38, 156, \n273, 274\nabstract interfaces, 94\nabstract methods\nadding to ArgumentMarshaler, 234\u2013235\nmodifying, 282\nabstract terms, 95\nabstraction\nclasses depending on, 150\ncode at wrong level of, 290\u2013291\ndescending one level at a time, 37\nfunctions descending only one level \nof, 304\u2013306\nmixing levels of, 36\u201337\nnames at the appropriate level of, 311\nseparating levels of, 305\nwrapping an implementation, 11\nabstraction levels\nraising, 290\nseparating, 305\naccessor functions, Law of Demeter \nand, 98\naccessors, naming, 25\nActive Records, 101\nadapted server, 185\naffinity, 84\nAgile Software Development: Principles, \nPatterns, Practices (PPP), 15\nalgorithms\ncorrecting, 269\u2013270\nrepeating, 48\nunderstanding, 297\u2013298\nambiguities\nin code, 301\nignored tests as, 313\namplification comments, 59\nanalysis functions, 265\n\u201cannotation form\u201d, of AspectJ, 166\nAnt project, 76, 77\nAOP (aspect-oriented programming), \n160, 163\nAPIs. See also public APIs\ncalling a null-returning method \nfrom, 110\nspecialized for tests, 127\nwrapping third-party, 108\napplications\ndecoupled from Spring, 164\ndecoupling from construction \ndetails, 156\ninfrastructure of, 163\nkeeping concurrency-related code \nseparate, 181\narbitrary structure, 303\u2013304\nargs array, converting into a list, 231\u2013232\nArgs class\nconstructing, 194\nimplementation of, 194\u2013200\nrough drafts of, 201\u2013212, 226\u2013231", "414 Index\nArgsException class\nlisting, 198\u2013200\nmerging exceptions into, 239\u2013242\nargument(s)\nflag, 41\nfor a function, 40\nin functions, 288\nmonadic forms of, 41\nreducing, 43\nargument lists, 43\nargument objects, 43\nargument types\nadding, 200, 237\nnegative impact of, 208\nArgumentMarshaler class\nadding the skeleton of, 213\u2013214\nbirth of, 212\nArgumentMarshaler interface, 197\u2013198\narrays, moving, 279\nart, of clean code, 6\u20137\nartificial coupling, 293\nAspectJ language, 166\naspect-oriented programming (AOP), \n160, 163\naspects\nin AOP, 160\u2013161\n\u201cfirst-class\u201d support for, 166\nassert statements, 130\u2013131\nassertEquals, 42\nassertions, using a set of, 111\nassignments, unaligned, 87\u201388\natomic operation, 323\u2013324\nattributes, 68\nauthors\nof JUnit, 252\nprogrammers as, 13\u201314\nauthorship statements, 55\nautomated code instrumentation, 189\u2013190\nautomated suite, of unit tests, 124\nB\nbad code, 3\u20134. See also dirty code; \nmessy code\ndegrading effect of, 250\nexample, 71\u201372\nexperience of cleaning, 250\nnot making up for, 55\nbad comments, 59\u201374\nbanner, gathering functions beneath, 67\nbase classes, 290, 291\nBDUF (Big Design Up Front), 167\nbeans, private variables manipulated, \n100\u2013101\nBeck, Kent, 3, 34, 71, 171, 252, \n289, 296\nbehaviors, 288\u2013289\nBig Design Up Front (BDUF), 167\nblank lines, in code, 78\u201379\nblocks, calling functions within, 35\nBooch,Grady, 8\u20139\nboolean, passing into a function, 41\nboolean arguments, 194, 288\nboolean map, deleting, 224\nboolean output, of tests, 132\nbound resources, 183, 184\nboundaries\nclean, 120\nexploring and learning, 116\nincorrect behavior at, 289\nseparating known from unknown, \n118\u2013119\nboundary condition errors, 269\nboundary conditions\nencapsulating, 304\ntesting, 314\nboundary tests, easing a migration, 118\n\u201cBowling Game\u201d, 312\nBoy Scout Rule, 14\u201315, 257\nfollowing, 284\nsatisfying, 265\nbroken windows metaphor, 8\nbucket brigade, 303\nBUILD-OPERATE-CHECK pattern, 127\nbuilds, 287\nbusiness logic, separating from error \nhandling, 109\nbylines, 68\nbyte-manipulation libraries, 161, \n162\u2013163", "415Index\nC\nThe C++ Programming Language, 7\ncalculations, breaking into intermediate \nvalues, 296\ncall stack, 324\nCallable interface, 326\ncaller, cluttering, 104\ncalling hierarchy, 106\ncalls, avoiding chains of, 98\ncaring, for code, 10\nCartesian points, 42\nCAS operation, as atomic, 328\nchange(s)\nisolating from, 149\u2013150\nlarge number of very tiny, 213\norganizing for, 147\u2013150\ntests enabling, 124\nchange history, deleting, 270\ncheck exceptions, in Java, 106\ncircular wait, 337, 338\u2013339\nclarification, comments as, 57\nclarity, 25, 26\nclass names, 25\nclasses\ncohesion of, 140\u2013141\ncreating for bigger concepts, 28\u201329\ndeclaring instance variables, 81\nenforcing design and business \nrules, 115\nexposing internals of, 294\ninstrumenting into ConTest, 342\nkeeping small, 136, 175\nminimizing the number of, 176\nnaming, 25, 138\nnonthread-safe, 328\u2013329\nas nouns of a language, 49\norganization of, 136\norganizing to reduce risk of \nchange, 147\nsupporting advanced concurrency \ndesign, 183\nclassification, of errors, 107\nclean boundaries, 120\nclean code\nart of, 6\u20137\ndescribed, 7\u201312\nwriting, 6\u20137\nclean tests, 124\u2013127\ncleanliness\nacquired sense of, 6\u20137\ntied to tests, 9\ncleanup, of code, 14\u201315\nclever names, 26\nclient, using two methods, 330\nclient code, connecting to a server, 318\nclient-based locking, 185, 329, 330\u2013332\nclientScheduler, 320\nclient/server application, concurrency in, \n317\u2013321\nClient/Server nonthreaded, code for, \n343\u2013346\nclient-server using threads, code changes, \n346\u2013347\nClientTest.java, 318, 344\u2013346\nclosing braces, comments on, 67\u201368\nClover, 268, 269\nclutter\nJavadocs as, 276\nkeeping free of, 293\ncode, 2\nbad, 3\u20134\nBeck's rules of, 10\ncommented-out, 68\u201369, 287\ndead, 292\nexplaining yourself in, 55\nexpressing yourself in, 54\nformatting of, 76\nimplicity of, 18\u201319\ninstrumenting, 188, 342\njiggling, 190\nmaking readable, 311\nnecessity of, 2\nreading from top to bottom, 37\nsimplicity of, 18, 19\ntechnique for shrouding, 20", "416 Index\ncode, continued\nthird-party, 114\u2013115\nwidth of lines in, 85\u201390\nat wrong level of abstraction, 290\u2013291\ncode bases, dominated by error \nhandling, 103\ncode changes, comments not always \nfollowing, 54\ncode completion, automatic, 20\ncode coverage analysis, 254\u2013256\ncode instrumentation, 188\u2013190\n\u201ccode sense\u201d, 6, 7\ncode smells, listing of, 285\u2013314\ncoding standard, 299\ncohesion\nof classes, 140\u2013141\nmaintaining, 141\u2013146\ncommand line arguments, 193\u2013194\ncommands, separating from queries, 45\u201346\ncomment header standard, 55\u201356\ncomment headers, replacing, 70\ncommented-out code, 68\u201369, 287\ncommenting style, example of bad, 71\u201372\ncomments\namplifying importance of \nsomething, 59\nbad, 59\u201374\ndeleting, 282\nas failures, 54\ngood, 55\u201359\nheuristics on, 286\u2013287\nHTML, 69\ninaccurate, 54\ninformative, 56\njournal, 63\u201364\nlegal, 55\u201356\nmandated, 63\nmisleading, 63\nmumbling, 59\u201360\nas a necessary evil, 53\u201359\nnoise, 64\u201366\nnot making up for bad code, 55\nobsolete, 286\npoorly written, 287\nproper use of, 54\nredundant, 60\u201362, 272, 275, 286\u2013287\nrestating the obvious, 64\nseparated from code, 54\nTODO, 58\u201359\ntoo much information in, 70\nventing in, 65\nwriting, 287\n\u201ccommunication gap\u201d, minimizing, 168\nCompare and Swap (CAS) operation, \n327\u2013328\nComparisonCompactor module, 252\u2013265\ndefactored, 256\u2013261\nfinal, 263\u2013265\ninterim, 261\u2013263\noriginal code, 254\u2013256\ncompiler warnings, turning off, 289\ncomplex code, demonstrating failures \nin, 341\ncomplexity, managing, 139\u2013140\ncomputer science (CS) terms, using for \nnames, 27\nconcepts\nkeeping close to each other, 80\nnaming, 19\none word per, 26\nseparating at different levels, 290\nspelling similar similarly, 20\nvertical openness between, 78\u201379\nconceptual affinity, of code, 84\nconcerns\ncross-cutting, 160\u2013161\nseparating, 154, 166, 178, 250\nconcrete classes, 149\nconcrete details, 149\nconcrete terms, 94\nconcurrency\ndefense principles, 180\u2013182\nissues, 190\nmotives for adopting, 178\u2013179\nmyths and misconceptions about, \n179\u2013180\nconcurrency code\ncompared to nonconcurrency-related \ncode, 181\nfocusing, 321", "417Index\nconcurrent algorithms, 179\nconcurrent applications, partition \nbehavior, 183\nconcurrent code\nbreaking, 329\u2013333\ndefending from problems of, 180\nflaws hiding in, 188\nconcurrent programming, 180\nConcurrent Programming in Java: Design \nPrinciples and Patterns, 182, 342\nconcurrent programs, 178\nconcurrent update problems, 341\nConcurrentHashMap implementation, 183\nconditionals\navoiding negative, 302\nencapsulating, 257\u2013258, 301\nconfigurable data, 306\nconfiguration constants, 306\nconsequences, warning of, 58\nconsistency\nin code, 292\nof enums, 278\nin names, 40\nconsistent conventions, 259\nconstants\nversus enums, 308\u2013309\nhiding, 308\ninheriting, 271, 307\u2013308\nkeeping at the appropriate level, 83\nleaving as raw numbers, 300\nnot inheriting, 307\u2013308\npassing as symbols, 276\nturning into enums, 275\u2013276\nconstruction\nmoving all to main, 155, 156\nseparating with factory, 156\nof a system, 154\nconstructor arguments, 157\nconstructors, overloading, 25\nconsumer threads, 184\nConTest tool, 190, 342\ncontext\nadding meaningful, 27\u201329\nnot adding gratuitous, 29\u201330\nproviding with exceptions, 107\ncontinuous readers, 184\ncontrol variables, within loop statements, \n80\u201381\nconvenient idioms, 155\nconvention(s)\nfollowing standard, 299\u2013300\nover configuration, 164\nstructure over, 301\nusing consistent, 259\nconvoluted code, 175\ncopyright statements, 55\ncosmic-rays.See one-offs\nCountDownLatch class, 183\ncoupling. See also decoupling; temporal \ncoupling; tight coupling\nartificial, 293\nhidden temporal, 302\u2013303\nlack of, 150\ncoverage patterns, testing, 314\ncoverage tools, 313\n\u201ccrisp abstraction\u201d, 8\u20139\ncross-cutting concerns, 160\nCunningham, Ward, 11\u201312\ncuteness, in code, 26\nD\ndangling false argument, 294\ndata\nabstraction, 93\u201395\ncopies of, 181\u2013182\nencapsulation, 181\nlimiting the scope of, 181\nsets processed in parallel, 179\ntypes, 97, 101\ndata structures. See also structure(s)\ncompared to objects, 95, 97\ndefined, 95\ninterfaces representing, 94\ntreating Active Records as, 101\ndata transfer-objects (DTOs), \n100\u2013101, 160\ndatabase normal forms, 48\nDateInterval enum, 282\u2013283\nDAY enumeration, 277", "418 Index\nDayDate class, running SerialDate\nas, 271\nDayDateFactory, 273\u2013274\ndead code, 288, 292\ndead functions, 288\ndeadlock, 183, 335\u2013339\ndeadly embrace. See circular wait\ndebugging, finding deadlocks, 336\ndecision making, optimizing, 167\u2013168\ndecisions, postponing, 168\ndeclarations, unaligned, 87\u201388\nDECORATOR objects, 164\nDECORATOR pattern, 274\ndecoupled architecture, 167\ndecoupling, from construction \ndetails, 156\ndecoupling strategy, concurrency \nas, 178\ndefault constructor, deleting, 276\ndegradation, preventing, 14\ndeletions, as the majority of \nchanges, 250\ndensity, vertical in code, 79\u201380\ndependencies\nfinding and breaking, 250\ninjecting, 157\nlogical, 282\nmaking logical physical, 298\u2013299\nbetween methods, 329\u2013333\nbetween synchronized \nmethods, 185\nDependency Injection (DI), 157\nDependency Inversion Principle (DIP), \n15, 150\ndependency magnet, 47\ndependent functions, formatting, 82\u201383\nderivatives\nbase classes depending on, 291\nbase classes knowing about, 273\nof the exception class, 48\nmovingset functions into, 232, \n233\u2013235\npushing functionality into, 217\ndescription\nof a class, 138\noverloading the structure of code \ninto, 310\ndescriptive names\nchoosing, 309\u2013310\nusing, 39\u201340\ndesign(s)\nof concurrent algorithms, 179\nminimally coupled, 167\nprinciples of, 15\ndesign patterns, 290\ndetails, paying attention to, 8\nDI (Dependency Injection), 157\nDijkstra, Edsger, 48\ndining philosophers execution model, \n184\u2013185\nDIP (Dependency Inversion Principle), \n15, 150\ndirty code. See also bad code; \nmessy code\ndirty code, cleaning, 200\ndirty tests, 123\ndisinformation, avoiding, 19\u201320\ndistance, vertical in code, 80\u201384\ndistinctions, making meaningful, 20\u201321\ndomain-specific languages (DSLs), \n168\u2013169\ndomain-specific testing language, 127\nDoubleArgumentMarshaler class, 238\nDRY principle (Don't Repeat Yourself), \n181, 289\nDTOs (data transfer objects), 100\u2013101, 160\ndummy scopes, 90\nduplicateif statements, 276\nduplication\nof code, 48\nin code, 289\u2013290\neliminating, 173\u2013175\nfocusing on, 10\nforms of, 173, 290\nreduction of, 48\nstrategies for eliminating, 48", "419Index\ndyadic argument, 40\ndyadic functions, 42\ndynamic proxies, 161\nE\ne, as a variable name, 22\nEclipse, 26\nedit sessions, playing back, 13\u201314\nefficiency, of code, 7\nEJB architecture, early as over-engineered, \n167\nEJB standard, complete overhaul of, 164\nEJB2 beans, 160\nEJB3, Bank object rewritten in, 165\u2013166\n\u201celegant\u201d code, 7\nemergent design, 171\u2013176\nencapsulation, 136\nof boundary conditions, 304\nbreaking, 106\u2013107\nof conditionals, 301\nencodings, avoiding, 23\u201324, 312\u2013313\nentity bean, 158\u2013160\nenum(s)\nchanging MonthConstants to, 272\nusing, 308\u2013309\nenumeration, moving, 277\nenvironment, heuristics on, 287\nenvironment control system, 128\u2013129\nenvying, the scope of a class, 293\nerror check, hiding a side effect, 258\nError class, 47\u201348\nerror code constants, 198\u2013200\nerror codes\nimplying a class or enum, 47\u201348\npreferring exceptions to, 46\nreturning, 103\u2013104\nreusing old, 48\nseparating from the Args module, \n242\u2013250\nerror detection, pushing to the edges, 109\nerror flags, 103\u2013104\nerror handling, 8, 47\u201348\nerror messages, 107, 250\nerror processing, testing, 238\u2013239\nerrorMessage method, 250\nerrors. See also boundary condition errors; \nspelling errors; string comparison \nerrors\nclassifying, 107\nEvans, Eric, 311\nevents, 41\nexception classification, 107\nexception clauses, 107\u2013108\nexception management code, 223\nexceptions\ninstead of return codes, 103\u2013105\nnarrowing the type of, 105\u2013106\npreferring to error codes, 46\nproviding context with, 107\nseparating from Args, 242\u2013250\nthrowing, 104\u2013105, 194\nunchecked, 106\u2013107\nexecution, possible paths of, 321\u2013326\nexecution models, 183\u2013185\nExecutor framework, 326\u2013327\nExecutorClientScheduler.java, 321\nexplanation, of intent, 56\u201357\nexplanatory variables, 296\u2013297\nexplicitness, of code, 19\nexpressive code, 295\nexpressiveness\nin code, 10\u201311\nensuring, 175\u2013176\nExtract Method refactoring, 11\nExtreme Programming Adventures \nin C#, 10\nExtreme Programming Installed, 10\n\u201ceye-full\u201d, code fitting into, 79\u201380\nF\nfactories, 155\u2013156\nfactory classes, 273\u2013275\nfailure\nto express ourselves in code, 54", "420 Index\nfailure, continued\npatterns of, 314\ntolerating with no harm, 330\nfalse argument, 294\nfast tests, 132\nfast-running threads, starving longer \nrunning, 183\nfear, of renaming, 30\nFeathers, Michael, 10\nfeature envy\neliminating, 293\u2013294\nsmelling of, 278\nfile size, in Java, 76\nfinal keywords, 276\nF.I.R.S.T. acronym, 132\u2013133\nFirst Law, of TDD, 122\nFitNesse project\ncoding style for, 90\nfile sizes, 76, 77\nfunction in, 32\u201333\ninvoking all tests, 224\nflag arguments, 41, 288\nfocussed code, 8\nforeign code. See third-party code\nformatting\nhorizontal, 85\u201390\npurpose of, 76\nUncle Bob\u2019s rules, 90\u201392\nvertical, 76\u201385\nformatting style, for a team of \ndevelopers, 90\nFortran, forcing encodings, 23\nFowler, Martin, 285, 293\nframe, 324\nfunction arguments, 40\u201345\nfunction call dependencies, 84\u201385\nfunction headers, 70\nfunction signature, 45\nfunctionality, placement of, 295\u2013296\nfunctions\nbreaking into smaller, 141\u2013146\ncalling within a block, 35\ndead, 288\ndefining private, 292\ndescending one level of abstraction, \n304\u2013306\ndoing one thing, 35\u201336, 302\ndyadic, 42\neliminating extraneous if statements, \n262\nestablishing the temporal nature \nof, 260\nformatting dependent, 82\u201383\ngathering beneath a banner, 67\nheuristics on, 288\nintention-revealing, 19\nkeeping small, 175\nlength of, 34\u201335\nmoving, 279\nnaming, 39, 297\nnumber of arguments in, 288\none level of abstraction per, 36\u201337\nin place of comments, 67\nrenaming for clarity, 258\nrewriting for clarity, 258\u2013259\nsections within, 36\nsmall as better, 34\nstructured programming with, 49\nunderstanding, 297\u2013298\nas verbs of a language, 49\nwriting, 49\nfutures, 326\nG\nGamma, Eric, 252\ngeneral heuristics, 288\u2013307\ngenerated byte-code, 180\ngenerics, improving code readability, 115\nget functions, 218\ngetBoolean function, 224\nGETFIELD instruction, 325, 326\ngetNextId method, 326\ngetState function, 129\nGilbert, David, 267, 268\ngiven-when-then convention, 130\nglitches.See one-offs", "421Index\nglobal setup strategy, 155\n\u201cGod class\u201d, 136\u2013137\ngood comments, 55\u201359\ngoto statements, avoiding, 48, 49\ngrand redesign, 5\ngratuitous context, 29\u201330\nH\nhand-coded instrumentation, 189\nHashTable, 328\u2013329\nheaders. See comment headers; function \nheaders\nheuristics\ncross references of, 286, 409\ngeneral, 288\u2013307\nlisting of, 285\u2013314\nhidden temporal coupling, 259, 302\u2013303\nhidden things, in a function, 44\nhiding\nimplementation, 94\nstructures, 99\nhierarchy of scopes, 88\nHN.See Hungarian Notation\nhorizontal alignment, of code, 87\u201388\nhorizontal formatting, 85\u201390\nhorizontal white space, 86\nHTML, in source code, 69\nHungarian Notation (HN), 23\u201324, 295\nHunt, Andy, 8, 289\nhybrid structures, 99\nI\nif statements\nduplicate, 276\neliminating, 262\nif-else chain\nappearing again and again, 290\neliminating, 233\nignored tests, 313\nimplementation\nduplication of, 173\nencoding, 24\nexposing, 94\nhiding, 94\nwrapping an abstraction, 11\nImplementation Patterns, 3, 296\nimplicity, of code, 18\nimport lists\navoiding long, 307\nshortening in SerialDate, 270\nimports, as hard dependencies, 307\nimprecision, in code, 301\ninaccurate comments, 54\ninappropriate information, in \ncomments, 286\ninappropriate static methods, 296\ninclude method, 48\ninconsistency, in code, 292\ninconsistent spellings, 20\nincrementalism, 212\u2013214\nindent level, of a function, 35\nindentation, of code, 88\u201389\nindentation rules, 89\nindependent tests, 132\ninformation\ninappropriate, 286\ntoo much, 70, 291\u2013292\ninformative comments, 56\ninheritance hierarchy, 308\ninobvious connection, between a comment \nand code, 70\ninput arguments, 41\ninstance variables\nin classes, 140\ndeclaring, 81\nhiding the declaration of, 81\u201382\npassing as function \narguments, 231\nproliferation of, 140\ninstrumented classes, 342\ninsufficient tests, 313\ninteger argument(s)\ndefining, 194\nintegrating, 224\u2013225\ninteger argument functionality, \nmoving into ArgumentMarshaler,\n215\u2013216", "422 Index\ninteger argument type, adding \nto Args, 212\nintegers, pattern of changes for, 220\nIntelliJ, 26\nintent\nexplaining in code, 55\nexplanation of, 56\u201357\nobscured, 295\nintention-revealing function, 19\nintention-revealing names, 18\u201319\ninterface(s)\ndefining local or remote, 158\u2013160\nencoding, 24\nimplementing, 149\u2013150\nrepresenting abstract concerns, 150\nturning ArgumentMarshaler into, 237\nwell-defined, 291\u2013292\nwriting, 119\ninternal structures, objects hiding, 97\nintersection, of domains, 160\nintuition, not relying on, 289\ninventor of C++, 7\nInversion of Control (IoC), 157\nInvocationHandler object, 162\nI/O bound, 318\nisolating, from change, 149\u2013150\nisxxxArg methods, 221\u2013222\niterative process, refactoring as, 265\nJ\njar files, deploying derivatives and bases \nin, 291\nJava\naspects or aspect-like mechanisms, \n161\u2013166\nheuristics on, 307\u2013309\nas a wordy language, 200\nJava 5, improvements for concurrent \ndevelopment, 182\u2013183\nJava 5 Executor framework, 320\u2013321\nJava 5 VM, nonblocking solutions in, \n327\u2013328\nJava AOP frameworks, 163\u2013166\nJava programmers, encoding not \nneeded, 24\nJava proxies, 161\u2013163\nJava source files, 76\u201377\njavadocs\nas clutter, 276\nin nonpublic code, 71\npreserving formatting in, 270\nin public APIs, 59\nrequiring for every function, 63\njava.util.concurrent package, collections \nin, 182\u2013183\nJBoss AOP, proxies in, 163\nJCommon library, 267\nJCommon unit tests, 270\nJDepend project, 76, 77\nJDK proxy, providing persistence support, \n161\u2013163\nJeffries, Ron, 10\u201311, 289\njiggling strategies, 190\nJNDI lookups, 157\njournal comments, 63\u201364\nJUnit, 34\nJUnit framework, 252\u2013265\nJunit project, 76, 77\nJust-In-Time Compiler, 180\nK\nkeyword form, of a function name, 43\nL\nL, lower-case in variable names, 20\nlanguage design, art of programming as, 49\nlanguages\nappearing to be simple, 12\nlevel of abstraction, 2\nmultiple in one source file, 288\nmultiples in a comment, 270\nlast-in, first-out (LIFO) data structure, \noperand stack as, 324\nLaw of Demeter, 97\u201398, 306", "423Index\nLAZY INITIALIZATION/\nEVALUATION idiom, 154\nLAZY-INITIALIZATION, 157\nLea, Doug, 182, 342\nlearning tests, 116, 118\nLeBlanc\u2019s law, 4\nlegacy code, 307\nlegal comments, 55\u201356\nlevel of abstraction, 36\u201337\nlevels of detail, 99\nlexicon, having a consistent, 26\nlines of code\nduplicating, 173\nwidth of, 85\nlist(s)\nof arguments, 43\nmeaning specific to programmers, 19\nreturning a predefined immutable, 110\nliterate code, 9\nliterate programming, 9\nLiterate Programming, 141\nlivelock, 183, 338\nlocal comments, 69\u201370\nlocal variables, 324\ndeclaring, 292\nat the top of each function, 80\nlock & wait, 337, 338\nlocks, introducing, 185\nlog4j package, 116\u2013118\nlogical dependencies, 282, 298\u2013299\nLOGO language, 36\nlong descriptive names, 39\nlong names, for long scopes, 312\nloop counters, single-letter names for, 25\nM\nmagic numbers\nobscuring intent, 295\nreplacing with named constants, \n300\u2013301\nmain function, moving construction to, \n155, 156\nmanagers, role of, 6\nmandated comments, 63\nmanual control, over a serial ID, 272\nMap\nadding for ArgumentMarshaler, 221\nmethods of, 114\nmaps, breaking the use of, 222\u2013223\nmarshalling implementation, \n214\u2013215\nmeaningful context, 27\u201329\nmember variables\nf prefix for, 257\nprefixing, 24\nrenaming for clarity, 259\nmental mapping, avoiding, 25\nmessy code. See also bad code; dirty code\ntotal cost of owning, 4\u201312\nmethod invocations, 324\nmethod names, 25\nmethods\naffecting the order of execution, 188\ncalling a twin with a flag, 278\nchanging from static to instance, 280\nof classes, 140\ndependencies between, 329\u2013333\neliminating duplication between, \n173\u2013174\nminimizing assert statements in, 176\nnaming, 25\ntests exposing bugs in, 269\nminimal code, 9\nmisleading comments, 63\nmisplaced responsibility, 295\u2013296, 299\nMOCK OBJECT, assigning, 155\nmonadic argument, 40\nmonadic forms, of arguments, 41\nmonads, converting dyads into, 42\nMonte Carlo testing, 341\nMonth enum, 278\nMonthConstants class, 271\nmultithread aware, 332\nmultithread-calculation, of throughput, \n335", "424 Index\nmultithreaded code, 188, 339\u2013342\nmumbling, 59\u201360\nmutators, naming, 25\nmutual exclusion, 183, 336, 337\nN\nnamed constants, replacing magic \nnumbers, 300\u2013301\nname-length-challenged languages, 23\nnames\nabstractions, appropriate level of, 311\nchanging, 40\nchoosing, 175, 309\u2013310\nof classes, 270\u2013271\nclever, 26\ndescriptive, 39\u201340\nof functions, 297\nheuristics on, 309\u2013313\nimportance of, 309\u2013310\nintention-revealing, 18\u201319\nlength of corresponding to scope, \n22\u201323\nlong names for long scopes, 312\nmaking unambiguous, 258\nproblem domain, 27\npronounceable, 21\u201322\nrules for creating, 18\u201330\nsearchable, 22\u201323\nshorter generally better than longer, 30\nsolution domain, 27\nwith subtle differences, 20\nunambiguous, 312\nat the wrong level of abstraction, 271\nnaming, classes, 138\nnaming conventions, as inferior to \nstructures, 301\nnavigational methods, in Active \nRecords, 101\nnear bugs, testing, 314\nnegative conditionals, avoiding, 302\nnegatives, 258\nnested structures, 46\nNewkirk, Jim, 116\nnewspaper metaphor, 77\u201378\nniladic argument, 40\nno preemption, 337\nnoise\ncomments, 64\u201366\nscary, 66\nwords, 21\nnomenclature, using standard, 311\u2013312\nnonblocking solutions, 327\u2013328\nnonconcurrency-related code, 181\nnoninformative names, 21\nnonlocal information, 69\u201370\nnonpublic code, javadocs in, 71\nnonstatic methods, preferred to static, 296\nnonthreaded code, getting working \nfirst, 187\nnonthread-safe classes, 328\u2013329\nnormal flow, 109\nnull\nnot passing into methods, 111\u2013112\nnot returning, 109\u2013110\npassed by a caller accidentally, 111\nnull detection logic, for ArgumentMarshaler,\n214\nNullPointerException, 110, 111\nnumber-series naming, 21\nO\nObject Oriented Analysis and Design with \nApplications, 8\nobject-oriented design, 15\nobjects\ncompared to data structures, 95, 97\ncompared to data types and proce-\ndures, 101\ncopying read-only, 181\ndefined, 95\nobscured intent, 295\nobsolete comments, 286\nobvious behavior, 288\u2013289\nobvious code, 12", "425Index\n\u201cOnce and only once\u201d principle, 289\n\u201cONE SWITCH\u201d rule, 299\none thing, functions doing, 35\u201336, 302\none-offs, 180, 187, 191\nOO code, 97\nOO design, 139\nOpen Closed Principle (OCP), 15, 38\nby checked exceptions, 106\nsupporting, 149\noperand stack, 324\noperating systems, threading policies, 188\noperators, precedence of, 86\noptimistic locking, 327\noptimizations, LAZY-EVALUATION \nas, 157\noptimizing, decision making, 167\u2013168\norderings, calculating the possible, 322\u2013323\norganization\nfor change, 147\u2013150\nof classes, 136\nmanaging complexity, 139\u2013140\noutbound tests, exercising an interface, 118\noutput arguments, 41, 288\navoiding, 45\nneed for disappearing, 45\noutputs, arguments as, 45\noverhead, incurred by concurrency, 179\noverloading, of code with description, 310\nP\npaperback model, as an academic \nmodel, 27\nparameters, taken by instructions, 324\nparse operation, throwing an \nexception, 220\npartitioning, 250\npaths of execution, 321\u2013326\npathways, through critical sections, 188\npattern names, using standard, 175\npatterns\nof failure, 314\nas one kind of standard, 311\nperformance\nof a client/server pair, 318\nconcurrency improving, 179\nof server-based locking, 333\npermutations, calculating, 323\npersistence, 160, 161\npessimistic locking, 327\nphraseology, in similar names, 40\nphysicalizing, a dependency, 299\nPlain-Old Java Objects. See POJOs\nplatforms, running threaded code, 188\npleasing code, 7\npluggable thread-based code, 187\nPOJO system, agility provided by, 168\nPOJOs (Plain-Old Java Objects)\ncreating, 187\nimplementing business logic, 162\nseparating threaded-aware code, 190\nin Spring, 163\nwriting application domain logic, 166\npolyadic argument, 40\npolymorphic behavior, of functions, 296\npolymorphic changes, 96\u201397\npolymorphism, 37, 299\nposition markers, 67\npositives\nas easier to understand, 258\nexpressing conditionals as, 302\nof decisions, 301precision\nas the point of all naming, 30\npredicates, naming, 25\npreemption, breaking, 338\nprefixes\nfor member variables, 24\nas useless in today\u2019s environments, \n312\u2013313\npre-increment operator, ++, 324, 325, 326\n\u201cprequel\u201d, this book as, 15\nprinciple of least surprise, 288\u2013289, 295\nprinciples, of design, 15\nPrintPrimes program, translation into \nJava, 141\nprivate behavior, isolating, 148\u2013149", "426 Index\nprivate functions, 292\nprivate method behavior, 147\nproblem domain names, 27\nprocedural code, 97\nprocedural shape example, 95\u201396\nprocedures, compared to objects, 101\nprocess function, repartitioning, 319\u2013320\nprocess method, I/O bound, 319\nprocesses, competing for resources, 184\nprocessor bound, code as, 318\nproducer consumer execution model, 184\nproducer threads, 184\nproduction environment, 127\u2013130\nproductivity, decreased by messy code, 4\nprofessional programmer, 25\nprofessional review, of code, 268\nprogrammers\nas authors, 13\u201314\nconundrum faced by, 6\nresponsibility  for messes, 5\u20136\nunprofessional, 5\u20136\nprogramming\ndefined, 2\nstructured, 48\u201349\nprograms, getting them to work, 201\npronounceable names, 21\u201322\nprotected variables, avoiding, 80\nproxies, drawbacks of, 163\npublic APIs, javadocs in, 59\npuns, avoiding, 26\u201327\nPUTFIELD instruction, as atomic, 325\nQ\nqueries, separating from commands, 45\u201346\nR\nrandom jiggling, tests running, 190\nrange, including end-point dates in, 276\nreadability\nof clean tests, 124\nof code, 76\nDave Thomas on, 9\nimproving using generics, 115\nreadability perspective, 8\nreaders\nof code, 13\u201314\ncontinuous, 184\nreaders-writers execution model, 184\nreading\nclean code, 8\ncode from top to bottom, 37\nversus writing, 14\nreboots, as a lock up solution, 331\nrecommendations, in this book, 13\nredesign, demanded by the team, 5\nredundancy, of noise words, 21\nredundant comments, 60\u201362, 272, 275, \n286\u2013287\nReentrantLock class, 183\nrefactored programs, as longer, 146\nrefactoring\nArgs, 212\ncode incrementally, 172\nas an iterative process, 265\nputting things in to take out, 233\ntest code, 127\nRefactoring (Fowler), 285\nrenaming, fear of, 30\nrepeatability, of concurrency bugs, 180\nrepeatable tests, 132\nrequirements, specifying, 2\nresetId, byte-code generated for, 324\u2013325\nresources\nbound, 183\nprocesses competing for, 184\nthreads agreeing on a global ordering \nof, 338\nresponsibilities\ncounting in classes, 136\ndefinition of, 138\nidentifying, 139\nmisplaced, 295\u2013296, 299\nsplitting a program into main, 146\nreturn codes, using exceptions instead, \n103\u2013105", "427Index\nreuse, 174\nrisk of change, reducing, 147\nrobust clear code, writing, 112\nrough drafts, writing, 200\nrunnable interface, 326\nrun-on expressions, 295\nrun-on journal entries, 63\u201364\nruntime logic, separating startup from, 154\nS\nsafety mechanisms, overridden, 289\nscaling up, 157\u2013161\nscary noise, 66\nschema, of a class, 194\nschools of thought, about clean code, \n12\u201313\nscissors rule, in C++, 81\nscope(s)\ndefined by exceptions, 105\ndummy, 90\nenvying, 293\nexpanding and indenting, 89\nhierarchy in a source file, 88\nlimiting for data, 181\nnames related to the length of, \n22\u201323, 312\nof shared variables, 333\nsearchable names, 22\u201323\nSecond Law, of TDD, 122\nsections, within functions, 36\nselector arguments, avoiding, 294\u2013295\nself validating tests, 132\nSemaphore class, 183\nsemicolon, making visible, 90\n\u201cserial number\u201d, SerialDate using, 271\nSerialDate class\nmaking it right, 270\u2013284\nnaming of, 270\u2013271\nrefactoring, 267\u2013284\nSerialDateTests class, 268\nserialization, 272\nserver, threads created by, 319\u2013321\nserver application, 317\u2013318, 343\u2013344\nserver code, responsibilities of, 319\nserver-based locking, 329\nas preferred, 332\u2013333\nwith synchronized methods, 185\n\u201cServlet\u201d model, of Web applications, 178\nServlets, synchronization problems, 182\nset functions, moving into appropriate \nderivatives, 232, 233\u2013235\nsetArgument, changing, 232\u2013233\nsetBoolean function, 217\nsetter methods, injecting dependencies, \n157\nsetup strategy, 155\nSetupTeardownIncluder.java listing, \n50\u201352\nshape classes, 95\u201396\nshared data, limiting access, 181\nshared variables\nmethod updating, 328\nreducing the scope of, 333\nshotgun approach, hand-coded instrumen-\ntation as, 189\nshut-down code, 186\nshutdowns, graceful, 186\nside effects\nhaving none, 44\nnames describing, 313\nSimmons, Robert, 276\nsimple code, 10, 12\nSimple Design, rules of, 171\u2013176\nsimplicity, of code, 18, 19\nsingle assert rule, 130\u2013131\nsingle concepts, in each test function, \n131\u2013132\nSingle Responsibility Principle (SRP), 15, \n138\u2013140\napplying, 321\nbreaking, 155\nas a concurrency defense principle, \n181\nrecognizing violations of, 174\nserver violating, 320", "428 Index\nSingle Responsibility Principle (SRP), \ncontinued\nSql class violating, 147\nsupporting, 157\nin test classes conforming to, 172\nviolating, 38\nsingle value, ordered components of, 42\nsingle-letter names, 22, 25\nsingle-thread calculation, of throughput, \n334\nSINGLETON pattern, 274\nsmall classes, 136\nSmalltalk Best Practice Patterns, 296\nsmart programmer, 25\nsoftware project, maintenance of, 175\nsoftware systems. See also system(s)\ncompared to physical systems, 158\nSOLID class design principle, 150\nsolution domain names, 27\nsource code control systems, 64, 68, 69\nsource files\ncompared to newspaper articles, \n77\u201378\nmultiple languages in, 288\nSparkle program, 34\nspawned threads, deadlocked, 186\nspecial case objects, 110\nSPECIAL CASE PATTERN, 109\nspecifications, purpose of, 2\nspelling errors, correcting, 20\nSpreadsheetDateFactory, 274\u2013275\nSpring AOP, proxies in, 163\nSpring Framework, 157\nSpring model, following EJB3, 165\nSpring V2.5 configuration file, 163\u2013164\nspurious failures, 187\nSql class, changing, 147\u2013149\nsquare root, as the iteration limit, 74\nSRP.See Single Responsibility Principle\nstandard conventions, 299\u2013300\nstandard nomenclature, 175, 311\u2013312\nstandards, using wisely, 168\nstartup process, separating from runtime \nlogic, 154\nstarvation, 183, 184, 338\nstatic function, 279\nstatic import, 308\nstatic methods, inappropriate, 296\nThe Step-down Rule, 37\nstories, implementing only today\u2019s, 158\nSTRATEGY pattern, 290\nstring arguments, 194, 208\u2013212, 214\u2013225\nstring comparison errors, 252\nStringBuffers, 129\nStroustrup, Bjarne, 7\u20138\nstructure(s).See also data structures\nhiding, 99\nhybrid, 99\nmaking massive changes to, 212\nover convention, 301\nstructured programming, 48\u201349\nSuperDashboard class, 136\u2013137\nswapping, as permutations, 323\nswitch statements\nburying, 37, 38\nconsidering polymorphism \nbefore, 299\nreasons to tolerate, 38\u201339\nswitch/case chain, 290\nsynchronization problems, avoiding with \nServlets, 182\nsynchronized block, 334\nsynchronized keyword, 185\nadding, 323\nalways acquiring a lock, 328\nintroducing a lock via, 331\nprotecting a critical section \nin code, 181\nsynchronized methods, 185\nsynchronizing, avoiding, 182\nsynthesis functions, 265\nsystem(s).See also software systems\nfile sizes of significant, 77\nkeeping running during development, \n213\nneeding domain-specific, 168\nsystem architecture, test driving, \n166\u2013167", "429Index\nsystem failures, not ignoring \none-offs, 187\nsystem level, staying clean at, 154\nsystem-wide information, in a local \ncomment, 69\u201370\nT\ntables, moving, 275\ntarget deployment platforms, running tests \non, 341\ntask swapping, encouraging, 188\nTDD (Test Driven Development), 213\nbuilding logic, 106\nas fundamental discipline, 9\nlaws of, 122\u2013123\nteam rules, 90\nteams\ncoding standard for every, 299\u2013300\nslowed by messy code, 4\ntechnical names, choosing, 27\ntechnical notes, reserving comments \nfor, 286\nTEMPLATE METHOD pattern\naddressing duplication, 290\nremoving higher-level duplication, \n174\u2013175\nusing, 130\ntemporal coupling. See also coupling\nexposing, 259\u2013260\nhidden, 302\u2013303\nside effect creating, 44\ntemporary variables, explaining, 279\u2013281\ntest cases\nadding to check arguments, 237\ninComparisonCompactor, 252\u2013254\npatterns of failure, 269, 314\nturning off, 58\ntest code, 124, 127\nTEST DOUBLE, assigning, 155\nTest Driven Development. See TDD\ntest driving, architecture, 166\u2013167\ntest environment, 127\u2013130\ntest functions, single concepts in, 131\u2013132\ntest implementation, of an interface, 150\ntest suite\nautomated, 213\nof unit tests, 124, 268\nverifying precise behavior, 146\ntestable systems, 172\ntest-driven development. See TDD\ntesting\narguments making harder, 40\nconstruction logic mixed with \nruntime, 155\ntesting language, domain-specific, 127\ntestNG project, 76, 77\ntests\nclean, 124\u2013127\ncleanliness tied to, 9\ncommented out for SerialDate,\n268\u2013270\ndirty, 123\nenabling the -ilities, 124\nfast, 132\nfast versus slow, 314\nheuristics on, 313\u2013314\nignored, 313\nindependent, 132\ninsufficient, 313\nkeeping clean, 123\u2013124\nminimizing assert statements in, \n130\u2013131\nnot stopping trivial, 313\nrefactoring, 126\u2013127\nrepeatable, 132\nrequiring more than one step, 287\nrunning, 341\nself validating, 132\nsimple design running all, 172\nsuite of automated, 213\ntimely, 133\nwriting for multithreaded code, \n339\u2013342\nwriting for threaded code, 186\u2013190\nwriting good, 122\u2013123", "430 Index\nThird Law, of TDD, 122\nthird-party code\nintegrating, 116\nlearning, 116\nusing, 114\u2013115\nwriting tests for, 116\nthis variable, 324\nThomas, Dave, 8, 9, 289\nthread(s)\nadding to a method, 322\ninterfering with each other, 330\nmaking as independent as \npossible, 182\nstepping on each other, 180, 326\ntaking resources from other \nthreads, 338\nthread management strategy, 320\nthread pools, 326\nthread-based code, testing, 342\nthreaded code\nmaking pluggable, 187\nmaking tunable, 187\u2013188\nsymptoms of bugs in, 187\ntesting, 186\u2013190\nwriting in Java 5, 182\u2013183\nthreading\nadding to a client/server application, \n319, 346\u2013347\nproblems in complex systems, 342\nthread-safe collections, 182\u2013183, 329\nthroughput\ncausing starvation, 184\nimproving, 319\nincreasing, 333\u2013335\nvalidating, 318\nthrows clause, 106\ntiger team, 5\ntight coupling, 172\ntime, taking to go fast, 6\nTime and Money project, 76\nfile sizes, 77\ntimely tests, 133\ntimer program, testing, 121\u2013122\n\u201cTO\u201d keyword, 36\nTO paragraphs, 37\nTODO comments, 58\u201359\ntokens, used as magic numbers, 300\nTomcat project, 76, 77\ntools\nConTest tool, 190, 342\ncoverage, 313\nhandling proxy boilerplate, 163\ntesting thread-based code, 342\ntrain wrecks, 98\u201399\ntransformations, as return values, 41\ntransitive navigation, avoiding, 306\u2013307\ntriadic argument, 40\ntriads, 42\ntry blocks, 105\ntry/catch blocks, 46\u201347, 65\u201366\ntry-catch-finally statement, 105\u2013106\ntunable threaded-based code, 187\u2013188\ntype encoding, 24\nU\nubiquitous language, 311\u2013312\nunambiguous names, 312\nunchecked exceptions, 106\u2013107\nunencapsulated conditional, encapsulating, \n257\nunit testing, isolated as difficult, 160\nunit tests, 124, 175, 268\nunprofessional programming, 5\u20136\nuppercaseC, in variable names, 20\nusability, of newspapers, 78\nuse, of a system, 154\nusers, handling concurrently, 179\nV\nvalidation, of throughput, 318\nvariable names, single-letter, 25", "431Index\nvariables\n1 based versus zero based, 261\ndeclaring, 80, 81, 292\nexplaining temporary, 279\u2013281\nexplanatory, 296\u2013297\nkeeping private, 93\nlocal, 292, 324\nmoving to a different class, 273\nin place of comments, 67\npromoting to instance variables of \nclasses, 141\nwith unclear context, 28\nventing, in comments, 65\nverbs, keywords and, 43\nVersion class, 139\nversions, not deserializing across, 272\nvertical density, in code, 79\u201380\nvertical distance, in code, 80\u201384\nvertical formatting, 76\u201385\nvertical openness, between concepts, \n78\u201379\nvertical ordering, in code, 84\u201385\nvertical separation, 292\nW\nwading, through bad code, 3\nWeb containers, decoupling provided \nby, 178\nwhat, decoupling from when, 178\nwhite space, use of horizontal, 86\nwildcards, 307\nWorking Effectively with Legacy \nCode, 10\n\u201cworking\u201d programs, 201\nworkmanship, 176\nwrappers, 108\nwrapping, 108\nwriters, starvation of, 184\n\u201cWriting Shy Code\u201d, 306\nX\nXML\ndeployment descriptors, 160\n\u201cpolicy\u201d specified configuration \nfiles, 164"]